{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/styles.css","path":"libs/open-sans/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/avatar.png","path":"css/images/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","path":"libs/jquery/2.1.3/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"3c8c126c513552de68852b6a6021819047598927","modified":1541410240222},{"_id":"themes/icarus/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1520494962588},{"_id":"themes/icarus/.gitignore","hash":"542aaea07afe90211c6a45c90b7d6879a4503043","modified":1520493732281},{"_id":"themes/icarus/LICENSE","hash":"df00918fa95de563927fd92b26f14c7affdc3052","modified":1520493732282},{"_id":"themes/icarus/README.md","hash":"acd2d5d12820b065345d68f88bfc3a739f8d8ae2","modified":1520493732282},{"_id":"themes/icarus/_config.yml","hash":"f7973ed6a8de5067d47ad4f5c9c19e64285ae1a4","modified":1520493487012},{"_id":"themes/icarus/package.json","hash":"1bc52ef10a33df23e56bd73c927f605019c87d41","modified":1520493732317},{"_id":"source/_drafts/Raspberry-PI-基本使用.md","hash":"9a724c082c2d689866e4edfc8cb8bcb57ed74ae2","modified":1521794700633},{"_id":"source/_drafts/字典的存储结构.md","hash":"8fba3ba386cff56788a75b67f9f5ced1323e351a","modified":1535350252622},{"_id":"source/_drafts/常用工具.md","hash":"b32a2e7565a2ab9d515ec900cbae9a3ca974f4b4","modified":1537951951439},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1541410245258},{"_id":"source/_posts/Notification 的一些知识点.md","hash":"513bc303f31247dd4441534fb1f686622f8edd9c","modified":1541411557770},{"_id":"source/_posts/RAC和内存管理.md","hash":"60dba95639f958176e821c321b806f9c2f6e9691","modified":1541411570557},{"_id":"source/_posts/Shell-Tip.md","hash":"227a651e07189b740c16442f39d83d0a0d07dac0","modified":1527158751020},{"_id":"source/_posts/Swift-High-Performance-Tip 1：Array和ContiguousArray.md","hash":"3a38b69ca8d7248ece6d53aab2be5bd9421d7387","modified":1521794573310},{"_id":"source/_posts/.Ulysses-Group.plist","hash":"e54400f59c749c3e0d9170039e965daa8e02b498","modified":1541404867481},{"_id":"source/_posts/Swift-High-Performance-Tip 2：final和private(fileprivate).md","hash":"76438d026841197040f2529775a332658a462785","modified":1521794581021},{"_id":"source/_posts/Swift-High-Performance-Tip 3：@objc-和-dynamic.md","hash":"a13cdf33dfa540f713ec3bc07583d3adc5b23105","modified":1528879496649},{"_id":"source/_posts/Vim-Tip.md","hash":"06835dc2cc01099c72381b80582b6d34b8e1fa06","modified":1521794586334},{"_id":"source/_posts/include和import的区别.md","hash":"10dd8cdf358ec08bdf773c56590e5f79f1021756","modified":1521794531229},{"_id":"source/_posts/redux-之页面跳转.md","hash":"7d4f19664ac6b8ec3ee786f7ce47cd7b9c3bbbab","modified":1528881470920},{"_id":"source/_posts/self-在-block-中的引用计数变化.md","hash":"290856dd224f551942c92c62e33a0a2505215ba4","modified":1541410061368},{"_id":"source/_posts/初步了解GCD.md","hash":"2330b526c01b138b975b7c411196c624d0d01e9b","modified":1523865654841},{"_id":"source/_posts/如何用-Objective-C-实现一个死锁.md","hash":"7f6a3ff3572aff1d00bb2d313eb4c669504befb3","modified":1522592187166},{"_id":"source/_posts/说说-Objective-C-中的-Copy-操作.md","hash":"7f8ae56b92f3912512582d8aad3a00b2e9ad6dec","modified":1524044568943},{"_id":"source/_posts/如何在-iOS-上自定义-React-Native-Component.md","hash":"fa2ebdd3911b3bab49d225fbbdd7bae1b89916f2","modified":1521794198931},{"_id":"source/about/index.md","hash":"7a411eeda04f90c0cae9c0022d92da7fb1f596a6","modified":1533194172076},{"_id":"source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1520493732283},{"_id":"source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1520493732283},{"_id":"themes/icarus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1520493732274},{"_id":"themes/icarus/.git/COMMIT_EDITMSG","hash":"69e16e0ba15e03638a1b673fb5217095291a19c8","modified":1520494974624},{"_id":"themes/icarus/.git/config","hash":"6da5507355104641d8fc20b1ad38cb869652321c","modified":1520493732278},{"_id":"themes/icarus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1520493724520},{"_id":"themes/icarus/.git/index","hash":"9dc06b3b050388ac65a318c9e4d3a9e7b517229e","modified":1520494974622},{"_id":"themes/icarus/.git/packed-refs","hash":"a3c13b37ddb6b9d47351f993eefc214f4f694e1c","modified":1520493732270},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE.md","hash":"9393fd3dbc943f1544facb66af7fd8b7a5b9ddbb","modified":1520493732281},{"_id":"themes/icarus/languages/en.yml","hash":"ade241498b85503a8953a1deca963222f47067a7","modified":1520493732284},{"_id":"themes/icarus/languages/es.yml","hash":"d7432219be5bee4cb569331378ade61b749688e0","modified":1520493732284},{"_id":"themes/icarus/languages/fr.yml","hash":"cb3e597cbec7e8f458858c457bafd1f3a225083d","modified":1520493732284},{"_id":"themes/icarus/languages/id.yml","hash":"e4961da507f66c8f7c37f85653a9437cb2056bf6","modified":1520493732285},{"_id":"themes/icarus/languages/ko.yml","hash":"7c4ad4577dc0577ad2ca1c0410507f5e5fadf530","modified":1520493732286},{"_id":"themes/icarus/languages/ja.yml","hash":"ff972961e5f468a695d80d21b62c3e9032cdf561","modified":1520493732286},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"3c5d5293575593705b9a2dfa9d97b017eb4bc8c3","modified":1520493732287},{"_id":"themes/icarus/languages/ru.yml","hash":"d1aab2b0c939d0c6020f881d664b660a01ee7327","modified":1520493732288},{"_id":"themes/icarus/languages/tr.yml","hash":"8b7eb6aec264db50dbabea89f680acca256f4cd1","modified":1520493732288},{"_id":"themes/icarus/layout/archive.ejs","hash":"c1ecf667f40f34d61ab33eed46bab143eb1af36d","modified":1520493732290},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"3dc8ec524805afd090438be717908750da439204","modified":1520493732289},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"d8d96a0a17c20af11919ce036e87379a6b163db9","modified":1520493732289},{"_id":"themes/icarus/layout/categories.ejs","hash":"aa95629b770cff8cca9d663aeb6b17928f070de5","modified":1520493732290},{"_id":"themes/icarus/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1520493732290},{"_id":"themes/icarus/layout/index.ejs","hash":"43e971ebc35657b18e08a049559790348a16666f","modified":1520493732302},{"_id":"themes/icarus/layout/layout.ejs","hash":"6f01b3d46d184a820297f9542497808b152bb09e","modified":1520493732303},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1520493732304},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1520493732307},{"_id":"themes/icarus/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1520493732312},{"_id":"themes/icarus/layout/tags.ejs","hash":"b0fcea68d7c11e5899bf0375d80997685111653f","modified":1520493732312},{"_id":"themes/icarus/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1520493732319},{"_id":"themes/icarus/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1520493732320},{"_id":"themes/icarus/source/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1520494118718},{"_id":"themes/icarus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1520493724522},{"_id":"themes/icarus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1520493724520},{"_id":"themes/icarus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1520493724531},{"_id":"themes/icarus/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1520493724524},{"_id":"themes/icarus/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1520493724522},{"_id":"themes/icarus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1520493724534},{"_id":"themes/icarus/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1520493724539},{"_id":"themes/icarus/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1520493724521},{"_id":"themes/icarus/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1520493724519},{"_id":"themes/icarus/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1520493724526},{"_id":"themes/icarus/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1520493724528},{"_id":"themes/icarus/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1520493724540},{"_id":"themes/icarus/.git/logs/HEAD","hash":"92430f9b49a85f17f2c99444a3d9feb159061006","modified":1520494974626},{"_id":"themes/icarus/_source/about/index.md","hash":"2847759c65295fdc47685cc32e10ae30b2f022ae","modified":1520493732283},{"_id":"themes/icarus/_source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1520493732283},{"_id":"themes/icarus/_source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1520493732283},{"_id":"themes/icarus/layout/comment/counter.ejs","hash":"57c194d0fa268ce2f3e9c755b3154b8a0709f613","modified":1520493732291},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"b4bd2e641af59e06becaa8f2dc97867f023b8dcf","modified":1520493732291},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"1b32a90f400dc580f4b8298de75b94429ca6de68","modified":1520493732292},{"_id":"themes/icarus/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1520493732292},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"5ee16430a4435c2fead0275ff83fc98092d73d4c","modified":1520493732292},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"c7998209b9a766eeba6976dd4bdffb1f87469358","modified":1520493732293},{"_id":"themes/icarus/layout/comment/index.ejs","hash":"0bce9ca0767b49d2a9fc026a6004a8526a20624b","modified":1520493732293},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"4f8b81ff5bb418ec11ce080d515f247bfe436014","modified":1520493732294},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"792e4f0e93b2bdc5abd85d447d804a5c608a9c5c","modified":1520493732294},{"_id":"themes/icarus/layout/comment/scripts.ejs","hash":"d45f652268671de96c86d8ca50b9deaf011274f0","modified":1520493732294},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"0ea90a606f0d386a5ae0da83c0501cbb25319fde","modified":1520493732295},{"_id":"themes/icarus/layout/comment/youyan.ejs","hash":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1520493732295},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"cbfe560fcab445d42ceeb5d1beba5957d5be5eaa","modified":1520493732296},{"_id":"themes/icarus/layout/common/article.ejs","hash":"9c260a551596f71e93177f2289b5cb1c4bc7d96c","modified":1520493732296},{"_id":"themes/icarus/layout/common/head.ejs","hash":"44f30945882afd27c89da2173da501fb1b531488","modified":1520493732297},{"_id":"themes/icarus/layout/common/header.ejs","hash":"738c6a923b2a6de6a81c4892c8a47e03d8b34f88","modified":1520493732297},{"_id":"themes/icarus/layout/common/profile.ejs","hash":"0d5a9622d490652599e3ba3e4077a7d6bb2eb38e","modified":1520493732300},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"c0a1a9e53f89440c42c325d5bd8c7234652c8937","modified":1520493732301},{"_id":"themes/icarus/layout/common/sidebar.ejs","hash":"1ee2384f98c8ccaa7a5b00f14ad2a9a67022c143","modified":1520493732301},{"_id":"themes/icarus/layout/common/thumbnail.ejs","hash":"1b70f8a98cd8650b159bda858dbee38dbdb7f0c5","modified":1520493732302},{"_id":"themes/icarus/layout/common/timeline.ejs","hash":"6420e34e0332c9b6670011519f341340db989343","modified":1520493732302},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"6a7bee18e666e627e62541a5e30906f87ba1bfe8","modified":1520493732305},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1520493732305},{"_id":"themes/icarus/layout/plugin/scripts.ejs","hash":"e22f99652a220d926103801a3cad55ea9c450e05","modified":1520493732306},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"3e603a702d20c53fd3bcbeb570a16a86d54781ce","modified":1520493732308},{"_id":"themes/icarus/layout/search/index-mobile.ejs","hash":"50a727ac1dfe3073eb6fa6699ba01e66f4ac41c0","modified":1520493732308},{"_id":"themes/icarus/layout/search/index.ejs","hash":"24935e32e61d4706454b174ea3bed0726ae7fb34","modified":1520493732308},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1520493732309},{"_id":"themes/icarus/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1520493732309},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1520493732309},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1520493732310},{"_id":"themes/icarus/layout/share/default.ejs","hash":"ebfb919dc525b3ed61a6a5ee05ee71410eedc541","modified":1520493732311},{"_id":"themes/icarus/layout/share/index.ejs","hash":"2a2c0095b95b11e5692bd8ad6a2337aa644189a2","modified":1520493732311},{"_id":"themes/icarus/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1520493732311},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"d9ebbb7f6ce2f25df5ae25e4a1fef3c08f7054b9","modified":1520493732313},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"583bda80cf15b3ef11fefbd1b502897dfff40100","modified":1520493732313},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"aad118699718b62c0d3f3cfd6f17a181139a76af","modified":1520493732315},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"2ca923465275fb38a7ac7d67211d6e94a977e957","modified":1520493732315},{"_id":"themes/icarus/source/css/_extend.styl","hash":"539e02107f35e8b3bdb9bf160dc212a433a7b60e","modified":1520493732321},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"3b8ae5953990436893da9d68f910ebe592005659","modified":1520493732316},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"ca8c7bf555fb6ce4904f2c59160548405c2c8a82","modified":1520493732317},{"_id":"themes/icarus/source/css/_variables.styl","hash":"d62af931be6612ec8c3a917836379a8cd92fbce1","modified":1520493732376},{"_id":"themes/icarus/source/css/style.styl","hash":"1716b199dba80b26086f325d69c36fa682465106","modified":1520493732381},{"_id":"themes/icarus/source/js/insight.js","hash":"c1bafa7f87e9f25fca1e033fc6d1e0c82712ac99","modified":1520493732382},{"_id":"themes/icarus/source/js/main.js","hash":"23b373067df0dbac27622bc7537bb4fda243a9c8","modified":1520493732383},{"_id":"themes/icarus/.git/objects/17/ae77f2a82fda914b208b5bdf3c3cdd0f2fcaea","hash":"c4179ace043ae0c91798bd6a1d684d9dff8ef719","modified":1520494974625},{"_id":"themes/icarus/.git/objects/36/280d07f3a5e502929b3c5952d6374c1683c256","hash":"8f6bd752ef89e2b4d80a0dd1e0e81ede9b0eea7e","modified":1520494051092},{"_id":"themes/icarus/.git/objects/3d/517d05d6a693aa74845a5433ad369083649ce8","hash":"164bada3463bf7901d95abe0d56348fa1ab82887","modified":1520494974621},{"_id":"themes/icarus/.git/objects/3e/1540ab20cd0d121f7156bf48f79783ff408a95","hash":"259534e75fcc2fe968999b18ac013a1d9dcb5409","modified":1520494051099},{"_id":"themes/icarus/.git/objects/4c/b31b9a79d75c786faacc075a0d391075473900","hash":"d9dbeab3bba22c2727b22947ae71225c4cb187a1","modified":1520494051088},{"_id":"themes/icarus/.git/objects/5d/97ea5a693f8accce288974108c9fc659c061a3","hash":"75205b51f5e5197352efac8522dc99a715f8f1b8","modified":1520494051098},{"_id":"themes/icarus/.git/objects/de/04e9915e1c94a5b5d72b966912ead39d9c3bed","hash":"bedd3dd5527de71eafb99ad9b151b8672c8dac4f","modified":1520494974619},{"_id":"themes/icarus/.git/objects/f4/645d78a298303897cd8df620d320e0c59849bb","hash":"aa7e29a808fe0d3d15f9c6ce86a64a4a35373034","modified":1520494974621},{"_id":"themes/icarus/.git/objects/pack/pack-d611b37c0bcd4551d83280da27dfe6b037cb9080.idx","hash":"d5f1880cc5e2a0af3346488f0fde44cbd75a0fa4","modified":1520493731987},{"_id":"themes/icarus/.git/objects/d9/5d7ed1d72cf92d1f7c36282e4ea173be797adb","hash":"8dec2f85f5727ad85d6c46fd37069956775c3b42","modified":1520494051096},{"_id":"themes/icarus/.git/objects/f4/3224882fd9ec54abc3694353ba065a8797b380","hash":"32141aeb20758e13299b0e76ea9136c814728ed7","modified":1520494974620},{"_id":"themes/icarus/.git/refs/heads/master","hash":"b92dcf691b1f4f58ac71dfb30b448342f3d4c4be","modified":1520494974626},{"_id":"themes/icarus/layout/common/post/banner.ejs","hash":"47ced3f03525698c79c6b1c07b48383fb6c496b2","modified":1520493732297},{"_id":"themes/icarus/layout/common/post/category.ejs","hash":"75c9dda2e7ec041943855ca163a6b1c4c8b4f260","modified":1520493732298},{"_id":"themes/icarus/layout/common/post/date.ejs","hash":"45cb0bcad461036cdd1fe2e3fbb5f2f19940025c","modified":1520493732298},{"_id":"themes/icarus/layout/common/post/gallery.ejs","hash":"659f019761116313169148ec61773e7b84abb739","modified":1520493732299},{"_id":"themes/icarus/layout/common/post/nav.ejs","hash":"d7cd611e642327f33dff3963ef869c2b46824a11","modified":1520493732299},{"_id":"themes/icarus/layout/common/post/title.ejs","hash":"669ddb46fefa100856588351a7a2d30ad996b755","modified":1520493732300},{"_id":"themes/icarus/layout/common/post/tag.ejs","hash":"2e966216256321aa0c76fe1b9be689601c76ef31","modified":1520493732300},{"_id":"themes/icarus/source/css/_partial/archive.styl","hash":"d35088c83ddd7a197d6d94e16a2ce3a7e29fa1dc","modified":1520493732370},{"_id":"themes/icarus/source/css/_partial/article.styl","hash":"77c4ae7fe3dc16c569bb45d365cc3c147c2e9498","modified":1520493732371},{"_id":"themes/icarus/source/css/_partial/comment.styl","hash":"784646796184d4f27918c22395288a2fafbf9554","modified":1520493732371},{"_id":"themes/icarus/source/css/_partial/footer.styl","hash":"484776654e4c1691dc844e6e93786a08855c1c99","modified":1520493732372},{"_id":"themes/icarus/source/css/_partial/header.styl","hash":"1e351f741144135871a3373fe7e969dc961b65e7","modified":1520493732372},{"_id":"themes/icarus/source/css/_partial/insight.styl","hash":"19833cd127f26ad90b06c115f8a96a30e0c0e53b","modified":1520493732373},{"_id":"themes/icarus/source/css/_partial/profile.styl","hash":"fb0170075dc2a41e01dd11bbfdbccbed544c479a","modified":1520493732373},{"_id":"themes/icarus/source/css/_partial/sidebar.styl","hash":"f528ca7064d9fcecd737b9b71c9c54601365d7d3","modified":1520493732374},{"_id":"themes/icarus/source/css/_partial/timeline.styl","hash":"c813b98f4fc45b64d2e07e5d944745a654c8c943","modified":1520493732374},{"_id":"themes/icarus/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1520493732322},{"_id":"themes/icarus/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1520493732324},{"_id":"themes/icarus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1520493732325},{"_id":"themes/icarus/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1520493732327},{"_id":"themes/icarus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1520493732327},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1520493732329},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1520493732328},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1520493732329},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1520493732332},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1520493732331},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1520493732333},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1520493732333},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1520493732334},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1520493732336},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1520493732335},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1520493732337},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1520493732338},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1520493732339},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1520493732339},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1520493732340},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1520493732341},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1520493732342},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1520493732342},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1520493732343},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1520493732343},{"_id":"themes/icarus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1520493732344},{"_id":"themes/icarus/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1520493732345},{"_id":"themes/icarus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1520493732345},{"_id":"themes/icarus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1520493732346},{"_id":"themes/icarus/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1520493732347},{"_id":"themes/icarus/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1520493732347},{"_id":"themes/icarus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1520493732348},{"_id":"themes/icarus/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1520493732348},{"_id":"themes/icarus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1520493732349},{"_id":"themes/icarus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1520493732350},{"_id":"themes/icarus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1520493732349},{"_id":"themes/icarus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1520493732350},{"_id":"themes/icarus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1520493732351},{"_id":"themes/icarus/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1520493732352},{"_id":"themes/icarus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1520493732354},{"_id":"themes/icarus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1520493732351},{"_id":"themes/icarus/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1520493732353},{"_id":"themes/icarus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1520493732353},{"_id":"themes/icarus/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1520493732354},{"_id":"themes/icarus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1520493732355},{"_id":"themes/icarus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1520493732355},{"_id":"themes/icarus/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1520493732358},{"_id":"themes/icarus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1520493732356},{"_id":"themes/icarus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1520493732357},{"_id":"themes/icarus/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1520493732357},{"_id":"themes/icarus/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1520493732358},{"_id":"themes/icarus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1520493732359},{"_id":"themes/icarus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1520493732359},{"_id":"themes/icarus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1520493732360},{"_id":"themes/icarus/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1520493732360},{"_id":"themes/icarus/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1520493732361},{"_id":"themes/icarus/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1520493732363},{"_id":"themes/icarus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1520493732364},{"_id":"themes/icarus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1520493732364},{"_id":"themes/icarus/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1520493732365},{"_id":"themes/icarus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1520493732365},{"_id":"themes/icarus/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1520493732365},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1520493732367},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1520493732366},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1520493732367},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1520493732368},{"_id":"themes/icarus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1520493732368},{"_id":"themes/icarus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1520493732369},{"_id":"themes/icarus/source/css/_util/grid.styl","hash":"93fb6f1e2f40cd7d88ad0d56dd73d3f9a7bc853e","modified":1520493732375},{"_id":"themes/icarus/source/css/_util/mixin.styl","hash":"c8e1ddfc0fe9108bab592c7a73b73ce9344991fd","modified":1520493732376},{"_id":"themes/icarus/source/css/images/logo.png","hash":"e606a0584f98268b2fe92303f3254520862ef659","modified":1520493732380},{"_id":"themes/icarus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1520493732369},{"_id":"themes/icarus/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1520493732370},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1520493732403},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1520493732402},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1520493732381},{"_id":"themes/icarus/source/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1520493732442},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1520493732443},{"_id":"themes/icarus/.git/objects/c7/37bb814e53ccbfb854421efcf6407831975fd9","hash":"2cb438c02780b1faa4568db79ca41320f34731f8","modified":1520493786778},{"_id":"themes/icarus/source/css/images/avatar.png","hash":"4870887bed0b021cbc91359f7236f26129dd350e","modified":1520491680566},{"_id":"themes/icarus/.git/logs/refs/heads/master","hash":"92430f9b49a85f17f2c99444a3d9feb159061006","modified":1520494974628},{"_id":"themes/icarus/.git/refs/remotes/origin/master","hash":"b92dcf691b1f4f58ac71dfb30b448342f3d4c4be","modified":1520494989078},{"_id":"themes/icarus/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1520493732273},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1520493732385},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1520493732384},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1520493732404},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1520493732405},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1520493732405},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1520493732407},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1520493732413},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1520493732414},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1520493732406},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1520493732416},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1520493732413},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1520493732408},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1520493732417},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1520493732417},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1520493732418},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1520493732419},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1520493732418},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1520493732421},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1520493732422},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1520493732419},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1520493732425},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1520493732420},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1520493732427},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1520493732421},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1520493732423},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1520493732428},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1520493732426},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1520493732428},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1520493732429},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1520493732429},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1520493732430},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1520493732428},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1520493732432},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1520493732430},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1520493732429},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1520493732434},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1520493732431},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1520493732434},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1520493732434},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1520493732435},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1520493732437},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1520493732435},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1520493732436},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1520493732438},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1520493732438},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1520493732436},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1520493732437},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1520493732438},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1520493732439},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1520493732439},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1520493732440},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1520493732441},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1520493732440},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1520493732440},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1520493732416},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1520493732441},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1520493732443},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1520493732441},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1520493732442},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1520493732443},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1520493732387},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1520493732388},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1520493732398},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1520493732401},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1520493732397},{"_id":"themes/icarus/.git/logs/refs/remotes/origin/master","hash":"e7c8b3b2f48e1840436966476c892fa664c33057","modified":1520494989078},{"_id":"themes/icarus/.git/logs/refs/remotes/origin/HEAD","hash":"ab1d6d8d66fd4f8a458e7cc8abc27811a80e5e1b","modified":1520493732273},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1520493732396},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1520493732393},{"_id":"themes/icarus/.git/objects/pack/pack-d611b37c0bcd4551d83280da27dfe6b037cb9080.pack","hash":"e23244db5daa5b1caddcae6cfe0140b878c30145","modified":1520493941000},{"_id":"public/content.json","hash":"3637d492c65f756ba75fdbc06fe09468cc98d6dc","modified":1541411665455},{"_id":"public/about/index.html","hash":"e28049f563287b74217ae0e43e6889b76c3b245e","modified":1541411665896},{"_id":"public/categories/index.html","hash":"8f66de42c6fd3d057f07bce5902a79865abe1e87","modified":1541411665896},{"_id":"public/tags/index.html","hash":"f9b7e56d84d604f30ee2adfef9f31f8a0ee563c2","modified":1541411665897},{"_id":"public/2018/11/06/Notification 的一些知识点/index.html","hash":"863a6722ba5af9d0076b13f53ab3457438c2fdcd","modified":1541411665897},{"_id":"public/2018/05/25/Swift-High-Performance-Tip 3：@objc-和-dynamic/index.html","hash":"301a279ebe84139a2851bf89a4dfa61dfd538504","modified":1541411665897},{"_id":"public/2018/04/19/self-在-block-中的引用计数变化/index.html","hash":"720faca5ac85f8cb7dd253362871bcf583c767ee","modified":1541411665897},{"_id":"public/2018/04/02/如何用-Objective-C-实现一个死锁/index.html","hash":"2dcc986af399a089303f707e45d4995e640d390b","modified":1541411665897},{"_id":"public/2018/03/24/说说-Objective-C-中的-Copy-操作/index.html","hash":"03ef29ddfe57d40a1557bca85e8f50751178f9b3","modified":1541411665898},{"_id":"public/2018/03/20/如何在-iOS-上自定义-React-Native-Component/index.html","hash":"6edfdf92009608c684d9cede3154f701117c8aa0","modified":1541411665898},{"_id":"public/2018/02/27/redux-之页面跳转/index.html","hash":"ce5b14eab07b84fcc044ac0e383f000cddad7d77","modified":1541411665898},{"_id":"public/2017/09/05/Shell-Tip/index.html","hash":"2284f48f84ddaa45f230ad5cd8985a1f3496a1e3","modified":1541411665898},{"_id":"public/2017/09/05/Swift-High-Performance-Tip 1：Array和ContiguousArray/index.html","hash":"377712f654edceb6b1761c4ec322f895fe254bba","modified":1541411665898},{"_id":"public/2017/09/05/Swift-High-Performance-Tip 2：final和private(fileprivate)/index.html","hash":"747cc551b991642abeb8650d0febd96ef7e13f74","modified":1541411665898},{"_id":"public/2017/09/05/初步了解GCD/index.html","hash":"3235958b2c1d3cd3d5b0ca67b46056c59a00a326","modified":1541411665898},{"_id":"public/2017/09/05/RAC和内存管理/index.html","hash":"de53cdb96f71637236d8c0ab12c246293669702c","modified":1541411665898},{"_id":"public/2017/09/05/Vim-Tip/index.html","hash":"c92bc329d80e60e61d51587a456e7e6ab2f7cbf1","modified":1541411665899},{"_id":"public/2017/09/05/include和import的区别/index.html","hash":"edd36404e57ce7382a2a6fed946e4c7a960e3cfe","modified":1541411665899},{"_id":"public/categories/技术/index.html","hash":"752c8d8e506b58f96bdfb1248bc3f159c90f68e7","modified":1541411665899},{"_id":"public/categories/技术/page/2/index.html","hash":"3deb1e9801a48ef1c19db4f638b17d89a217ab13","modified":1541411665899},{"_id":"public/archives/index.html","hash":"a82e5fb1db5b10a9eb03c66d2945caad8e43ef9d","modified":1541411665899},{"_id":"public/archives/page/2/index.html","hash":"531b671ed5d3391f2d4aac8ad666ab7df1efcdf3","modified":1541411665899},{"_id":"public/archives/2017/index.html","hash":"166fe2dce735fc7ce0631076c48ba9fb6248e9c3","modified":1541411665899},{"_id":"public/archives/2017/09/index.html","hash":"7f7f1b170a39a43e89de4cc004d4dcfa72806bae","modified":1541411665899},{"_id":"public/archives/2018/index.html","hash":"3f1f18018b96cb53d814ad631d2a67428307caad","modified":1541411665899},{"_id":"public/archives/2018/02/index.html","hash":"8390c44c733cddb9010a99c740e031d02da22b73","modified":1541411665899},{"_id":"public/archives/2018/03/index.html","hash":"00d981c3fbb58c6eb17561058f58cfc28cc97e51","modified":1541411665899},{"_id":"public/archives/2018/04/index.html","hash":"775e254f7c934383b46edc6ae9f7be2c726c6385","modified":1541411665899},{"_id":"public/archives/2018/05/index.html","hash":"14dafdfb4f2a3a09bc62af4bc6d7a6214cb31b7b","modified":1541411665899},{"_id":"public/archives/2018/11/index.html","hash":"39828d0bc9919b5cb683d935f83b3f2f00793193","modified":1541411665899},{"_id":"public/index.html","hash":"8af82cc05f09cad3b147facd38e5cee1f396c41d","modified":1541411665899},{"_id":"public/tags/iOS/index.html","hash":"3c04b90544c55ff801e587951c0e58e8e93aa7df","modified":1541411665899},{"_id":"public/page/2/index.html","hash":"891dd1dc6934525700a4b3329882bf61971f7c06","modified":1541411665900},{"_id":"public/tags/iOS/page/2/index.html","hash":"95654d71f4dce70922f98f398ff3b7fd857367b3","modified":1541411665900},{"_id":"public/tags/Swift/index.html","hash":"91193241e8727cf75c59ebbe2630b242db4ffaa2","modified":1541411665900},{"_id":"public/tags/RAC/index.html","hash":"22847aa16fe277f16ac90784e8e8b732123176cf","modified":1541411665900},{"_id":"public/tags/tip/index.html","hash":"ffeade127e778d78cbf204d66c6941d8c7a7f0b9","modified":1541411665900},{"_id":"public/tags/RN/index.html","hash":"50296890abfcafb35ded1c86e68ad48dc705c882","modified":1541411665900},{"_id":"public/tags/redux/index.html","hash":"0fa73b1be0da75437f2719e81050884c09eb269d","modified":1541411665900},{"_id":"public/tags/Objective-C/index.html","hash":"33b77ca4a05f6c2f1a77f65ef0770f69e1670757","modified":1541411665900},{"_id":"public/tags/Block/index.html","hash":"75d1f53ba1fcf1eee13805cf48a9b533d9b3dc07","modified":1541411665900},{"_id":"public/tags/GCD/index.html","hash":"a5a5968d8c7403d23983e0f5371d9f454d1332cf","modified":1541411665900},{"_id":"public/css/images/logo.png","hash":"e606a0584f98268b2fe92303f3254520862ef659","modified":1541411665907},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1541411665907},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1541411665907},{"_id":"public/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1541411665907},{"_id":"public/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1541411665907},{"_id":"public/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1541411665907},{"_id":"public/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1541411665907},{"_id":"public/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1541411665908},{"_id":"public/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1541411665908},{"_id":"public/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1541411665908},{"_id":"public/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1541411665908},{"_id":"public/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1541411665908},{"_id":"public/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1541411665908},{"_id":"public/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1541411665908},{"_id":"public/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1541411665908},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1541411665908},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1541411665908},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1541411665908},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1541411665908},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1541411665908},{"_id":"public/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1541411665908},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1541411665909},{"_id":"public/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1541411665909},{"_id":"public/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1541411665909},{"_id":"public/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1541411665909},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1541411665909},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1541411665909},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1541411665909},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1541411665909},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1541411665909},{"_id":"public/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1541411665909},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1541411665909},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1541411665909},{"_id":"public/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1541411665909},{"_id":"public/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1541411665910},{"_id":"public/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1541411665910},{"_id":"public/css/images/avatar.png","hash":"4870887bed0b021cbc91359f7236f26129dd350e","modified":1541411666393},{"_id":"public/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1541411666396},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1541411666397},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1541411666398},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1541411666398},{"_id":"public/js/insight.js","hash":"c1bafa7f87e9f25fca1e033fc6d1e0c82712ac99","modified":1541411666407},{"_id":"public/js/main.js","hash":"23b373067df0dbac27622bc7537bb4fda243a9c8","modified":1541411666407},{"_id":"public/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1541411666407},{"_id":"public/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1541411666407},{"_id":"public/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1541411666407},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1541411666407},{"_id":"public/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1541411666407},{"_id":"public/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1541411666407},{"_id":"public/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1541411666407},{"_id":"public/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1541411666408},{"_id":"public/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1541411666408},{"_id":"public/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1541411666408},{"_id":"public/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1541411666408},{"_id":"public/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1541411666408},{"_id":"public/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1541411666408},{"_id":"public/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1541411666408},{"_id":"public/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1541411666408},{"_id":"public/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1541411666408},{"_id":"public/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1541411666408},{"_id":"public/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1541411666408},{"_id":"public/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1541411666408},{"_id":"public/css/style.css","hash":"f48d9ebb230859086fa29957616afd3d1b962cb1","modified":1541411666408},{"_id":"public/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1541411666408},{"_id":"public/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1541411666408},{"_id":"public/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1541411666408},{"_id":"public/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1541411666408},{"_id":"public/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1541411666409},{"_id":"public/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1541411666409},{"_id":"public/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1541411666409},{"_id":"public/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1541411666409},{"_id":"public/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1541411666409},{"_id":"public/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1541411666409},{"_id":"public/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1541411666409},{"_id":"public/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1541411666409},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1541411666409},{"_id":"public/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1541411666419}],"Category":[{"name":"Raspberry PI","_id":"cjo44p6uz0004arvbcctlq09b"},{"name":"技术","_id":"cjo44p6v6000aarvb60p7pth6"}],"Data":[],"Page":[{"title":"About","layout":"page","_content":"\n## 工作经历\n\n### 北京品冠天成科技有限公司\n\niOS 高级工程师（2016.08 - 至今）\n\n1. 负责日常的产品研发和维护工作 \n2. 负责对新技术的研究与应用\n3. 负责代码的重构和封装\n4. 定制项目的开发\n5. 微信小程序的开发 \n6. React Native 的开发 \n7. 自动化打包流程\n\n### 北京黑米世纪网络科技有限公司\n\niOS 高级工程师（2013.03 - 2016.08）\n\n1. Review 团队成员代码，提出指导意见\n2. 负责对进行架构设计、开发、性能分析和优化，分析和发现系统的优化点 \n3. 新技术的学习并推动团队成员的技术进步\n4. 为产品部门提供技术支持，提出产品的不足之处，帮助改进产品\n5. 重构代码，封装常用的工具和公司的基础业务\n6. 日常的研发编码工作\n7. 负责客户端团队的招聘工作\n\n\n## 做过比较蠢的事（这里会记录工作几年来干的特别愚蠢的事）\n\n1. 不小心在 Xcode 中把企业证书 Revoke 掉，导致之前发出去的包都无法使用，紧急把十几个包重新打包发布。\n2. 错误在在小程序里面修改 UserProfile 的时候使用了 PUT，导致 UserProfile 原有属性被整体覆盖。\n","source":"about/index.md","raw":"title: \"About\"\nlayout: \"page\"\n---\n\n## 工作经历\n\n### 北京品冠天成科技有限公司\n\niOS 高级工程师（2016.08 - 至今）\n\n1. 负责日常的产品研发和维护工作 \n2. 负责对新技术的研究与应用\n3. 负责代码的重构和封装\n4. 定制项目的开发\n5. 微信小程序的开发 \n6. React Native 的开发 \n7. 自动化打包流程\n\n### 北京黑米世纪网络科技有限公司\n\niOS 高级工程师（2013.03 - 2016.08）\n\n1. Review 团队成员代码，提出指导意见\n2. 负责对进行架构设计、开发、性能分析和优化，分析和发现系统的优化点 \n3. 新技术的学习并推动团队成员的技术进步\n4. 为产品部门提供技术支持，提出产品的不足之处，帮助改进产品\n5. 重构代码，封装常用的工具和公司的基础业务\n6. 日常的研发编码工作\n7. 负责客户端团队的招聘工作\n\n\n## 做过比较蠢的事（这里会记录工作几年来干的特别愚蠢的事）\n\n1. 不小心在 Xcode 中把企业证书 Revoke 掉，导致之前发出去的包都无法使用，紧急把十几个包重新打包发布。\n2. 错误在在小程序里面修改 UserProfile 的时候使用了 PUT，导致 UserProfile 原有属性被整体覆盖。\n","date":"2018-08-02T07:16:12.115Z","updated":"2018-08-02T07:16:12.076Z","path":"about/index.html","comments":1,"_id":"cjo44p6uv0001arvbsva6zlzt","content":"<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><h3 id=\"北京品冠天成科技有限公司\"><a href=\"#北京品冠天成科技有限公司\" class=\"headerlink\" title=\"北京品冠天成科技有限公司\"></a>北京品冠天成科技有限公司</h3><p>iOS 高级工程师（2016.08 - 至今）</p>\n<ol>\n<li>负责日常的产品研发和维护工作 </li>\n<li>负责对新技术的研究与应用</li>\n<li>负责代码的重构和封装</li>\n<li>定制项目的开发</li>\n<li>微信小程序的开发 </li>\n<li>React Native 的开发 </li>\n<li>自动化打包流程</li>\n</ol>\n<h3 id=\"北京黑米世纪网络科技有限公司\"><a href=\"#北京黑米世纪网络科技有限公司\" class=\"headerlink\" title=\"北京黑米世纪网络科技有限公司\"></a>北京黑米世纪网络科技有限公司</h3><p>iOS 高级工程师（2013.03 - 2016.08）</p>\n<ol>\n<li>Review 团队成员代码，提出指导意见</li>\n<li>负责对进行架构设计、开发、性能分析和优化，分析和发现系统的优化点 </li>\n<li>新技术的学习并推动团队成员的技术进步</li>\n<li>为产品部门提供技术支持，提出产品的不足之处，帮助改进产品</li>\n<li>重构代码，封装常用的工具和公司的基础业务</li>\n<li>日常的研发编码工作</li>\n<li>负责客户端团队的招聘工作</li>\n</ol>\n<h2 id=\"做过比较蠢的事（这里会记录工作几年来干的特别愚蠢的事）\"><a href=\"#做过比较蠢的事（这里会记录工作几年来干的特别愚蠢的事）\" class=\"headerlink\" title=\"做过比较蠢的事（这里会记录工作几年来干的特别愚蠢的事）\"></a>做过比较蠢的事（这里会记录工作几年来干的特别愚蠢的事）</h2><ol>\n<li>不小心在 Xcode 中把企业证书 Revoke 掉，导致之前发出去的包都无法使用，紧急把十几个包重新打包发布。</li>\n<li>错误在在小程序里面修改 UserProfile 的时候使用了 PUT，导致 UserProfile 原有属性被整体覆盖。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><h3 id=\"北京品冠天成科技有限公司\"><a href=\"#北京品冠天成科技有限公司\" class=\"headerlink\" title=\"北京品冠天成科技有限公司\"></a>北京品冠天成科技有限公司</h3><p>iOS 高级工程师（2016.08 - 至今）</p>\n<ol>\n<li>负责日常的产品研发和维护工作 </li>\n<li>负责对新技术的研究与应用</li>\n<li>负责代码的重构和封装</li>\n<li>定制项目的开发</li>\n<li>微信小程序的开发 </li>\n<li>React Native 的开发 </li>\n<li>自动化打包流程</li>\n</ol>\n<h3 id=\"北京黑米世纪网络科技有限公司\"><a href=\"#北京黑米世纪网络科技有限公司\" class=\"headerlink\" title=\"北京黑米世纪网络科技有限公司\"></a>北京黑米世纪网络科技有限公司</h3><p>iOS 高级工程师（2013.03 - 2016.08）</p>\n<ol>\n<li>Review 团队成员代码，提出指导意见</li>\n<li>负责对进行架构设计、开发、性能分析和优化，分析和发现系统的优化点 </li>\n<li>新技术的学习并推动团队成员的技术进步</li>\n<li>为产品部门提供技术支持，提出产品的不足之处，帮助改进产品</li>\n<li>重构代码，封装常用的工具和公司的基础业务</li>\n<li>日常的研发编码工作</li>\n<li>负责客户端团队的招聘工作</li>\n</ol>\n<h2 id=\"做过比较蠢的事（这里会记录工作几年来干的特别愚蠢的事）\"><a href=\"#做过比较蠢的事（这里会记录工作几年来干的特别愚蠢的事）\" class=\"headerlink\" title=\"做过比较蠢的事（这里会记录工作几年来干的特别愚蠢的事）\"></a>做过比较蠢的事（这里会记录工作几年来干的特别愚蠢的事）</h2><ol>\n<li>不小心在 Xcode 中把企业证书 Revoke 掉，导致之前发出去的包都无法使用，紧急把十几个包重新打包发布。</li>\n<li>错误在在小程序里面修改 UserProfile 的时候使用了 PUT，导致 UserProfile 原有属性被整体覆盖。</li>\n</ol>\n"},{"title":"Categories","layout":"categories","_content":"","source":"categories/index.md","raw":"title: \"Categories\"\nlayout: \"categories\"\n---\n","date":"2018-05-18T06:40:42.193Z","updated":"2018-03-08T07:22:12.283Z","path":"categories/index.html","comments":1,"_id":"cjo44p6uy0003arvbx904d7l3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"title: \"Tags\"\nlayout: \"tags\"\n---\n","date":"2018-03-08T08:19:23.811Z","updated":"2018-03-08T07:22:12.283Z","path":"tags/index.html","comments":1,"_id":"cjo44p6v20007arvby5ryk9s4","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Raspberry PI 基本使用","date":"2018-03-05T22:04:56.000Z","author":"帕帕","thumbnail":"https://images.unsplash.com/photo-1507289872412-523fc6b2db5f?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=20ca9d0eba2016344894aec7bb453a2d&auto=format&fit=crop&w=160&q=100","_content":"\n\n## 1. 保证 Raspberry PI 能够在外网使用\n\n```sh\n// 在你的 Raspberry PI 上使用 autossh 来实现不掉线的反向代理：\nautossh -M 5678 -fNR 2018:localhost:22 root@54.219.12.213\n```\n\n```\n// 在你的外网服务器（比如上面例子中的：54.219.12.213）上可以使用 ssh 登录你的 Raspberry PI\nssh -p 2018 pi@127.0.0.1\n```\n\n","source":"_drafts/Raspberry-PI-基本使用.md","raw":"---\ntitle: Raspberry PI 基本使用\ndate: 2018-03-05 22:04:56 +0800\nauthor: 帕帕\ncategories: Raspberry PI\ntags: [Raspberry PI]\nthumbnail: https://images.unsplash.com/photo-1507289872412-523fc6b2db5f?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=20ca9d0eba2016344894aec7bb453a2d&auto=format&fit=crop&w=160&q=100\n---\n\n\n## 1. 保证 Raspberry PI 能够在外网使用\n\n```sh\n// 在你的 Raspberry PI 上使用 autossh 来实现不掉线的反向代理：\nautossh -M 5678 -fNR 2018:localhost:22 root@54.219.12.213\n```\n\n```\n// 在你的外网服务器（比如上面例子中的：54.219.12.213）上可以使用 ssh 登录你的 Raspberry PI\nssh -p 2018 pi@127.0.0.1\n```\n\n","slug":"Raspberry-PI-基本使用","published":0,"updated":"2018-03-23T08:45:00.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo44p6uq0000arvbax3fr8tr","content":"<h2 id=\"1-保证-Raspberry-PI-能够在外网使用\"><a href=\"#1-保证-Raspberry-PI-能够在外网使用\" class=\"headerlink\" title=\"1. 保证 Raspberry PI 能够在外网使用\"></a>1. 保证 Raspberry PI 能够在外网使用</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在你的 Raspberry PI 上使用 autossh 来实现不掉线的反向代理：</span><br><span class=\"line\">autossh -M 5678 -fNR 2018:localhost:22 root@54.219.12.213</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在你的外网服务器（比如上面例子中的：54.219.12.213）上可以使用 ssh 登录你的 Raspberry PI</span><br><span class=\"line\">ssh -p 2018 pi@127.0.0.1</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-保证-Raspberry-PI-能够在外网使用\"><a href=\"#1-保证-Raspberry-PI-能够在外网使用\" class=\"headerlink\" title=\"1. 保证 Raspberry PI 能够在外网使用\"></a>1. 保证 Raspberry PI 能够在外网使用</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在你的 Raspberry PI 上使用 autossh 来实现不掉线的反向代理：</span><br><span class=\"line\">autossh -M 5678 -fNR 2018:localhost:22 root@54.219.12.213</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在你的外网服务器（比如上面例子中的：54.219.12.213）上可以使用 ssh 登录你的 Raspberry PI</span><br><span class=\"line\">ssh -p 2018 pi@127.0.0.1</span><br></pre></td></tr></table></figure>\n"},{"title":"常用工具","author":"帕帕","thumbnail":"https://images.unsplash.com/photo-1514443031610-8c063c7a9822?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=73d9a7ce5ba0ed22cb91bdc0506ac9d0&auto=format&fit=crop&w=160&q=10","_content":"\n> 此文章暂未完成....\n\n# Ruby\n\n## 版本管理工具 - rvm\n\n* `$ rvm list` 列出已安装的 ruby 版本\n* `$ rvm list kn=own` 显示 local + remote 的 ruby 版本\n* `$ rvm use [ruby-version]` 可以使用 default 来改变系统环境下的 ruby 版本，或使用 system 来改变当前环境下的 ruby 版本\n* `$ rvm remove [ruby-version]` 删除 ruby 版本\n \n## 包管理工具 - gem\n\n* `$ gem install [gem-package]` 安装 gem 包\n* `$ gem update` 更新 gem 包\n* `$ gem update --system` 更新 gem 本身\n* `$ gem install [gem-package]` 安装 gem 包\n* `$ gem list` 列出所有安装的 gem 包\n* `$ gem remove [gem-package]` 删除安装过的 gem 包\n\n\n## 常用工具\n\n### cocoapods\n\n* `$ gem instal cocoapods` 安装 cocoapods\n* `$ pod setup` 初始化 Pod 库\n* `$ pod repo update` 更新 Pod 库\n* `$ pod install` 根据当前目录的 Podfile 文件安装 Pod 库\n* `$ pod update` 更新 Podfile 文件中的 Pod 库\n\n# Python\n\n## 版本管理工具 - pyenv\n\n\n# JavaScript\n\n\n## 包管理工具 - npm\n\n\n# 包管理工具 - brew\n\n* `brew update` 更新 pythpackage\n* `brew cleanup` 移除旧版本\n* `brew cleanup -n` 查看可以清理的旧版本\n* `brew list` 列出已安装的 package\n\n\n","source":"_drafts/常用工具.md","raw":"---\ntitle: 常用工具\nauthor: 帕帕\ncategories: 技术\ntags: [其他]\nthumbnail: https://images.unsplash.com/photo-1514443031610-8c063c7a9822?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=73d9a7ce5ba0ed22cb91bdc0506ac9d0&auto=format&fit=crop&w=160&q=10\n---\n\n> 此文章暂未完成....\n\n# Ruby\n\n## 版本管理工具 - rvm\n\n* `$ rvm list` 列出已安装的 ruby 版本\n* `$ rvm list kn=own` 显示 local + remote 的 ruby 版本\n* `$ rvm use [ruby-version]` 可以使用 default 来改变系统环境下的 ruby 版本，或使用 system 来改变当前环境下的 ruby 版本\n* `$ rvm remove [ruby-version]` 删除 ruby 版本\n \n## 包管理工具 - gem\n\n* `$ gem install [gem-package]` 安装 gem 包\n* `$ gem update` 更新 gem 包\n* `$ gem update --system` 更新 gem 本身\n* `$ gem install [gem-package]` 安装 gem 包\n* `$ gem list` 列出所有安装的 gem 包\n* `$ gem remove [gem-package]` 删除安装过的 gem 包\n\n\n## 常用工具\n\n### cocoapods\n\n* `$ gem instal cocoapods` 安装 cocoapods\n* `$ pod setup` 初始化 Pod 库\n* `$ pod repo update` 更新 Pod 库\n* `$ pod install` 根据当前目录的 Podfile 文件安装 Pod 库\n* `$ pod update` 更新 Podfile 文件中的 Pod 库\n\n# Python\n\n## 版本管理工具 - pyenv\n\n\n# JavaScript\n\n\n## 包管理工具 - npm\n\n\n# 包管理工具 - brew\n\n* `brew update` 更新 pythpackage\n* `brew cleanup` 移除旧版本\n* `brew cleanup -n` 查看可以清理的旧版本\n* `brew list` 列出已安装的 package\n\n\n","slug":"常用工具","published":0,"date":"2018-04-09T02:53:18.333Z","updated":"2018-09-26T08:52:31.439Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo44p6uw0002arvbcmlngzmg","content":"<blockquote>\n<p>此文章暂未完成….</p>\n</blockquote>\n<h1 id=\"Ruby\"><a href=\"#Ruby\" class=\"headerlink\" title=\"Ruby\"></a>Ruby</h1><h2 id=\"版本管理工具-rvm\"><a href=\"#版本管理工具-rvm\" class=\"headerlink\" title=\"版本管理工具 - rvm\"></a>版本管理工具 - rvm</h2><ul>\n<li><code>$ rvm list</code> 列出已安装的 ruby 版本</li>\n<li><code>$ rvm list kn=own</code> 显示 local + remote 的 ruby 版本</li>\n<li><code>$ rvm use [ruby-version]</code> 可以使用 default 来改变系统环境下的 ruby 版本，或使用 system 来改变当前环境下的 ruby 版本</li>\n<li><code>$ rvm remove [ruby-version]</code> 删除 ruby 版本</li>\n</ul>\n<h2 id=\"包管理工具-gem\"><a href=\"#包管理工具-gem\" class=\"headerlink\" title=\"包管理工具 - gem\"></a>包管理工具 - gem</h2><ul>\n<li><code>$ gem install [gem-package]</code> 安装 gem 包</li>\n<li><code>$ gem update</code> 更新 gem 包</li>\n<li><code>$ gem update --system</code> 更新 gem 本身</li>\n<li><code>$ gem install [gem-package]</code> 安装 gem 包</li>\n<li><code>$ gem list</code> 列出所有安装的 gem 包</li>\n<li><code>$ gem remove [gem-package]</code> 删除安装过的 gem 包</li>\n</ul>\n<h2 id=\"常用工具\"><a href=\"#常用工具\" class=\"headerlink\" title=\"常用工具\"></a>常用工具</h2><h3 id=\"cocoapods\"><a href=\"#cocoapods\" class=\"headerlink\" title=\"cocoapods\"></a>cocoapods</h3><ul>\n<li><code>$ gem instal cocoapods</code> 安装 cocoapods</li>\n<li><code>$ pod setup</code> 初始化 Pod 库</li>\n<li><code>$ pod repo update</code> 更新 Pod 库</li>\n<li><code>$ pod install</code> 根据当前目录的 Podfile 文件安装 Pod 库</li>\n<li><code>$ pod update</code> 更新 Podfile 文件中的 Pod 库</li>\n</ul>\n<h1 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h1><h2 id=\"版本管理工具-pyenv\"><a href=\"#版本管理工具-pyenv\" class=\"headerlink\" title=\"版本管理工具 - pyenv\"></a>版本管理工具 - pyenv</h2><h1 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h1><h2 id=\"包管理工具-npm\"><a href=\"#包管理工具-npm\" class=\"headerlink\" title=\"包管理工具 - npm\"></a>包管理工具 - npm</h2><h1 id=\"包管理工具-brew\"><a href=\"#包管理工具-brew\" class=\"headerlink\" title=\"包管理工具 - brew\"></a>包管理工具 - brew</h1><ul>\n<li><code>brew update</code> 更新 pythpackage</li>\n<li><code>brew cleanup</code> 移除旧版本</li>\n<li><code>brew cleanup -n</code> 查看可以清理的旧版本</li>\n<li><code>brew list</code> 列出已安装的 package</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>此文章暂未完成….</p>\n</blockquote>\n<h1 id=\"Ruby\"><a href=\"#Ruby\" class=\"headerlink\" title=\"Ruby\"></a>Ruby</h1><h2 id=\"版本管理工具-rvm\"><a href=\"#版本管理工具-rvm\" class=\"headerlink\" title=\"版本管理工具 - rvm\"></a>版本管理工具 - rvm</h2><ul>\n<li><code>$ rvm list</code> 列出已安装的 ruby 版本</li>\n<li><code>$ rvm list kn=own</code> 显示 local + remote 的 ruby 版本</li>\n<li><code>$ rvm use [ruby-version]</code> 可以使用 default 来改变系统环境下的 ruby 版本，或使用 system 来改变当前环境下的 ruby 版本</li>\n<li><code>$ rvm remove [ruby-version]</code> 删除 ruby 版本</li>\n</ul>\n<h2 id=\"包管理工具-gem\"><a href=\"#包管理工具-gem\" class=\"headerlink\" title=\"包管理工具 - gem\"></a>包管理工具 - gem</h2><ul>\n<li><code>$ gem install [gem-package]</code> 安装 gem 包</li>\n<li><code>$ gem update</code> 更新 gem 包</li>\n<li><code>$ gem update --system</code> 更新 gem 本身</li>\n<li><code>$ gem install [gem-package]</code> 安装 gem 包</li>\n<li><code>$ gem list</code> 列出所有安装的 gem 包</li>\n<li><code>$ gem remove [gem-package]</code> 删除安装过的 gem 包</li>\n</ul>\n<h2 id=\"常用工具\"><a href=\"#常用工具\" class=\"headerlink\" title=\"常用工具\"></a>常用工具</h2><h3 id=\"cocoapods\"><a href=\"#cocoapods\" class=\"headerlink\" title=\"cocoapods\"></a>cocoapods</h3><ul>\n<li><code>$ gem instal cocoapods</code> 安装 cocoapods</li>\n<li><code>$ pod setup</code> 初始化 Pod 库</li>\n<li><code>$ pod repo update</code> 更新 Pod 库</li>\n<li><code>$ pod install</code> 根据当前目录的 Podfile 文件安装 Pod 库</li>\n<li><code>$ pod update</code> 更新 Podfile 文件中的 Pod 库</li>\n</ul>\n<h1 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h1><h2 id=\"版本管理工具-pyenv\"><a href=\"#版本管理工具-pyenv\" class=\"headerlink\" title=\"版本管理工具 - pyenv\"></a>版本管理工具 - pyenv</h2><h1 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h1><h2 id=\"包管理工具-npm\"><a href=\"#包管理工具-npm\" class=\"headerlink\" title=\"包管理工具 - npm\"></a>包管理工具 - npm</h2><h1 id=\"包管理工具-brew\"><a href=\"#包管理工具-brew\" class=\"headerlink\" title=\"包管理工具 - brew\"></a>包管理工具 - brew</h1><ul>\n<li><code>brew update</code> 更新 pythpackage</li>\n<li><code>brew cleanup</code> 移除旧版本</li>\n<li><code>brew cleanup -n</code> 查看可以清理的旧版本</li>\n<li><code>brew list</code> 列出已安装的 package</li>\n</ul>\n"},{"title":"字典的存储结构","date":"2018-08-02T15:41:10.000Z","author":"帕帕","thumbnail":"https://images.unsplash.com/photo-1517077304055-6e89abbf09b0?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=3f799bed83db2959c476e69a3307d39e&auto=format&fit=crop&w=160&q=100","_content":"\n在 Swift 中我们会这样来构造一个字典：\n```Swift\nlet dic = [\"cat\": \"vCat\", \"art\": \"vArt\", \"dog\": \"vDog\", \"rat\": \"vRat\"]\n```\n那如果让你来设计字典的存储结构，你会怎么设计呢？\n\n![](https://i.imgur.com/tmhQb4z.jpg)\n\n从图中可以看出，字典的存储结构其实也是一个数组（注意：数组里的每个元素也都是一个数组）。接下来，我们尝试用 Swift 来构造字典的存储和操作。\n\n## \n\n\n\n\n---\n\n**参考文献**\n\n1. https://adrianmejia.com/blog/2018/04/28/data-structures-time-complexity-for-beginners-arrays-hashmaps-linked-lists-stacks-queues-tutorial/#HashMaps\n\n","source":"_drafts/字典的存储结构.md","raw":"---\ntitle: 字典的存储结构\ndate: 2018-08-02 15:41:10 +0800\nauthor: 帕帕\ncategories: 技术\ntags: [iOS, Swift]\nthumbnail: https://images.unsplash.com/photo-1517077304055-6e89abbf09b0?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=3f799bed83db2959c476e69a3307d39e&auto=format&fit=crop&w=160&q=100\n---\n\n在 Swift 中我们会这样来构造一个字典：\n```Swift\nlet dic = [\"cat\": \"vCat\", \"art\": \"vArt\", \"dog\": \"vDog\", \"rat\": \"vRat\"]\n```\n那如果让你来设计字典的存储结构，你会怎么设计呢？\n\n![](https://i.imgur.com/tmhQb4z.jpg)\n\n从图中可以看出，字典的存储结构其实也是一个数组（注意：数组里的每个元素也都是一个数组）。接下来，我们尝试用 Swift 来构造字典的存储和操作。\n\n## \n\n\n\n\n---\n\n**参考文献**\n\n1. https://adrianmejia.com/blog/2018/04/28/data-structures-time-complexity-for-beginners-arrays-hashmaps-linked-lists-stacks-queues-tutorial/#HashMaps\n\n","slug":"字典的存储结构","published":0,"updated":"2018-08-27T06:10:52.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo44p6v10006arvbq2oudifn","content":"<p>在 Swift 中我们会这样来构造一个字典：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dic = [<span class=\"string\">\"cat\"</span>: <span class=\"string\">\"vCat\"</span>, <span class=\"string\">\"art\"</span>: <span class=\"string\">\"vArt\"</span>, <span class=\"string\">\"dog\"</span>: <span class=\"string\">\"vDog\"</span>, <span class=\"string\">\"rat\"</span>: <span class=\"string\">\"vRat\"</span>]</span><br></pre></td></tr></table></figure></p>\n<p>那如果让你来设计字典的存储结构，你会怎么设计呢？</p>\n<p><img src=\"https://i.imgur.com/tmhQb4z.jpg\" alt=\"\"></p>\n<p>从图中可以看出，字典的存储结构其实也是一个数组（注意：数组里的每个元素也都是一个数组）。接下来，我们尝试用 Swift 来构造字典的存储和操作。</p>\n<p>## </p>\n<hr>\n<p><strong>参考文献</strong></p>\n<ol>\n<li><a href=\"https://adrianmejia.com/blog/2018/04/28/data-structures-time-complexity-for-beginners-arrays-hashmaps-linked-lists-stacks-queues-tutorial/#HashMaps\" target=\"_blank\" rel=\"noopener\">https://adrianmejia.com/blog/2018/04/28/data-structures-time-complexity-for-beginners-arrays-hashmaps-linked-lists-stacks-queues-tutorial/#HashMaps</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>在 Swift 中我们会这样来构造一个字典：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dic = [<span class=\"string\">\"cat\"</span>: <span class=\"string\">\"vCat\"</span>, <span class=\"string\">\"art\"</span>: <span class=\"string\">\"vArt\"</span>, <span class=\"string\">\"dog\"</span>: <span class=\"string\">\"vDog\"</span>, <span class=\"string\">\"rat\"</span>: <span class=\"string\">\"vRat\"</span>]</span><br></pre></td></tr></table></figure></p>\n<p>那如果让你来设计字典的存储结构，你会怎么设计呢？</p>\n<p><img src=\"https://i.imgur.com/tmhQb4z.jpg\" alt=\"\"></p>\n<p>从图中可以看出，字典的存储结构其实也是一个数组（注意：数组里的每个元素也都是一个数组）。接下来，我们尝试用 Swift 来构造字典的存储和操作。</p>\n<p>## </p>\n<hr>\n<p><strong>参考文献</strong></p>\n<ol>\n<li><a href=\"https://adrianmejia.com/blog/2018/04/28/data-structures-time-complexity-for-beginners-arrays-hashmaps-linked-lists-stacks-queues-tutorial/#HashMaps\" target=\"_blank\" rel=\"noopener\">https://adrianmejia.com/blog/2018/04/28/data-structures-time-complexity-for-beginners-arrays-hashmaps-linked-lists-stacks-queues-tutorial/#HashMaps</a></li>\n</ol>\n"},{"layout":"post","title":"RAC 和内存管理","author":"帕帕","date":"2017-09-05T15:30:56.000Z","thumbnail":"https://images.unsplash.com/photo-1517077304055-6e89abbf09b0?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=3f799bed83db2959c476e69a3307d39e&auto=format&fit=crop&w=160&q=100","_content":"\n最近在用 RAC 的时候发现自己对内存管理还是有些困惑，于是自己写了一些代码来验证自己的一些理解。\n在一开始接触 RAC 的时候，我们知道 RAC 对于 block 都是 copy 赋值的。\n\n```Swift\n@implementation RACSignal\n\n#pragma mark Lifecycle\n\n+ (RACSignal *)createSignal:(RACDisposable * (^)(id<RACSubscriber> subscriber))didSubscribe {\n    return [RACDynamicSignal createSignal:didSubscribe];\n}\n```\n\n```Swift\n@implementation RACDynamicSignal\n\n#pragma mark Lifecycle\n\n+ (RACSignal *)createSignal:(RACDisposable * (^)(id<RACSubscriber> subscriber))didSubscribe {\n    RACDynamicSignal *signal = [[self alloc] init];\n    signal->_didSubscribe = [didSubscribe copy];\n    return [signal setNameWithFormat:@\"+createSignal:\"];\n}\n```\n\n在创建 RACSingal 的时候会调用其子类 RACDynamicSignal 去创建，我们也看到 RACDynamicSignal 对 didSuscribe 这个 block 是进行了 copy。所以大家可能会被要求注意循环引用的问题，于是大家都用 @weakify(target) 和 @strongify(target) 来避免循环引用的问题。那是不是所有用到 RAC 的地方都需要使用这些宏来避免循环引用的问题，不尽然。比如下面这个：\n\n```Swift\n// 场景1\n[RACObserve(self, title) subscribeNext:^(id x) {\n    NSLog(@\"%@\", x);\n}];\n```\n\n接下来，我们来对比以下的几种用法：\n\n```Swift\n@interface ViewController()\n@property (strong, nonatomic) ViewModel * viewModel;\n@end\n\n@implementation ViewController\n\n- (void)viewDidiLoad {\n    [super viewDidLoad];\n\n    self.viewModel = [ViewModel new];\n\n    // 场景2\n    dispatch_async(dispatch_get_main_queue(), ^{\n        self.title = @\"你好\";\n    });\n\n    // 场景3\n    [self.viewModel.titleSignal subscribeNext:^(NSString * title) {\n        self.title = title;\n    }];\n\n    // 场景4\n    [RACObserve(self.viewModel, title) subscribeNext:^(NSString * title)     {\n        self.title = title;\n    }]; \n}\n\n@end\n```\n\n场景2是我们平常都会用到的，而且我们也没有在这种场景下去考虑循环引用的问题，这是因为 dispatch 的 block 不是属于 self 的（至于这个 block 是属于谁的，回头我再查点资料或者请各位指教），所以即使你在 block 使用了 self 也不会有循环应用的问题。\n\n场景3很明显是有循环引用的问题：**self->viewModel->titleSignal->block->self**，这个时候如果我们不做处理的话，那么 self 就永远不会被释放。正确的做法应该是使用 @weakify(self) 和 @strongify(self)：\n\n```Swift\n// 场景3\n@weakify(self);\n[self.viewModel.titleSignal subscribeNext:^(NSString * title) {\n    @strongify(self);\n    self.title = title;\n}];\n```\n\n场景4在我们看来是没有问题的，因为这里看起来只有 **singal->block->self** 的引用，它们之间并没有造成循环引用的问题。我们先来看看 RACObserve 的实现：\n\n```Swift\n#define RACObserve(TARGET, KEYPATH) \\\n({ \\\n_Pragma(\"clang diagnostic push\") \\\n_Pragma(\"clang diagnostic ignored \\\"-Wreceiver-is-weak\\\"\") \\\n__weak id target_ = (TARGET); \\\n[target_ rac_valuesForKeyPath:@keypath(TARGET, KEYPATH) observer:self]; \\\n_Pragma(\"clang diagnostic pop\") \\\n})\n\n- (RACSignal *)rac_valuesForKeyPath:(NSString *)keyPath observer:(__weak NSObject *)observer;\n```\n\n其实，看到这里你会认为这里只是调用了一个方法创建了一个 Signal，而且这个 Signal 也并不属于任何对象。我们再来看看具体的实现是怎么样的？\n\n```Swift\n- (RACSignal *)rac_valuesAndChangesForKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options observer:(__weak NSObject *)weakObserver {\n    NSObject *strongObserver = weakObserver;\n    keyPath = [keyPath copy];\n\n    NSRecursiveLock *objectLock = [[NSRecursiveLock alloc] init];\n    objectLock.name = @\"org.reactivecocoa.ReactiveCocoa.NSObjectRACPropertySubscribing\";\n\n    __weak NSObject *weakSelf = self;\n\n    RACSignal *deallocSignal = [[RACSignal zip:@[\n                            self.rac_willDeallocSignal,\n                            strongObserver.rac_willDeallocSignal ?: [RACSignal never]\n    ]] doCompleted:^{\n        // Forces deallocation to wait if the object variables are currently\n        // being read on another thread.\n        [objectLock lock];\n        @onExit {\n            [objectLock unlock];\n        };\n    }];\n\n    return [[[RACSignal createSignal:^ RACDisposable * (id<RACSubscriber> subscriber) {\n        // Hold onto the lock the whole time we're setting up the KVO\n        // observation, because any resurrection that might be caused by our\n        // retaining below must be balanced out by the time -dealloc returns\n        // (if another thread is waiting on the lock above).\n        [objectLock lock];\n        @onExit {\n            [objectLock unlock];\n        };\n    \n        __strong NSObject *observer __attribute__((objc_precise_lifetime)) = weakObserver;\n        __strong NSObject *self __attribute__((objc_precise_lifetime)) = weakSelf;\n    \n        if (self == nil) {\n            [subscriber sendCompleted];\n            return nil;\n        }\n    \n        return [self rac_observeKeyPath:keyPath options:options observer:observer block:^(id value, NSDictionary *change, BOOL causedByDealloc, BOOL affectedOnlyLastComponent) {\n                [subscriber sendNext:RACTuplePack(value, change)];\n        }];\n    }] takeUntil:deallocSignal] setNameWithFormat:@\"%@ -rac_valueAndChangesForKeyPath: %@ options: %lu observer: %@\", self.rac_description, keyPath, (unsigned long)options, strongObserver.rac_description];\n}\n```\n\n重点观察 **deallocSignal** 和 **[signal takeUntile:deallocSignal]**，我们把 deallocSignal 单独拿出来看看：\n\n```Swift\nRACSignal *deallocSignal = [[RACSignal zip:@[\n                        self.rac_willDeallocSignal,\n                        strongObserver.rac_willDeallocSignal ?: [RACSignal never]\n                        ]] doCompleted:^{\n    // Forces deallocation to wait if the object variables are currently\n    // being read on another thread.\n    [objectLock lock];\n    @onExit {\n    [objectLock unlock];\n    };\n}];\n```\n\n这里的 deallocSignal 是只有在 self 和 strongObserve 都将要发生 dealloc 的时候才会触发的。即用 RACObserve 创建的信号只有在其 target 和 observe 都发生 dealloc 的时候才会被 disposable (这个好像是 RAC 用来销毁自己资源的东西)。不明白的童鞋，我们回头来分析一下场景4的代码：\n\n```Swift\n// 场景4\n[RACObserve(self.viewModel, title) subscribeNext:^(NSString * title) {\n    self.title = title;\n}];\n```\n\n用 RACObserve 创建的信号看起来只要出了函数体其资源应该就会被回收，但是这个信号其实是只有在 self.viewModel.rac_willDeallocSignal 和 self.rac_willDeallocSignal 都发生的情况下才会被释放。所以场景4的引用关系看起来只有 signal->block->self，但是这个 signal 只有在 self.rac_willDeallocSignal 的时候才会被释放。所以这里如果不打断这种关系的话就会造成循环引用的问题，正确做法应该是：\n\n```Swift\n// 场景4\n@weakify(self);\n[RACObserve(self.viewModel, title) subscribeNext:^(NSString * title) {\n    @strongify(self);\n    self.title = title;\n}];\n```\n\n最后，在说一个特别需要注意的，就是 UITableViewCell 和 UICollectionViewCell 复用和 RAC 的问题。\n\n```Swift\n- (NSInteger)tableView:(nonnull UITableView *)tableView numberOfRowsInSection:(NSInteger)section {\n    return 1000;\n}\n\n- (UITableViewCell *)tableView:(nonnull UITableView *)tableView cellForRowAtIndexPath:(nonnull NSIndexPath *)indexPath {\n    UITableViewCell * cell = [tableView dequeueReusableCellWithIdentifier:@\"TableViewCell\"];\n\n    @weakify(self);\n    [RACObserve(cell.textLabel, text) subscribeNext:^(id x) {\n        @strongify(self);\n        NSLog(@\"%@\", self);\n    }];\n\n    return cell;\n}\n```\n\n我们看到这里的 RACObserve 创建的 Signal 和 self 之间已经去掉了循环引用的问题，所以应该是没有什么问题的。但是结合之前我们对 RACObserve 的理解再仔细分析一下，这里的 Signal 只要 self 没有被 dealloc 的话就不会被释放。虽然每次 UITableViewCell 都会被重用，但是每次重用过程中创建的信号确实无法被 disposable。那我们该怎么做呢？\n\n```Swift\n- (NSInteger)tableView:(nonnull UITableView *)tableView numberOfRowsInSection:(NSInteger)section {\n    return 1000;\n}\n\n- (UITableViewCell *)tableView:(nonnull UITableView *)tableView cellForRowAtIndexPath:(nonnull NSIndexPath *)indexPath {\n    UITableViewCell * cell = [tableView dequeueReusableCellWithIdentifier:@\"TableViewCell\"];\n\n    @weakify(self);\n    [[RACObserve(cell.textLabel, text) takeUntil:cell.rac_prepareForReuseSignal] subscribeNext:^(id x) {\n        @strongify(self);\n        NSLog(@\"%@\", self);\n    }];\n\n    return cell;\n}\n```\n\n注意，我们在cell里面创建的信号加上 takeUntil:cell.rac_prepareForReuseSignal，这个是让 cell 在每次重用的时候都去 disposable 创建的信号。\n\n以上所说的关于内存的东西我都用 Instrument 的 Allocations 验证过了，但是依旧建议大家自己也去试试。\n\n\n","source":"_posts/RAC和内存管理.md","raw":"---\nlayout: post \ntitle: RAC 和内存管理\nauthor: 帕帕\ndate: 2017-09-05 15:30:56 +0800\ncategories: 技术\ntags: [iOS, RAC]\nthumbnail: https://images.unsplash.com/photo-1517077304055-6e89abbf09b0?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=3f799bed83db2959c476e69a3307d39e&auto=format&fit=crop&w=160&q=100\n---\n\n最近在用 RAC 的时候发现自己对内存管理还是有些困惑，于是自己写了一些代码来验证自己的一些理解。\n在一开始接触 RAC 的时候，我们知道 RAC 对于 block 都是 copy 赋值的。\n\n```Swift\n@implementation RACSignal\n\n#pragma mark Lifecycle\n\n+ (RACSignal *)createSignal:(RACDisposable * (^)(id<RACSubscriber> subscriber))didSubscribe {\n    return [RACDynamicSignal createSignal:didSubscribe];\n}\n```\n\n```Swift\n@implementation RACDynamicSignal\n\n#pragma mark Lifecycle\n\n+ (RACSignal *)createSignal:(RACDisposable * (^)(id<RACSubscriber> subscriber))didSubscribe {\n    RACDynamicSignal *signal = [[self alloc] init];\n    signal->_didSubscribe = [didSubscribe copy];\n    return [signal setNameWithFormat:@\"+createSignal:\"];\n}\n```\n\n在创建 RACSingal 的时候会调用其子类 RACDynamicSignal 去创建，我们也看到 RACDynamicSignal 对 didSuscribe 这个 block 是进行了 copy。所以大家可能会被要求注意循环引用的问题，于是大家都用 @weakify(target) 和 @strongify(target) 来避免循环引用的问题。那是不是所有用到 RAC 的地方都需要使用这些宏来避免循环引用的问题，不尽然。比如下面这个：\n\n```Swift\n// 场景1\n[RACObserve(self, title) subscribeNext:^(id x) {\n    NSLog(@\"%@\", x);\n}];\n```\n\n接下来，我们来对比以下的几种用法：\n\n```Swift\n@interface ViewController()\n@property (strong, nonatomic) ViewModel * viewModel;\n@end\n\n@implementation ViewController\n\n- (void)viewDidiLoad {\n    [super viewDidLoad];\n\n    self.viewModel = [ViewModel new];\n\n    // 场景2\n    dispatch_async(dispatch_get_main_queue(), ^{\n        self.title = @\"你好\";\n    });\n\n    // 场景3\n    [self.viewModel.titleSignal subscribeNext:^(NSString * title) {\n        self.title = title;\n    }];\n\n    // 场景4\n    [RACObserve(self.viewModel, title) subscribeNext:^(NSString * title)     {\n        self.title = title;\n    }]; \n}\n\n@end\n```\n\n场景2是我们平常都会用到的，而且我们也没有在这种场景下去考虑循环引用的问题，这是因为 dispatch 的 block 不是属于 self 的（至于这个 block 是属于谁的，回头我再查点资料或者请各位指教），所以即使你在 block 使用了 self 也不会有循环应用的问题。\n\n场景3很明显是有循环引用的问题：**self->viewModel->titleSignal->block->self**，这个时候如果我们不做处理的话，那么 self 就永远不会被释放。正确的做法应该是使用 @weakify(self) 和 @strongify(self)：\n\n```Swift\n// 场景3\n@weakify(self);\n[self.viewModel.titleSignal subscribeNext:^(NSString * title) {\n    @strongify(self);\n    self.title = title;\n}];\n```\n\n场景4在我们看来是没有问题的，因为这里看起来只有 **singal->block->self** 的引用，它们之间并没有造成循环引用的问题。我们先来看看 RACObserve 的实现：\n\n```Swift\n#define RACObserve(TARGET, KEYPATH) \\\n({ \\\n_Pragma(\"clang diagnostic push\") \\\n_Pragma(\"clang diagnostic ignored \\\"-Wreceiver-is-weak\\\"\") \\\n__weak id target_ = (TARGET); \\\n[target_ rac_valuesForKeyPath:@keypath(TARGET, KEYPATH) observer:self]; \\\n_Pragma(\"clang diagnostic pop\") \\\n})\n\n- (RACSignal *)rac_valuesForKeyPath:(NSString *)keyPath observer:(__weak NSObject *)observer;\n```\n\n其实，看到这里你会认为这里只是调用了一个方法创建了一个 Signal，而且这个 Signal 也并不属于任何对象。我们再来看看具体的实现是怎么样的？\n\n```Swift\n- (RACSignal *)rac_valuesAndChangesForKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options observer:(__weak NSObject *)weakObserver {\n    NSObject *strongObserver = weakObserver;\n    keyPath = [keyPath copy];\n\n    NSRecursiveLock *objectLock = [[NSRecursiveLock alloc] init];\n    objectLock.name = @\"org.reactivecocoa.ReactiveCocoa.NSObjectRACPropertySubscribing\";\n\n    __weak NSObject *weakSelf = self;\n\n    RACSignal *deallocSignal = [[RACSignal zip:@[\n                            self.rac_willDeallocSignal,\n                            strongObserver.rac_willDeallocSignal ?: [RACSignal never]\n    ]] doCompleted:^{\n        // Forces deallocation to wait if the object variables are currently\n        // being read on another thread.\n        [objectLock lock];\n        @onExit {\n            [objectLock unlock];\n        };\n    }];\n\n    return [[[RACSignal createSignal:^ RACDisposable * (id<RACSubscriber> subscriber) {\n        // Hold onto the lock the whole time we're setting up the KVO\n        // observation, because any resurrection that might be caused by our\n        // retaining below must be balanced out by the time -dealloc returns\n        // (if another thread is waiting on the lock above).\n        [objectLock lock];\n        @onExit {\n            [objectLock unlock];\n        };\n    \n        __strong NSObject *observer __attribute__((objc_precise_lifetime)) = weakObserver;\n        __strong NSObject *self __attribute__((objc_precise_lifetime)) = weakSelf;\n    \n        if (self == nil) {\n            [subscriber sendCompleted];\n            return nil;\n        }\n    \n        return [self rac_observeKeyPath:keyPath options:options observer:observer block:^(id value, NSDictionary *change, BOOL causedByDealloc, BOOL affectedOnlyLastComponent) {\n                [subscriber sendNext:RACTuplePack(value, change)];\n        }];\n    }] takeUntil:deallocSignal] setNameWithFormat:@\"%@ -rac_valueAndChangesForKeyPath: %@ options: %lu observer: %@\", self.rac_description, keyPath, (unsigned long)options, strongObserver.rac_description];\n}\n```\n\n重点观察 **deallocSignal** 和 **[signal takeUntile:deallocSignal]**，我们把 deallocSignal 单独拿出来看看：\n\n```Swift\nRACSignal *deallocSignal = [[RACSignal zip:@[\n                        self.rac_willDeallocSignal,\n                        strongObserver.rac_willDeallocSignal ?: [RACSignal never]\n                        ]] doCompleted:^{\n    // Forces deallocation to wait if the object variables are currently\n    // being read on another thread.\n    [objectLock lock];\n    @onExit {\n    [objectLock unlock];\n    };\n}];\n```\n\n这里的 deallocSignal 是只有在 self 和 strongObserve 都将要发生 dealloc 的时候才会触发的。即用 RACObserve 创建的信号只有在其 target 和 observe 都发生 dealloc 的时候才会被 disposable (这个好像是 RAC 用来销毁自己资源的东西)。不明白的童鞋，我们回头来分析一下场景4的代码：\n\n```Swift\n// 场景4\n[RACObserve(self.viewModel, title) subscribeNext:^(NSString * title) {\n    self.title = title;\n}];\n```\n\n用 RACObserve 创建的信号看起来只要出了函数体其资源应该就会被回收，但是这个信号其实是只有在 self.viewModel.rac_willDeallocSignal 和 self.rac_willDeallocSignal 都发生的情况下才会被释放。所以场景4的引用关系看起来只有 signal->block->self，但是这个 signal 只有在 self.rac_willDeallocSignal 的时候才会被释放。所以这里如果不打断这种关系的话就会造成循环引用的问题，正确做法应该是：\n\n```Swift\n// 场景4\n@weakify(self);\n[RACObserve(self.viewModel, title) subscribeNext:^(NSString * title) {\n    @strongify(self);\n    self.title = title;\n}];\n```\n\n最后，在说一个特别需要注意的，就是 UITableViewCell 和 UICollectionViewCell 复用和 RAC 的问题。\n\n```Swift\n- (NSInteger)tableView:(nonnull UITableView *)tableView numberOfRowsInSection:(NSInteger)section {\n    return 1000;\n}\n\n- (UITableViewCell *)tableView:(nonnull UITableView *)tableView cellForRowAtIndexPath:(nonnull NSIndexPath *)indexPath {\n    UITableViewCell * cell = [tableView dequeueReusableCellWithIdentifier:@\"TableViewCell\"];\n\n    @weakify(self);\n    [RACObserve(cell.textLabel, text) subscribeNext:^(id x) {\n        @strongify(self);\n        NSLog(@\"%@\", self);\n    }];\n\n    return cell;\n}\n```\n\n我们看到这里的 RACObserve 创建的 Signal 和 self 之间已经去掉了循环引用的问题，所以应该是没有什么问题的。但是结合之前我们对 RACObserve 的理解再仔细分析一下，这里的 Signal 只要 self 没有被 dealloc 的话就不会被释放。虽然每次 UITableViewCell 都会被重用，但是每次重用过程中创建的信号确实无法被 disposable。那我们该怎么做呢？\n\n```Swift\n- (NSInteger)tableView:(nonnull UITableView *)tableView numberOfRowsInSection:(NSInteger)section {\n    return 1000;\n}\n\n- (UITableViewCell *)tableView:(nonnull UITableView *)tableView cellForRowAtIndexPath:(nonnull NSIndexPath *)indexPath {\n    UITableViewCell * cell = [tableView dequeueReusableCellWithIdentifier:@\"TableViewCell\"];\n\n    @weakify(self);\n    [[RACObserve(cell.textLabel, text) takeUntil:cell.rac_prepareForReuseSignal] subscribeNext:^(id x) {\n        @strongify(self);\n        NSLog(@\"%@\", self);\n    }];\n\n    return cell;\n}\n```\n\n注意，我们在cell里面创建的信号加上 takeUntil:cell.rac_prepareForReuseSignal，这个是让 cell 在每次重用的时候都去 disposable 创建的信号。\n\n以上所说的关于内存的东西我都用 Instrument 的 Allocations 验证过了，但是依旧建议大家自己也去试试。\n\n\n","slug":"RAC和内存管理","published":1,"updated":"2018-11-05T09:52:50.557Z","comments":1,"photos":[],"link":"","_id":"cjo44p6v30008arvb396b85ob","content":"<p>最近在用 RAC 的时候发现自己对内存管理还是有些困惑，于是自己写了一些代码来验证自己的一些理解。<br>在一开始接触 RAC 的时候，我们知道 RAC 对于 block 都是 copy 赋值的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@implementation <span class=\"type\">RACSignal</span></span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark <span class=\"type\">Lifecycle</span></span><br><span class=\"line\"></span><br><span class=\"line\">+ (<span class=\"type\">RACSignal</span> *)createSignal:(<span class=\"type\">RACDisposable</span> * (^)(id&lt;<span class=\"type\">RACSubscriber</span>&gt; subscriber))didSubscribe &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"type\">RACDynamicSignal</span> createSignal:didSubscribe];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@implementation <span class=\"type\">RACDynamicSignal</span></span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark <span class=\"type\">Lifecycle</span></span><br><span class=\"line\"></span><br><span class=\"line\">+ (<span class=\"type\">RACSignal</span> *)createSignal:(<span class=\"type\">RACDisposable</span> * (^)(id&lt;<span class=\"type\">RACSubscriber</span>&gt; subscriber))didSubscribe &#123;</span><br><span class=\"line\">    <span class=\"type\">RACDynamicSignal</span> *signal = [[<span class=\"keyword\">self</span> alloc] <span class=\"keyword\">init</span>];</span><br><span class=\"line\">    signal-&gt;_didSubscribe = [didSubscribe copy];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [signal setNameWithFormat:@<span class=\"string\">\"+createSignal:\"</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在创建 RACSingal 的时候会调用其子类 RACDynamicSignal 去创建，我们也看到 RACDynamicSignal 对 didSuscribe 这个 block 是进行了 copy。所以大家可能会被要求注意循环引用的问题，于是大家都用 @weakify(target) 和 @strongify(target) 来避免循环引用的问题。那是不是所有用到 RAC 的地方都需要使用这些宏来避免循环引用的问题，不尽然。比如下面这个：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 场景1</span></span><br><span class=\"line\">[<span class=\"type\">RACObserve</span>(<span class=\"keyword\">self</span>, title) subscribeNext:^(id x) &#123;</span><br><span class=\"line\">    <span class=\"type\">NSLog</span>(@<span class=\"string\">\"%@\"</span>, x);</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>接下来，我们来对比以下的几种用法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface <span class=\"type\">ViewController</span>()</span><br><span class=\"line\">@property (strong, nonatomic) <span class=\"type\">ViewModel</span> * viewModel;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation <span class=\"type\">ViewController</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (void)viewDidiLoad &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.viewModel = [<span class=\"type\">ViewModel</span> new];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 场景2</span></span><br><span class=\"line\">    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.title = @<span class=\"string\">\"你好\"</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 场景3</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.viewModel.titleSignal subscribeNext:^(<span class=\"type\">NSString</span> * title) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.title = title;</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 场景4</span></span><br><span class=\"line\">    [<span class=\"type\">RACObserve</span>(<span class=\"keyword\">self</span>.viewModel, title) subscribeNext:^(<span class=\"type\">NSString</span> * title)     &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.title = title;</span><br><span class=\"line\">    &#125;]; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p>场景2是我们平常都会用到的，而且我们也没有在这种场景下去考虑循环引用的问题，这是因为 dispatch 的 block 不是属于 self 的（至于这个 block 是属于谁的，回头我再查点资料或者请各位指教），所以即使你在 block 使用了 self 也不会有循环应用的问题。</p>\n<p>场景3很明显是有循环引用的问题：<strong>self-&gt;viewModel-&gt;titleSignal-&gt;block-&gt;self</strong>，这个时候如果我们不做处理的话，那么 self 就永远不会被释放。正确的做法应该是使用 @weakify(self) 和 @strongify(self)：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 场景3</span></span><br><span class=\"line\">@weakify(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.viewModel.titleSignal subscribeNext:^(<span class=\"type\">NSString</span> * title) &#123;</span><br><span class=\"line\">    @strongify(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.title = title;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>场景4在我们看来是没有问题的，因为这里看起来只有 <strong>singal-&gt;block-&gt;self</strong> 的引用，它们之间并没有造成循环引用的问题。我们先来看看 RACObserve 的实现：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define <span class=\"type\">RACObserve</span>(<span class=\"type\">TARGET</span>, <span class=\"type\">KEYPATH</span>) \\</span><br><span class=\"line\">(&#123; \\</span><br><span class=\"line\">_Pragma(<span class=\"string\">\"clang diagnostic push\"</span>) \\</span><br><span class=\"line\">_Pragma(<span class=\"string\">\"clang diagnostic ignored \\\"-Wreceiver-is-weak\\\"\"</span>) \\</span><br><span class=\"line\">__weak id target_ = (<span class=\"type\">TARGET</span>); \\</span><br><span class=\"line\">[target_ rac_valuesForKeyPath:@keypath(<span class=\"type\">TARGET</span>, <span class=\"type\">KEYPATH</span>) observer:<span class=\"keyword\">self</span>]; \\</span><br><span class=\"line\">_Pragma(<span class=\"string\">\"clang diagnostic pop\"</span>) \\</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">RACSignal</span> *)rac_valuesForKeyPath:(<span class=\"type\">NSString</span> *)keyPath observer:(__weak <span class=\"type\">NSObject</span> *)observer;</span><br></pre></td></tr></table></figure>\n<p>其实，看到这里你会认为这里只是调用了一个方法创建了一个 Signal，而且这个 Signal 也并不属于任何对象。我们再来看看具体的实现是怎么样的？</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">RACSignal</span> *)rac_valuesAndChangesForKeyPath:(<span class=\"type\">NSString</span> *)keyPath options:(<span class=\"type\">NSKeyValueObservingOptions</span>)options observer:(__weak <span class=\"type\">NSObject</span> *)weakObserver &#123;</span><br><span class=\"line\">    <span class=\"type\">NSObject</span> *strongObserver = weakObserver;</span><br><span class=\"line\">    keyPath = [keyPath copy];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">NSRecursiveLock</span> *objectLock = [[<span class=\"type\">NSRecursiveLock</span> alloc] <span class=\"keyword\">init</span>];</span><br><span class=\"line\">    objectLock.name = @<span class=\"string\">\"org.reactivecocoa.ReactiveCocoa.NSObjectRACPropertySubscribing\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    __weak <span class=\"type\">NSObject</span> *weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">RACSignal</span> *deallocSignal = [[<span class=\"type\">RACSignal</span> <span class=\"built_in\">zip</span>:@[</span><br><span class=\"line\">                            <span class=\"keyword\">self</span>.rac_willDeallocSignal,</span><br><span class=\"line\">                            strongObserver.rac_willDeallocSignal ?: [<span class=\"type\">RACSignal</span> never]</span><br><span class=\"line\">    ]] doCompleted:^&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Forces deallocation to wait if the object variables are currently</span></span><br><span class=\"line\">        <span class=\"comment\">// being read on another thread.</span></span><br><span class=\"line\">        [objectLock lock];</span><br><span class=\"line\">        @onExit &#123;</span><br><span class=\"line\">            [objectLock unlock];</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> [[[<span class=\"type\">RACSignal</span> createSignal:^ <span class=\"type\">RACDisposable</span> * (id&lt;<span class=\"type\">RACSubscriber</span>&gt; subscriber) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Hold onto the lock the whole time we're setting up the KVO</span></span><br><span class=\"line\">        <span class=\"comment\">// observation, because any resurrection that might be caused by our</span></span><br><span class=\"line\">        <span class=\"comment\">// retaining below must be balanced out by the time -dealloc returns</span></span><br><span class=\"line\">        <span class=\"comment\">// (if another thread is waiting on the lock above).</span></span><br><span class=\"line\">        [objectLock lock];</span><br><span class=\"line\">        @onExit &#123;</span><br><span class=\"line\">            [objectLock unlock];</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">        __strong <span class=\"type\">NSObject</span> *observer __attribute__((objc_precise_lifetime)) = weakObserver;</span><br><span class=\"line\">        __strong <span class=\"type\">NSObject</span> *<span class=\"keyword\">self</span> __attribute__((objc_precise_lifetime)) = weakSelf;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> == <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">            [subscriber sendCompleted];</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> rac_observeKeyPath:keyPath options:options observer:observer block:^(id value, <span class=\"type\">NSDictionary</span> *change, <span class=\"type\">BOOL</span> causedByDealloc, <span class=\"type\">BOOL</span> affectedOnlyLastComponent) &#123;</span><br><span class=\"line\">                [subscriber sendNext:<span class=\"type\">RACTuplePack</span>(value, change)];</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">    &#125;] takeUntil:deallocSignal] setNameWithFormat:@<span class=\"string\">\"%@ -rac_valueAndChangesForKeyPath: %@ options: %lu observer: %@\"</span>, <span class=\"keyword\">self</span>.rac_description, keyPath, (unsigned long)options, strongObserver.rac_description];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重点观察 <strong>deallocSignal</strong> 和 <strong>[signal takeUntile:deallocSignal]</strong>，我们把 deallocSignal 单独拿出来看看：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">RACSignal</span> *deallocSignal = [[<span class=\"type\">RACSignal</span> <span class=\"built_in\">zip</span>:@[</span><br><span class=\"line\">                        <span class=\"keyword\">self</span>.rac_willDeallocSignal,</span><br><span class=\"line\">                        strongObserver.rac_willDeallocSignal ?: [<span class=\"type\">RACSignal</span> never]</span><br><span class=\"line\">                        ]] doCompleted:^&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Forces deallocation to wait if the object variables are currently</span></span><br><span class=\"line\">    <span class=\"comment\">// being read on another thread.</span></span><br><span class=\"line\">    [objectLock lock];</span><br><span class=\"line\">    @onExit &#123;</span><br><span class=\"line\">    [objectLock unlock];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>这里的 deallocSignal 是只有在 self 和 strongObserve 都将要发生 dealloc 的时候才会触发的。即用 RACObserve 创建的信号只有在其 target 和 observe 都发生 dealloc 的时候才会被 disposable (这个好像是 RAC 用来销毁自己资源的东西)。不明白的童鞋，我们回头来分析一下场景4的代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 场景4</span></span><br><span class=\"line\">[<span class=\"type\">RACObserve</span>(<span class=\"keyword\">self</span>.viewModel, title) subscribeNext:^(<span class=\"type\">NSString</span> * title) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.title = title;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>用 RACObserve 创建的信号看起来只要出了函数体其资源应该就会被回收，但是这个信号其实是只有在 self.viewModel.rac_willDeallocSignal 和 self.rac_willDeallocSignal 都发生的情况下才会被释放。所以场景4的引用关系看起来只有 signal-&gt;block-&gt;self，但是这个 signal 只有在 self.rac_willDeallocSignal 的时候才会被释放。所以这里如果不打断这种关系的话就会造成循环引用的问题，正确做法应该是：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 场景4</span></span><br><span class=\"line\">@weakify(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">[<span class=\"type\">RACObserve</span>(<span class=\"keyword\">self</span>.viewModel, title) subscribeNext:^(<span class=\"type\">NSString</span> * title) &#123;</span><br><span class=\"line\">    @strongify(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.title = title;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>最后，在说一个特别需要注意的，就是 UITableViewCell 和 UICollectionViewCell 复用和 RAC 的问题。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">NSInteger</span>)tableView:(nonnull <span class=\"type\">UITableView</span> *)tableView numberOfRowsInSection:(<span class=\"type\">NSInteger</span>)section &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">UITableViewCell</span> *)tableView:(nonnull <span class=\"type\">UITableView</span> *)tableView cellForRowAtIndexPath:(nonnull <span class=\"type\">NSIndexPath</span> *)indexPath &#123;</span><br><span class=\"line\">    <span class=\"type\">UITableViewCell</span> * cell = [tableView dequeueReusableCellWithIdentifier:@<span class=\"string\">\"TableViewCell\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    @weakify(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">    [<span class=\"type\">RACObserve</span>(cell.textLabel, text) subscribeNext:^(id x) &#123;</span><br><span class=\"line\">        @strongify(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">        <span class=\"type\">NSLog</span>(@<span class=\"string\">\"%@\"</span>, <span class=\"keyword\">self</span>);</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cell;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们看到这里的 RACObserve 创建的 Signal 和 self 之间已经去掉了循环引用的问题，所以应该是没有什么问题的。但是结合之前我们对 RACObserve 的理解再仔细分析一下，这里的 Signal 只要 self 没有被 dealloc 的话就不会被释放。虽然每次 UITableViewCell 都会被重用，但是每次重用过程中创建的信号确实无法被 disposable。那我们该怎么做呢？</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">NSInteger</span>)tableView:(nonnull <span class=\"type\">UITableView</span> *)tableView numberOfRowsInSection:(<span class=\"type\">NSInteger</span>)section &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">UITableViewCell</span> *)tableView:(nonnull <span class=\"type\">UITableView</span> *)tableView cellForRowAtIndexPath:(nonnull <span class=\"type\">NSIndexPath</span> *)indexPath &#123;</span><br><span class=\"line\">    <span class=\"type\">UITableViewCell</span> * cell = [tableView dequeueReusableCellWithIdentifier:@<span class=\"string\">\"TableViewCell\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    @weakify(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">    [[<span class=\"type\">RACObserve</span>(cell.textLabel, text) takeUntil:cell.rac_prepareForReuseSignal] subscribeNext:^(id x) &#123;</span><br><span class=\"line\">        @strongify(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">        <span class=\"type\">NSLog</span>(@<span class=\"string\">\"%@\"</span>, <span class=\"keyword\">self</span>);</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cell;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，我们在cell里面创建的信号加上 takeUntil:cell.rac_prepareForReuseSignal，这个是让 cell 在每次重用的时候都去 disposable 创建的信号。</p>\n<p>以上所说的关于内存的东西我都用 Instrument 的 Allocations 验证过了，但是依旧建议大家自己也去试试。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在用 RAC 的时候发现自己对内存管理还是有些困惑，于是自己写了一些代码来验证自己的一些理解。<br>在一开始接触 RAC 的时候，我们知道 RAC 对于 block 都是 copy 赋值的。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@implementation <span class=\"type\">RACSignal</span></span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark <span class=\"type\">Lifecycle</span></span><br><span class=\"line\"></span><br><span class=\"line\">+ (<span class=\"type\">RACSignal</span> *)createSignal:(<span class=\"type\">RACDisposable</span> * (^)(id&lt;<span class=\"type\">RACSubscriber</span>&gt; subscriber))didSubscribe &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"type\">RACDynamicSignal</span> createSignal:didSubscribe];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@implementation <span class=\"type\">RACDynamicSignal</span></span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark <span class=\"type\">Lifecycle</span></span><br><span class=\"line\"></span><br><span class=\"line\">+ (<span class=\"type\">RACSignal</span> *)createSignal:(<span class=\"type\">RACDisposable</span> * (^)(id&lt;<span class=\"type\">RACSubscriber</span>&gt; subscriber))didSubscribe &#123;</span><br><span class=\"line\">    <span class=\"type\">RACDynamicSignal</span> *signal = [[<span class=\"keyword\">self</span> alloc] <span class=\"keyword\">init</span>];</span><br><span class=\"line\">    signal-&gt;_didSubscribe = [didSubscribe copy];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [signal setNameWithFormat:@<span class=\"string\">\"+createSignal:\"</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在创建 RACSingal 的时候会调用其子类 RACDynamicSignal 去创建，我们也看到 RACDynamicSignal 对 didSuscribe 这个 block 是进行了 copy。所以大家可能会被要求注意循环引用的问题，于是大家都用 @weakify(target) 和 @strongify(target) 来避免循环引用的问题。那是不是所有用到 RAC 的地方都需要使用这些宏来避免循环引用的问题，不尽然。比如下面这个：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 场景1</span></span><br><span class=\"line\">[<span class=\"type\">RACObserve</span>(<span class=\"keyword\">self</span>, title) subscribeNext:^(id x) &#123;</span><br><span class=\"line\">    <span class=\"type\">NSLog</span>(@<span class=\"string\">\"%@\"</span>, x);</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>接下来，我们来对比以下的几种用法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface <span class=\"type\">ViewController</span>()</span><br><span class=\"line\">@property (strong, nonatomic) <span class=\"type\">ViewModel</span> * viewModel;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation <span class=\"type\">ViewController</span></span><br><span class=\"line\"></span><br><span class=\"line\">- (void)viewDidiLoad &#123;</span><br><span class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">self</span>.viewModel = [<span class=\"type\">ViewModel</span> new];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 场景2</span></span><br><span class=\"line\">    dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.title = @<span class=\"string\">\"你好\"</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 场景3</span></span><br><span class=\"line\">    [<span class=\"keyword\">self</span>.viewModel.titleSignal subscribeNext:^(<span class=\"type\">NSString</span> * title) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.title = title;</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 场景4</span></span><br><span class=\"line\">    [<span class=\"type\">RACObserve</span>(<span class=\"keyword\">self</span>.viewModel, title) subscribeNext:^(<span class=\"type\">NSString</span> * title)     &#123;</span><br><span class=\"line\">        <span class=\"keyword\">self</span>.title = title;</span><br><span class=\"line\">    &#125;]; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p>场景2是我们平常都会用到的，而且我们也没有在这种场景下去考虑循环引用的问题，这是因为 dispatch 的 block 不是属于 self 的（至于这个 block 是属于谁的，回头我再查点资料或者请各位指教），所以即使你在 block 使用了 self 也不会有循环应用的问题。</p>\n<p>场景3很明显是有循环引用的问题：<strong>self-&gt;viewModel-&gt;titleSignal-&gt;block-&gt;self</strong>，这个时候如果我们不做处理的话，那么 self 就永远不会被释放。正确的做法应该是使用 @weakify(self) 和 @strongify(self)：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 场景3</span></span><br><span class=\"line\">@weakify(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">[<span class=\"keyword\">self</span>.viewModel.titleSignal subscribeNext:^(<span class=\"type\">NSString</span> * title) &#123;</span><br><span class=\"line\">    @strongify(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.title = title;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>场景4在我们看来是没有问题的，因为这里看起来只有 <strong>singal-&gt;block-&gt;self</strong> 的引用，它们之间并没有造成循环引用的问题。我们先来看看 RACObserve 的实现：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define <span class=\"type\">RACObserve</span>(<span class=\"type\">TARGET</span>, <span class=\"type\">KEYPATH</span>) \\</span><br><span class=\"line\">(&#123; \\</span><br><span class=\"line\">_Pragma(<span class=\"string\">\"clang diagnostic push\"</span>) \\</span><br><span class=\"line\">_Pragma(<span class=\"string\">\"clang diagnostic ignored \\\"-Wreceiver-is-weak\\\"\"</span>) \\</span><br><span class=\"line\">__weak id target_ = (<span class=\"type\">TARGET</span>); \\</span><br><span class=\"line\">[target_ rac_valuesForKeyPath:@keypath(<span class=\"type\">TARGET</span>, <span class=\"type\">KEYPATH</span>) observer:<span class=\"keyword\">self</span>]; \\</span><br><span class=\"line\">_Pragma(<span class=\"string\">\"clang diagnostic pop\"</span>) \\</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">RACSignal</span> *)rac_valuesForKeyPath:(<span class=\"type\">NSString</span> *)keyPath observer:(__weak <span class=\"type\">NSObject</span> *)observer;</span><br></pre></td></tr></table></figure>\n<p>其实，看到这里你会认为这里只是调用了一个方法创建了一个 Signal，而且这个 Signal 也并不属于任何对象。我们再来看看具体的实现是怎么样的？</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">RACSignal</span> *)rac_valuesAndChangesForKeyPath:(<span class=\"type\">NSString</span> *)keyPath options:(<span class=\"type\">NSKeyValueObservingOptions</span>)options observer:(__weak <span class=\"type\">NSObject</span> *)weakObserver &#123;</span><br><span class=\"line\">    <span class=\"type\">NSObject</span> *strongObserver = weakObserver;</span><br><span class=\"line\">    keyPath = [keyPath copy];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">NSRecursiveLock</span> *objectLock = [[<span class=\"type\">NSRecursiveLock</span> alloc] <span class=\"keyword\">init</span>];</span><br><span class=\"line\">    objectLock.name = @<span class=\"string\">\"org.reactivecocoa.ReactiveCocoa.NSObjectRACPropertySubscribing\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    __weak <span class=\"type\">NSObject</span> *weakSelf = <span class=\"keyword\">self</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">RACSignal</span> *deallocSignal = [[<span class=\"type\">RACSignal</span> <span class=\"built_in\">zip</span>:@[</span><br><span class=\"line\">                            <span class=\"keyword\">self</span>.rac_willDeallocSignal,</span><br><span class=\"line\">                            strongObserver.rac_willDeallocSignal ?: [<span class=\"type\">RACSignal</span> never]</span><br><span class=\"line\">    ]] doCompleted:^&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Forces deallocation to wait if the object variables are currently</span></span><br><span class=\"line\">        <span class=\"comment\">// being read on another thread.</span></span><br><span class=\"line\">        [objectLock lock];</span><br><span class=\"line\">        @onExit &#123;</span><br><span class=\"line\">            [objectLock unlock];</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> [[[<span class=\"type\">RACSignal</span> createSignal:^ <span class=\"type\">RACDisposable</span> * (id&lt;<span class=\"type\">RACSubscriber</span>&gt; subscriber) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Hold onto the lock the whole time we're setting up the KVO</span></span><br><span class=\"line\">        <span class=\"comment\">// observation, because any resurrection that might be caused by our</span></span><br><span class=\"line\">        <span class=\"comment\">// retaining below must be balanced out by the time -dealloc returns</span></span><br><span class=\"line\">        <span class=\"comment\">// (if another thread is waiting on the lock above).</span></span><br><span class=\"line\">        [objectLock lock];</span><br><span class=\"line\">        @onExit &#123;</span><br><span class=\"line\">            [objectLock unlock];</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">        __strong <span class=\"type\">NSObject</span> *observer __attribute__((objc_precise_lifetime)) = weakObserver;</span><br><span class=\"line\">        __strong <span class=\"type\">NSObject</span> *<span class=\"keyword\">self</span> __attribute__((objc_precise_lifetime)) = weakSelf;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> == <span class=\"literal\">nil</span>) &#123;</span><br><span class=\"line\">            [subscriber sendCompleted];</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> rac_observeKeyPath:keyPath options:options observer:observer block:^(id value, <span class=\"type\">NSDictionary</span> *change, <span class=\"type\">BOOL</span> causedByDealloc, <span class=\"type\">BOOL</span> affectedOnlyLastComponent) &#123;</span><br><span class=\"line\">                [subscriber sendNext:<span class=\"type\">RACTuplePack</span>(value, change)];</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">    &#125;] takeUntil:deallocSignal] setNameWithFormat:@<span class=\"string\">\"%@ -rac_valueAndChangesForKeyPath: %@ options: %lu observer: %@\"</span>, <span class=\"keyword\">self</span>.rac_description, keyPath, (unsigned long)options, strongObserver.rac_description];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重点观察 <strong>deallocSignal</strong> 和 <strong>[signal takeUntile:deallocSignal]</strong>，我们把 deallocSignal 单独拿出来看看：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">RACSignal</span> *deallocSignal = [[<span class=\"type\">RACSignal</span> <span class=\"built_in\">zip</span>:@[</span><br><span class=\"line\">                        <span class=\"keyword\">self</span>.rac_willDeallocSignal,</span><br><span class=\"line\">                        strongObserver.rac_willDeallocSignal ?: [<span class=\"type\">RACSignal</span> never]</span><br><span class=\"line\">                        ]] doCompleted:^&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Forces deallocation to wait if the object variables are currently</span></span><br><span class=\"line\">    <span class=\"comment\">// being read on another thread.</span></span><br><span class=\"line\">    [objectLock lock];</span><br><span class=\"line\">    @onExit &#123;</span><br><span class=\"line\">    [objectLock unlock];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>这里的 deallocSignal 是只有在 self 和 strongObserve 都将要发生 dealloc 的时候才会触发的。即用 RACObserve 创建的信号只有在其 target 和 observe 都发生 dealloc 的时候才会被 disposable (这个好像是 RAC 用来销毁自己资源的东西)。不明白的童鞋，我们回头来分析一下场景4的代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 场景4</span></span><br><span class=\"line\">[<span class=\"type\">RACObserve</span>(<span class=\"keyword\">self</span>.viewModel, title) subscribeNext:^(<span class=\"type\">NSString</span> * title) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.title = title;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>用 RACObserve 创建的信号看起来只要出了函数体其资源应该就会被回收，但是这个信号其实是只有在 self.viewModel.rac_willDeallocSignal 和 self.rac_willDeallocSignal 都发生的情况下才会被释放。所以场景4的引用关系看起来只有 signal-&gt;block-&gt;self，但是这个 signal 只有在 self.rac_willDeallocSignal 的时候才会被释放。所以这里如果不打断这种关系的话就会造成循环引用的问题，正确做法应该是：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 场景4</span></span><br><span class=\"line\">@weakify(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">[<span class=\"type\">RACObserve</span>(<span class=\"keyword\">self</span>.viewModel, title) subscribeNext:^(<span class=\"type\">NSString</span> * title) &#123;</span><br><span class=\"line\">    @strongify(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">    <span class=\"keyword\">self</span>.title = title;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>最后，在说一个特别需要注意的，就是 UITableViewCell 和 UICollectionViewCell 复用和 RAC 的问题。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">NSInteger</span>)tableView:(nonnull <span class=\"type\">UITableView</span> *)tableView numberOfRowsInSection:(<span class=\"type\">NSInteger</span>)section &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">UITableViewCell</span> *)tableView:(nonnull <span class=\"type\">UITableView</span> *)tableView cellForRowAtIndexPath:(nonnull <span class=\"type\">NSIndexPath</span> *)indexPath &#123;</span><br><span class=\"line\">    <span class=\"type\">UITableViewCell</span> * cell = [tableView dequeueReusableCellWithIdentifier:@<span class=\"string\">\"TableViewCell\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    @weakify(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">    [<span class=\"type\">RACObserve</span>(cell.textLabel, text) subscribeNext:^(id x) &#123;</span><br><span class=\"line\">        @strongify(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">        <span class=\"type\">NSLog</span>(@<span class=\"string\">\"%@\"</span>, <span class=\"keyword\">self</span>);</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cell;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们看到这里的 RACObserve 创建的 Signal 和 self 之间已经去掉了循环引用的问题，所以应该是没有什么问题的。但是结合之前我们对 RACObserve 的理解再仔细分析一下，这里的 Signal 只要 self 没有被 dealloc 的话就不会被释放。虽然每次 UITableViewCell 都会被重用，但是每次重用过程中创建的信号确实无法被 disposable。那我们该怎么做呢？</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">NSInteger</span>)tableView:(nonnull <span class=\"type\">UITableView</span> *)tableView numberOfRowsInSection:(<span class=\"type\">NSInteger</span>)section &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"type\">UITableViewCell</span> *)tableView:(nonnull <span class=\"type\">UITableView</span> *)tableView cellForRowAtIndexPath:(nonnull <span class=\"type\">NSIndexPath</span> *)indexPath &#123;</span><br><span class=\"line\">    <span class=\"type\">UITableViewCell</span> * cell = [tableView dequeueReusableCellWithIdentifier:@<span class=\"string\">\"TableViewCell\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    @weakify(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">    [[<span class=\"type\">RACObserve</span>(cell.textLabel, text) takeUntil:cell.rac_prepareForReuseSignal] subscribeNext:^(id x) &#123;</span><br><span class=\"line\">        @strongify(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">        <span class=\"type\">NSLog</span>(@<span class=\"string\">\"%@\"</span>, <span class=\"keyword\">self</span>);</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cell;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，我们在cell里面创建的信号加上 takeUntil:cell.rac_prepareForReuseSignal，这个是让 cell 在每次重用的时候都去 disposable 创建的信号。</p>\n<p>以上所说的关于内存的东西我都用 Instrument 的 Allocations 验证过了，但是依旧建议大家自己也去试试。</p>\n"},{"title":"NSNotification 的一些知识点","author":"帕帕","date":"2018-11-05T17:38:56.000Z","thumbnail":"https://images.unsplash.com/photo-1514464750060-00e6e34c8b8c?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=3749c47dd7beec20102c6b32fc19833a&auto=format&fit=crop&w=160&q=100","_content":"\n## 重复添加相同观察者\n\n我们先来看看日常开发中我们对 NSNotification 的正常用法，如下：\n```swift\n// 定义通知\nlet TestNotification = NSNotification.Name.init(\"com.papa.test\")\n\n// 测试类\nclass Test {\n\n    init() {\n        NotificationCenter.default.addObserver(self, selector: #selector(Test.test(notification:)), name: TestNotification, object: nil)\n    }\n\n    // 注意\n    deinit {\n        NotificationCenter.default.removeObserver(self)\n    }\n\n    @objc func test(notification: Notification) {\n        print(\"Test\")\n    }\n}\n```\n\n但是如果我们在刚才代码中的 `init` 方法里面对同一个通知多次添加同一个观察者的话，会发生什么？\n```swift\ninit() {\n    NotificationCenter.default.addObserver(self, selector: #selector(Test.test(notification:)), name: TestNotification, object: nil)\n    NotificationCenter.default.addObserver(self, selector: #selector(Test.test(notification:)), name: TestNotification, object: nil)\n}\n\n// 发送 TestNotification 通知\nNotificationCenter.default.post(name: TestNotification, object: nil)\n```\n\n答案是会输出：\n```swift\nTest\nTest\n```\n\n所以我们要尽量避免重复添加观察者，因为这有可能会造成一些未知现象的发生。\n\n## 通知中的线程问题\n \n```swift\n// 定义通知\nlet ThreadNotification = NSNotification.Name.init(\"com.papa.thread\")\n\n// 测试类\nclass Test {\n\n    init() {\n        print(\"Add Observer: \\(Thread.current)\")\n        NotificationCenter.default.addObserver(self, selector: #selector(Test.test(notification:)), name: ThreadNotification, object: nil)\n    }\n\n    // 注意\n    deinit {\n        NotificationCenter.default.removeObserver(self)\n    }\n\n    @objc func test(notification: Notification) {\n        print(\"Receive: \\(Thread.current)\")\n    }\n}\n\nDispatchQueue.init(label: \"com.ps.test.queue\").async {\n    print(\"Post: \\(Thread.current)\")\n    NotificationCenter.default.post(name: ThreadNotification, object: nil)\n}\n\n```\n\n我们来看看观察者是在什么线程上接受到通知的:\n```swift\nAdd Observer: <NSThread: 0x60000147d1c0>{number = 1, name = main}\nPost: <NSThread: 0x600001462640>{number = 3, name = (null)}\nReceive: <NSThread: 0x600001462640>{number = 3, name = (null)}\n```\n\n虽然我们是在主线程中去添加观察者，但是因为我们是在其他线程中去发送通知的，所以最后我们也是在其他线程中接收到通知的。\n\n## 通知中的阻塞问题\n\n```swift\n// 定义通知\nlet SleepNotification = NSNotification.Name.init(\"com.papa.sleep\")\n\n// 测试类\nclass Test {\n\n    init() {\n        NotificationCenter.default.addObserver(self, selector: #selector(Test.test(notification:)), name: SleepNotification, object: nil)\n    }\n\n    // 注意\n    deinit {\n        NotificationCenter.default.removeObserver(self)\n    }\n\n    @objc func test(notification: Notification) {\n        sleep(3)\n    }\n}\n\nlet start = Date()\nNotificationCenter.default.post(name: SleepNotification, object: nil)\nlet end = Date()\nprint(\"相差：\\(end.timeIntervalSince(start))\")\n```\n\n我们可以看到最后相差时间大概是 `3s` ，通过上面的代码我们就知道单 NotificationCenter 去 post 一个通知的时候，它会等待观察者处理完改通知之后才会继续往后执行。所以平常使用过程中我们要注意 post 有可能会阻塞当前线程，特别是在主线程中。\n\n\n","source":"_posts/Notification 的一些知识点.md","raw":"---\ntitle: NSNotification 的一些知识点\nauthor: 帕帕\ndate: 2018-11-05 17:38:56 +0800\ncategories: 技术\ntags: [iOS]\nthumbnail: https://images.unsplash.com/photo-1514464750060-00e6e34c8b8c?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=3749c47dd7beec20102c6b32fc19833a&auto=format&fit=crop&w=160&q=100\n---\n\n## 重复添加相同观察者\n\n我们先来看看日常开发中我们对 NSNotification 的正常用法，如下：\n```swift\n// 定义通知\nlet TestNotification = NSNotification.Name.init(\"com.papa.test\")\n\n// 测试类\nclass Test {\n\n    init() {\n        NotificationCenter.default.addObserver(self, selector: #selector(Test.test(notification:)), name: TestNotification, object: nil)\n    }\n\n    // 注意\n    deinit {\n        NotificationCenter.default.removeObserver(self)\n    }\n\n    @objc func test(notification: Notification) {\n        print(\"Test\")\n    }\n}\n```\n\n但是如果我们在刚才代码中的 `init` 方法里面对同一个通知多次添加同一个观察者的话，会发生什么？\n```swift\ninit() {\n    NotificationCenter.default.addObserver(self, selector: #selector(Test.test(notification:)), name: TestNotification, object: nil)\n    NotificationCenter.default.addObserver(self, selector: #selector(Test.test(notification:)), name: TestNotification, object: nil)\n}\n\n// 发送 TestNotification 通知\nNotificationCenter.default.post(name: TestNotification, object: nil)\n```\n\n答案是会输出：\n```swift\nTest\nTest\n```\n\n所以我们要尽量避免重复添加观察者，因为这有可能会造成一些未知现象的发生。\n\n## 通知中的线程问题\n \n```swift\n// 定义通知\nlet ThreadNotification = NSNotification.Name.init(\"com.papa.thread\")\n\n// 测试类\nclass Test {\n\n    init() {\n        print(\"Add Observer: \\(Thread.current)\")\n        NotificationCenter.default.addObserver(self, selector: #selector(Test.test(notification:)), name: ThreadNotification, object: nil)\n    }\n\n    // 注意\n    deinit {\n        NotificationCenter.default.removeObserver(self)\n    }\n\n    @objc func test(notification: Notification) {\n        print(\"Receive: \\(Thread.current)\")\n    }\n}\n\nDispatchQueue.init(label: \"com.ps.test.queue\").async {\n    print(\"Post: \\(Thread.current)\")\n    NotificationCenter.default.post(name: ThreadNotification, object: nil)\n}\n\n```\n\n我们来看看观察者是在什么线程上接受到通知的:\n```swift\nAdd Observer: <NSThread: 0x60000147d1c0>{number = 1, name = main}\nPost: <NSThread: 0x600001462640>{number = 3, name = (null)}\nReceive: <NSThread: 0x600001462640>{number = 3, name = (null)}\n```\n\n虽然我们是在主线程中去添加观察者，但是因为我们是在其他线程中去发送通知的，所以最后我们也是在其他线程中接收到通知的。\n\n## 通知中的阻塞问题\n\n```swift\n// 定义通知\nlet SleepNotification = NSNotification.Name.init(\"com.papa.sleep\")\n\n// 测试类\nclass Test {\n\n    init() {\n        NotificationCenter.default.addObserver(self, selector: #selector(Test.test(notification:)), name: SleepNotification, object: nil)\n    }\n\n    // 注意\n    deinit {\n        NotificationCenter.default.removeObserver(self)\n    }\n\n    @objc func test(notification: Notification) {\n        sleep(3)\n    }\n}\n\nlet start = Date()\nNotificationCenter.default.post(name: SleepNotification, object: nil)\nlet end = Date()\nprint(\"相差：\\(end.timeIntervalSince(start))\")\n```\n\n我们可以看到最后相差时间大概是 `3s` ，通过上面的代码我们就知道单 NotificationCenter 去 post 一个通知的时候，它会等待观察者处理完改通知之后才会继续往后执行。所以平常使用过程中我们要注意 post 有可能会阻塞当前线程，特别是在主线程中。\n\n\n","slug":"Notification 的一些知识点","published":1,"updated":"2018-11-05T09:52:37.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo44p6v50009arvbafwe58ho","content":"<h2 id=\"重复添加相同观察者\"><a href=\"#重复添加相同观察者\" class=\"headerlink\" title=\"重复添加相同观察者\"></a>重复添加相同观察者</h2><p>我们先来看看日常开发中我们对 NSNotification 的正常用法，如下：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义通知</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"type\">TestNotification</span> = <span class=\"type\">NSNotification</span>.<span class=\"type\">Name</span>.<span class=\"keyword\">init</span>(<span class=\"string\">\"com.papa.test\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        <span class=\"type\">NotificationCenter</span>.<span class=\"keyword\">default</span>.addObserver(<span class=\"keyword\">self</span>, selector: #selector(<span class=\"type\">Test</span>.test(notification:)), name: <span class=\"type\">TestNotification</span>, object: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注意</span></span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">NotificationCenter</span>.<span class=\"keyword\">default</span>.removeObserver(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@objc</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">(notification: Notification)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Test\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是如果我们在刚才代码中的 <code>init</code> 方法里面对同一个通知多次添加同一个观察者的话，会发生什么？<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">NotificationCenter</span>.<span class=\"keyword\">default</span>.addObserver(<span class=\"keyword\">self</span>, selector: #selector(<span class=\"type\">Test</span>.test(notification:)), name: <span class=\"type\">TestNotification</span>, object: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    <span class=\"type\">NotificationCenter</span>.<span class=\"keyword\">default</span>.addObserver(<span class=\"keyword\">self</span>, selector: #selector(<span class=\"type\">Test</span>.test(notification:)), name: <span class=\"type\">TestNotification</span>, object: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发送 TestNotification 通知</span></span><br><span class=\"line\"><span class=\"type\">NotificationCenter</span>.<span class=\"keyword\">default</span>.post(name: <span class=\"type\">TestNotification</span>, object: <span class=\"literal\">nil</span>)</span><br></pre></td></tr></table></figure></p>\n<p>答案是会输出：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Test</span></span><br><span class=\"line\"><span class=\"type\">Test</span></span><br></pre></td></tr></table></figure></p>\n<p>所以我们要尽量避免重复添加观察者，因为这有可能会造成一些未知现象的发生。</p>\n<h2 id=\"通知中的线程问题\"><a href=\"#通知中的线程问题\" class=\"headerlink\" title=\"通知中的线程问题\"></a>通知中的线程问题</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义通知</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"type\">ThreadNotification</span> = <span class=\"type\">NSNotification</span>.<span class=\"type\">Name</span>.<span class=\"keyword\">init</span>(<span class=\"string\">\"com.papa.thread\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Add Observer: <span class=\"subst\">\\(Thread.current)</span>\"</span>)</span><br><span class=\"line\">        <span class=\"type\">NotificationCenter</span>.<span class=\"keyword\">default</span>.addObserver(<span class=\"keyword\">self</span>, selector: #selector(<span class=\"type\">Test</span>.test(notification:)), name: <span class=\"type\">ThreadNotification</span>, object: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注意</span></span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">NotificationCenter</span>.<span class=\"keyword\">default</span>.removeObserver(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@objc</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">(notification: Notification)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Receive: <span class=\"subst\">\\(Thread.current)</span>\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.<span class=\"keyword\">init</span>(label: <span class=\"string\">\"com.ps.test.queue\"</span>).async &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Post: <span class=\"subst\">\\(Thread.current)</span>\"</span>)</span><br><span class=\"line\">    <span class=\"type\">NotificationCenter</span>.<span class=\"keyword\">default</span>.post(name: <span class=\"type\">ThreadNotification</span>, object: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们来看看观察者是在什么线程上接受到通知的:<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Add</span> <span class=\"type\">Observer</span>: &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x60000147d1c0</span>&gt;&#123;number = <span class=\"number\">1</span>, name = main&#125;</span><br><span class=\"line\"><span class=\"type\">Post</span>: &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600001462640</span>&gt;&#123;number = <span class=\"number\">3</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"type\">Receive</span>: &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600001462640</span>&gt;&#123;number = <span class=\"number\">3</span>, name = (null)&#125;</span><br></pre></td></tr></table></figure></p>\n<p>虽然我们是在主线程中去添加观察者，但是因为我们是在其他线程中去发送通知的，所以最后我们也是在其他线程中接收到通知的。</p>\n<h2 id=\"通知中的阻塞问题\"><a href=\"#通知中的阻塞问题\" class=\"headerlink\" title=\"通知中的阻塞问题\"></a>通知中的阻塞问题</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义通知</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"type\">SleepNotification</span> = <span class=\"type\">NSNotification</span>.<span class=\"type\">Name</span>.<span class=\"keyword\">init</span>(<span class=\"string\">\"com.papa.sleep\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        <span class=\"type\">NotificationCenter</span>.<span class=\"keyword\">default</span>.addObserver(<span class=\"keyword\">self</span>, selector: #selector(<span class=\"type\">Test</span>.test(notification:)), name: <span class=\"type\">SleepNotification</span>, object: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注意</span></span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">NotificationCenter</span>.<span class=\"keyword\">default</span>.removeObserver(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@objc</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">(notification: Notification)</span></span> &#123;</span><br><span class=\"line\">        sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"type\">Date</span>()</span><br><span class=\"line\"><span class=\"type\">NotificationCenter</span>.<span class=\"keyword\">default</span>.post(name: <span class=\"type\">SleepNotification</span>, object: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> end = <span class=\"type\">Date</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"相差：<span class=\"subst\">\\(end.timeIntervalSince(start)</span>)\"</span>)</span><br></pre></td></tr></table></figure>\n<p>我们可以看到最后相差时间大概是 <code>3s</code> ，通过上面的代码我们就知道单 NotificationCenter 去 post 一个通知的时候，它会等待观察者处理完改通知之后才会继续往后执行。所以平常使用过程中我们要注意 post 有可能会阻塞当前线程，特别是在主线程中。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"重复添加相同观察者\"><a href=\"#重复添加相同观察者\" class=\"headerlink\" title=\"重复添加相同观察者\"></a>重复添加相同观察者</h2><p>我们先来看看日常开发中我们对 NSNotification 的正常用法，如下：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义通知</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"type\">TestNotification</span> = <span class=\"type\">NSNotification</span>.<span class=\"type\">Name</span>.<span class=\"keyword\">init</span>(<span class=\"string\">\"com.papa.test\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        <span class=\"type\">NotificationCenter</span>.<span class=\"keyword\">default</span>.addObserver(<span class=\"keyword\">self</span>, selector: #selector(<span class=\"type\">Test</span>.test(notification:)), name: <span class=\"type\">TestNotification</span>, object: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注意</span></span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">NotificationCenter</span>.<span class=\"keyword\">default</span>.removeObserver(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@objc</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">(notification: Notification)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Test\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但是如果我们在刚才代码中的 <code>init</code> 方法里面对同一个通知多次添加同一个观察者的话，会发生什么？<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">    <span class=\"type\">NotificationCenter</span>.<span class=\"keyword\">default</span>.addObserver(<span class=\"keyword\">self</span>, selector: #selector(<span class=\"type\">Test</span>.test(notification:)), name: <span class=\"type\">TestNotification</span>, object: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    <span class=\"type\">NotificationCenter</span>.<span class=\"keyword\">default</span>.addObserver(<span class=\"keyword\">self</span>, selector: #selector(<span class=\"type\">Test</span>.test(notification:)), name: <span class=\"type\">TestNotification</span>, object: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发送 TestNotification 通知</span></span><br><span class=\"line\"><span class=\"type\">NotificationCenter</span>.<span class=\"keyword\">default</span>.post(name: <span class=\"type\">TestNotification</span>, object: <span class=\"literal\">nil</span>)</span><br></pre></td></tr></table></figure></p>\n<p>答案是会输出：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Test</span></span><br><span class=\"line\"><span class=\"type\">Test</span></span><br></pre></td></tr></table></figure></p>\n<p>所以我们要尽量避免重复添加观察者，因为这有可能会造成一些未知现象的发生。</p>\n<h2 id=\"通知中的线程问题\"><a href=\"#通知中的线程问题\" class=\"headerlink\" title=\"通知中的线程问题\"></a>通知中的线程问题</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义通知</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"type\">ThreadNotification</span> = <span class=\"type\">NSNotification</span>.<span class=\"type\">Name</span>.<span class=\"keyword\">init</span>(<span class=\"string\">\"com.papa.thread\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Add Observer: <span class=\"subst\">\\(Thread.current)</span>\"</span>)</span><br><span class=\"line\">        <span class=\"type\">NotificationCenter</span>.<span class=\"keyword\">default</span>.addObserver(<span class=\"keyword\">self</span>, selector: #selector(<span class=\"type\">Test</span>.test(notification:)), name: <span class=\"type\">ThreadNotification</span>, object: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注意</span></span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">NotificationCenter</span>.<span class=\"keyword\">default</span>.removeObserver(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@objc</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">(notification: Notification)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Receive: <span class=\"subst\">\\(Thread.current)</span>\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.<span class=\"keyword\">init</span>(label: <span class=\"string\">\"com.ps.test.queue\"</span>).async &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Post: <span class=\"subst\">\\(Thread.current)</span>\"</span>)</span><br><span class=\"line\">    <span class=\"type\">NotificationCenter</span>.<span class=\"keyword\">default</span>.post(name: <span class=\"type\">ThreadNotification</span>, object: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们来看看观察者是在什么线程上接受到通知的:<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Add</span> <span class=\"type\">Observer</span>: &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x60000147d1c0</span>&gt;&#123;number = <span class=\"number\">1</span>, name = main&#125;</span><br><span class=\"line\"><span class=\"type\">Post</span>: &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600001462640</span>&gt;&#123;number = <span class=\"number\">3</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"type\">Receive</span>: &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600001462640</span>&gt;&#123;number = <span class=\"number\">3</span>, name = (null)&#125;</span><br></pre></td></tr></table></figure></p>\n<p>虽然我们是在主线程中去添加观察者，但是因为我们是在其他线程中去发送通知的，所以最后我们也是在其他线程中接收到通知的。</p>\n<h2 id=\"通知中的阻塞问题\"><a href=\"#通知中的阻塞问题\" class=\"headerlink\" title=\"通知中的阻塞问题\"></a>通知中的阻塞问题</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义通知</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"type\">SleepNotification</span> = <span class=\"type\">NSNotification</span>.<span class=\"type\">Name</span>.<span class=\"keyword\">init</span>(<span class=\"string\">\"com.papa.sleep\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span>() &#123;</span><br><span class=\"line\">        <span class=\"type\">NotificationCenter</span>.<span class=\"keyword\">default</span>.addObserver(<span class=\"keyword\">self</span>, selector: #selector(<span class=\"type\">Test</span>.test(notification:)), name: <span class=\"type\">SleepNotification</span>, object: <span class=\"literal\">nil</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 注意</span></span><br><span class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">NotificationCenter</span>.<span class=\"keyword\">default</span>.removeObserver(<span class=\"keyword\">self</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@objc</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">(notification: Notification)</span></span> &#123;</span><br><span class=\"line\">        sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"type\">Date</span>()</span><br><span class=\"line\"><span class=\"type\">NotificationCenter</span>.<span class=\"keyword\">default</span>.post(name: <span class=\"type\">SleepNotification</span>, object: <span class=\"literal\">nil</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> end = <span class=\"type\">Date</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"相差：<span class=\"subst\">\\(end.timeIntervalSince(start)</span>)\"</span>)</span><br></pre></td></tr></table></figure>\n<p>我们可以看到最后相差时间大概是 <code>3s</code> ，通过上面的代码我们就知道单 NotificationCenter 去 post 一个通知的时候，它会等待观察者处理完改通知之后才会继续往后执行。所以平常使用过程中我们要注意 post 有可能会阻塞当前线程，特别是在主线程中。</p>\n"},{"title":"Shell Tip","author":"帕帕","date":"2017-09-05T15:30:56.000Z","_content":"\n> 记录日常中用到的一些 Bash 脚本，经常更新\n\n## Tip 1 : 修改文件里面的内容\n早上产品有一个小需求就是把工程中的所有网页的标题修改为黑米流量通，可以使用以下命令来实现\n\n```sh\n$ find . -name '*.html' -print0 | xargs -0 sed -i '' -e 's/<title>.*<\\/title>/<title>黑米流量通<\\/title>/g'\n```\n\n* `find`          查找命令，可以用 man find 查看更多的信息\n* `.`             代表当前目录\n* `-name`         find 命令的参数，表示要查找的文件名\n* `-print0`       是一种不换行的输出格式，以 ASCII NUL 字符（也就是\\0）作为分隔符。上面的例子可能是 `a.html\\0b.html\\0c.html`\n* `|`             这是一个管道符，表示把前面命令的输出作为后面命令的输入\n* `xargs`         是用来构造输入参数，并且循环执行每一个参数\n* `-0`            表示让 xargs 使用 ASCII NUL 来分隔参数。上面的例子将被分隔成 `a.html` `b.html` `c.html` 三个参数依次执行\n* `sed`           这是一个流编辑器，如果传的是文件名会把文件内容读入内存，如果只是普通字符串就会把字符串读入内存\n* `-i`            表示要把原来的文件内容做一次备份，后面的 `''` 是表示要备份的文件名字，如果没有文件名字就表示不需要备份\n* `-e`            表示后面的字符串是一个命令，需要被执行\n* `s/old/new/g`   这个是用来替换字符串的命令\n\n## Tip 2 : 查找文件的内容\n把匹配的文件内容的相关文件列出来\n\n```sh\n$ find . -name '*.html' -print0 | xargs -0 grep 'PATTERN'\n```\n\n## Tip 3 : 解决 Homebrew 的权限问题\n查看 Homebrew 的所有权\n\n```sh\n$ ls -al `which brew`\n```\n\n把 Homebrew 的用户和分组修改为 root 和 wheel\n\n```sh\n$ sudo chown root:wheel `which brew`\n```\n\n最后还原 Homebrew 的权限（安全）\n\n```sh\n$ sudo chown : `chown brew`\n```\n\n## Tip 4 : 利用 Shell 生成生成 ICON\n\n```sh\n#!/bin/sh\n#此脚本是用来生成 iPhone 和 iPad 所需 icon 的不同尺寸的，最好是准备一张 1024x1024 的 Icon 图片\n\n\nfilename=\"icon.png\"\n\ndirname=\"icon\"\n\nname_array=(\"Icon-20.png\" \"Icon-20@2x.png\" \"Icon-20@3x.png\"\n\"Icon-29.png\" \"Icon-29@2x.png\" \"Icon-29@3x.png\"\n\"Icon-40.png\" \"Icon-40@2x.png\" \"Icon-40@3x.png\"\n\"Icon-60@2x.png\" \"Icon-60@3x.png\"\n\"Icon-76.png\" \"Icon-76@2x.png\"\n\"Icon-83.5@2x.png\")\nsize_array=(\"20\" \"40\" \"60\"\n\"29\" \"58\" \"87\"\n\"40\" \"80\" \"120\"\n\"120\" \"180\"\n\"76\" \"152\"\n\"167\")\n\nmkdir $dirname\n\nfor ((i=0;i<${#name_array[@]};++i)); do\n    m_dir=$dirname/${name_array[i]}\n    cp $filename $m_dir\n    sips -Z ${size_array[i]} $m_dir\n# 如果图片是 sRGB 的话，使用下面的命令\n#    sips --matchTo '/System/Library/ColorSync/Profiles/sRGB Profile.icc' -Z ${size_array[i]} $m_dir \ndone\n```\n\n## Tip5 : 使用 Python 共享当前目录\n\n利用下面的命令可以暂时开启一个端口号为 8000 的 HTTP 服务，其他人只需要在浏览器输入 `http://ip-address:8000` 即可浏览共享目录下的文件\n\n```sh\n$ python -m SimpleHTTPServer\n```\n\n\n## Tip6 : 加密和解密文件\n\n* 加密\n\n```sh\n$ tar czf - {SRC_DIR} | openssl des3 -salt -k \"{KEY}\" -out {DIST_PACKAGE}.tar.gz\n```\n\n示例：\n\n目录名 `paris_code`，秘钥 `meta#com`，输出包 `paris_code_20161008.tar.gz`\n\n```sh\n$ tar czf - paris_code | openssl des3 -salt -k \"meta#com\" -out paris_code_20161008.tar.gz\n```\n\n* 解密\n\n第一步：获取代码压缩文件包\n\n下载地址 `http://XXXX.com/paris_code_20161008.tar.gz`\n\n第二步：解密文件（OS X / Linux only）\n\n在 Terminal 进入压缩文件包同级目录，输入以下命令：\n\n```sh\n$ openssl des3 -d -k \"meta#com\" -salt -in paris_code_20161008.tar.gz | tar xzf -\n```\n\n## Tip7: iOS 打包命令\n\n```sh\necho \"----------------\"\necho \"Begin Build!\"\nPROJECT_NAME=\"orbit\"\nBUILD_DATE=\"$(date +'%Y%m%d')\"\nBUNDLE_ID=\"com.meta.paris\"\ncd ${WORKSPACE}\n\n#/usr/local/bin/npm install\n\nif [ -d \"${WORKSPACE}/build\" ]; then \n    if ls ${WORKSPACE}/build/**/*.ipa 1> /dev/null 2>&1; then\n        rm -rf ${WORKSPACE}/build/**/*.ipa; \n    fi;\n    if ls ${WORKSPACE}/build/**/*.xcarchive 1> /dev/null 2>&1; then\n        rm -rf ${WORKSPACE}/build/**/*.xcarchive; \n    fi;\nelse \n    mkdir ${WORKSPACE}/build; \nfi;\n\necho \"计算今天的 Build Version\"\nif [ -d \"${WORKSPACE}/build/${BUILD_DATE}\" ]; then \n   #如果不加上面的 if, Jenkins 无法直接执行下面的命令❓\n\tBUILD_DATE_COUNT=$(ls ${WORKSPACE}/build | grep \"^${BUILD_DATE}\" -c)\n    if [ ${BUILD_DATE_COUNT} -lt 10 ]; then\n        BUILD_DATE_COUNT=\"0${BUILD_DATE_COUNT}\"\n    fi;\n\tBUILD_VERSION=\"${BUILD_DATE}${BUILD_DATE_COUNT}\"\nelse \n  \tBUILD_VERSION=${BUILD_DATE}\nfi;\necho \"今天的 Build Version 是 ${BUILD_VERSION}\"\n\nif [ -d \"${WORKSPACE}/build/${BUILD_VERSION}\" ]; then \n    rm -rf ${WORKSPACE}/build/${BUILD_VERSION}; \nfi;\nmkdir ${WORKSPACE}/build/${BUILD_VERSION};\n\nif [ -d \"${WORKSPACE}/Enterprise.plist\" ]; then\n    rm ${WORKSPACE}/Enterprise.plist; \nfi;\n\n#http://www.matrixprojects.net/p/xcodebuild-export-options-plist/\nEnterprise='<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n        <key>teamID</key>\n        <string></string>\n        <key>method</key>\n        <string>app-store</string>\n        <key>uploadSymbols</key>\n        <true/>\n        <key>uploadBitcode</key>\n        <false/>\n</dict>\n</plist>'\necho ${Enterprise} > ${WORKSPACE}/Enterprise.plist\n\nsed -i '' 's/ProvisioningStyle = Automatic;/ProvisioningStyle = Manual;/g' \\\n${WORKSPACE}/${PROJECT_NAME}.xcodeproj/project.pbxproj\n\nsed -i '' 's/DEVELOPMENT_TEAM = .*;/DEVELOPMENT_TEAM = \"\";/g' \\\n${WORKSPACE}/${PROJECT_NAME}.xcodeproj/project.pbxproj\n\n#动态生成 Build Version\nsed -i '' \"/<key>CFBundleVersion<\\/key>/{N;s/<string>.*<\\/string>/<string>${BUILD_VERSION}<\\/string>/g;}\" \\\n${WORKSPACE}/${PROJECT_NAME}/${PROJECT_NAME}-Info.plist\n\nxcodebuild -workspace ${WORKSPACE}/${PROJECT_NAME}.xcworkspace \\\n-scheme ${PROJECT_NAME} -sdk iphoneos \\\nbuild CODE_SIGN_IDENTITY=\"iPhone Distribution: Beijing PS Technology Co., Ltd.\" \\\nPROVISIONING_PROFILE=\"\" \\\n-configuration Release clean archive \\\n-archivePath ${WORKSPACE}/build/${BUILD_VERSION}/${PROJECT_NAME}.xcarchive\n\nxcodebuild -exportArchive -exportOptionsPlist ${WORKSPACE}/Enterprise.plist \\\n-archivePath ${WORKSPACE}/build/${BUILD_VERSION}/${PROJECT_NAME}.xcarchive \\\n-exportPath ${WORKSPACE}/build/${BUILD_VERSION}/\n\necho \"----------------\"\necho \"Build successfully!\"\n\n\necho \"Begin Upload to itunes...\"\n#Use [shenzhen](https://github.com/nomad/shenzhen) to upload the ipa file to itunes connect.\n/usr/local/bin/ipa distribute:itunesconnect -f ${WORKSPACE}/build/${BUILD_VERSION}/${PROJECT_NAME}.ipa -a YourAppleID -p YourPassword -i ${BUNDLE_ID} --upload\necho \"Upload successfully!\"\n```\n\n\n## Tip8: 重置 iOS 模拟器\n\n相信各位在做 iOS 开发的同学都会碰到模拟器上各种神奇的现象，通过重置 iOS 模拟器基本上可以解决大部分问题：\n\n```Sh\n// 退出当前的所有模拟器\n$ osascript -e 'tell application \"iOS Simulator\" to quit'\n$ osascript -e 'tell application \"Simulator\" to quit'\n\n// 清掉之前使用模拟器产生的所有内容\n$ xcrun simctl erase all\n```\n\n","source":"_posts/Shell-Tip.md","raw":"---\ntitle: Shell Tip\nauthor: 帕帕\ndate: 2017-09-05 15:30:56 +0800\ncategories: 技术\ntags: [tip] \n---\n\n> 记录日常中用到的一些 Bash 脚本，经常更新\n\n## Tip 1 : 修改文件里面的内容\n早上产品有一个小需求就是把工程中的所有网页的标题修改为黑米流量通，可以使用以下命令来实现\n\n```sh\n$ find . -name '*.html' -print0 | xargs -0 sed -i '' -e 's/<title>.*<\\/title>/<title>黑米流量通<\\/title>/g'\n```\n\n* `find`          查找命令，可以用 man find 查看更多的信息\n* `.`             代表当前目录\n* `-name`         find 命令的参数，表示要查找的文件名\n* `-print0`       是一种不换行的输出格式，以 ASCII NUL 字符（也就是\\0）作为分隔符。上面的例子可能是 `a.html\\0b.html\\0c.html`\n* `|`             这是一个管道符，表示把前面命令的输出作为后面命令的输入\n* `xargs`         是用来构造输入参数，并且循环执行每一个参数\n* `-0`            表示让 xargs 使用 ASCII NUL 来分隔参数。上面的例子将被分隔成 `a.html` `b.html` `c.html` 三个参数依次执行\n* `sed`           这是一个流编辑器，如果传的是文件名会把文件内容读入内存，如果只是普通字符串就会把字符串读入内存\n* `-i`            表示要把原来的文件内容做一次备份，后面的 `''` 是表示要备份的文件名字，如果没有文件名字就表示不需要备份\n* `-e`            表示后面的字符串是一个命令，需要被执行\n* `s/old/new/g`   这个是用来替换字符串的命令\n\n## Tip 2 : 查找文件的内容\n把匹配的文件内容的相关文件列出来\n\n```sh\n$ find . -name '*.html' -print0 | xargs -0 grep 'PATTERN'\n```\n\n## Tip 3 : 解决 Homebrew 的权限问题\n查看 Homebrew 的所有权\n\n```sh\n$ ls -al `which brew`\n```\n\n把 Homebrew 的用户和分组修改为 root 和 wheel\n\n```sh\n$ sudo chown root:wheel `which brew`\n```\n\n最后还原 Homebrew 的权限（安全）\n\n```sh\n$ sudo chown : `chown brew`\n```\n\n## Tip 4 : 利用 Shell 生成生成 ICON\n\n```sh\n#!/bin/sh\n#此脚本是用来生成 iPhone 和 iPad 所需 icon 的不同尺寸的，最好是准备一张 1024x1024 的 Icon 图片\n\n\nfilename=\"icon.png\"\n\ndirname=\"icon\"\n\nname_array=(\"Icon-20.png\" \"Icon-20@2x.png\" \"Icon-20@3x.png\"\n\"Icon-29.png\" \"Icon-29@2x.png\" \"Icon-29@3x.png\"\n\"Icon-40.png\" \"Icon-40@2x.png\" \"Icon-40@3x.png\"\n\"Icon-60@2x.png\" \"Icon-60@3x.png\"\n\"Icon-76.png\" \"Icon-76@2x.png\"\n\"Icon-83.5@2x.png\")\nsize_array=(\"20\" \"40\" \"60\"\n\"29\" \"58\" \"87\"\n\"40\" \"80\" \"120\"\n\"120\" \"180\"\n\"76\" \"152\"\n\"167\")\n\nmkdir $dirname\n\nfor ((i=0;i<${#name_array[@]};++i)); do\n    m_dir=$dirname/${name_array[i]}\n    cp $filename $m_dir\n    sips -Z ${size_array[i]} $m_dir\n# 如果图片是 sRGB 的话，使用下面的命令\n#    sips --matchTo '/System/Library/ColorSync/Profiles/sRGB Profile.icc' -Z ${size_array[i]} $m_dir \ndone\n```\n\n## Tip5 : 使用 Python 共享当前目录\n\n利用下面的命令可以暂时开启一个端口号为 8000 的 HTTP 服务，其他人只需要在浏览器输入 `http://ip-address:8000` 即可浏览共享目录下的文件\n\n```sh\n$ python -m SimpleHTTPServer\n```\n\n\n## Tip6 : 加密和解密文件\n\n* 加密\n\n```sh\n$ tar czf - {SRC_DIR} | openssl des3 -salt -k \"{KEY}\" -out {DIST_PACKAGE}.tar.gz\n```\n\n示例：\n\n目录名 `paris_code`，秘钥 `meta#com`，输出包 `paris_code_20161008.tar.gz`\n\n```sh\n$ tar czf - paris_code | openssl des3 -salt -k \"meta#com\" -out paris_code_20161008.tar.gz\n```\n\n* 解密\n\n第一步：获取代码压缩文件包\n\n下载地址 `http://XXXX.com/paris_code_20161008.tar.gz`\n\n第二步：解密文件（OS X / Linux only）\n\n在 Terminal 进入压缩文件包同级目录，输入以下命令：\n\n```sh\n$ openssl des3 -d -k \"meta#com\" -salt -in paris_code_20161008.tar.gz | tar xzf -\n```\n\n## Tip7: iOS 打包命令\n\n```sh\necho \"----------------\"\necho \"Begin Build!\"\nPROJECT_NAME=\"orbit\"\nBUILD_DATE=\"$(date +'%Y%m%d')\"\nBUNDLE_ID=\"com.meta.paris\"\ncd ${WORKSPACE}\n\n#/usr/local/bin/npm install\n\nif [ -d \"${WORKSPACE}/build\" ]; then \n    if ls ${WORKSPACE}/build/**/*.ipa 1> /dev/null 2>&1; then\n        rm -rf ${WORKSPACE}/build/**/*.ipa; \n    fi;\n    if ls ${WORKSPACE}/build/**/*.xcarchive 1> /dev/null 2>&1; then\n        rm -rf ${WORKSPACE}/build/**/*.xcarchive; \n    fi;\nelse \n    mkdir ${WORKSPACE}/build; \nfi;\n\necho \"计算今天的 Build Version\"\nif [ -d \"${WORKSPACE}/build/${BUILD_DATE}\" ]; then \n   #如果不加上面的 if, Jenkins 无法直接执行下面的命令❓\n\tBUILD_DATE_COUNT=$(ls ${WORKSPACE}/build | grep \"^${BUILD_DATE}\" -c)\n    if [ ${BUILD_DATE_COUNT} -lt 10 ]; then\n        BUILD_DATE_COUNT=\"0${BUILD_DATE_COUNT}\"\n    fi;\n\tBUILD_VERSION=\"${BUILD_DATE}${BUILD_DATE_COUNT}\"\nelse \n  \tBUILD_VERSION=${BUILD_DATE}\nfi;\necho \"今天的 Build Version 是 ${BUILD_VERSION}\"\n\nif [ -d \"${WORKSPACE}/build/${BUILD_VERSION}\" ]; then \n    rm -rf ${WORKSPACE}/build/${BUILD_VERSION}; \nfi;\nmkdir ${WORKSPACE}/build/${BUILD_VERSION};\n\nif [ -d \"${WORKSPACE}/Enterprise.plist\" ]; then\n    rm ${WORKSPACE}/Enterprise.plist; \nfi;\n\n#http://www.matrixprojects.net/p/xcodebuild-export-options-plist/\nEnterprise='<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n        <key>teamID</key>\n        <string></string>\n        <key>method</key>\n        <string>app-store</string>\n        <key>uploadSymbols</key>\n        <true/>\n        <key>uploadBitcode</key>\n        <false/>\n</dict>\n</plist>'\necho ${Enterprise} > ${WORKSPACE}/Enterprise.plist\n\nsed -i '' 's/ProvisioningStyle = Automatic;/ProvisioningStyle = Manual;/g' \\\n${WORKSPACE}/${PROJECT_NAME}.xcodeproj/project.pbxproj\n\nsed -i '' 's/DEVELOPMENT_TEAM = .*;/DEVELOPMENT_TEAM = \"\";/g' \\\n${WORKSPACE}/${PROJECT_NAME}.xcodeproj/project.pbxproj\n\n#动态生成 Build Version\nsed -i '' \"/<key>CFBundleVersion<\\/key>/{N;s/<string>.*<\\/string>/<string>${BUILD_VERSION}<\\/string>/g;}\" \\\n${WORKSPACE}/${PROJECT_NAME}/${PROJECT_NAME}-Info.plist\n\nxcodebuild -workspace ${WORKSPACE}/${PROJECT_NAME}.xcworkspace \\\n-scheme ${PROJECT_NAME} -sdk iphoneos \\\nbuild CODE_SIGN_IDENTITY=\"iPhone Distribution: Beijing PS Technology Co., Ltd.\" \\\nPROVISIONING_PROFILE=\"\" \\\n-configuration Release clean archive \\\n-archivePath ${WORKSPACE}/build/${BUILD_VERSION}/${PROJECT_NAME}.xcarchive\n\nxcodebuild -exportArchive -exportOptionsPlist ${WORKSPACE}/Enterprise.plist \\\n-archivePath ${WORKSPACE}/build/${BUILD_VERSION}/${PROJECT_NAME}.xcarchive \\\n-exportPath ${WORKSPACE}/build/${BUILD_VERSION}/\n\necho \"----------------\"\necho \"Build successfully!\"\n\n\necho \"Begin Upload to itunes...\"\n#Use [shenzhen](https://github.com/nomad/shenzhen) to upload the ipa file to itunes connect.\n/usr/local/bin/ipa distribute:itunesconnect -f ${WORKSPACE}/build/${BUILD_VERSION}/${PROJECT_NAME}.ipa -a YourAppleID -p YourPassword -i ${BUNDLE_ID} --upload\necho \"Upload successfully!\"\n```\n\n\n## Tip8: 重置 iOS 模拟器\n\n相信各位在做 iOS 开发的同学都会碰到模拟器上各种神奇的现象，通过重置 iOS 模拟器基本上可以解决大部分问题：\n\n```Sh\n// 退出当前的所有模拟器\n$ osascript -e 'tell application \"iOS Simulator\" to quit'\n$ osascript -e 'tell application \"Simulator\" to quit'\n\n// 清掉之前使用模拟器产生的所有内容\n$ xcrun simctl erase all\n```\n\n","slug":"Shell-Tip","published":1,"updated":"2018-05-24T10:45:51.020Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo44p6v7000darvbdjv406hi","content":"<blockquote>\n<p>记录日常中用到的一些 Bash 脚本，经常更新</p>\n</blockquote>\n<h2 id=\"Tip-1-修改文件里面的内容\"><a href=\"#Tip-1-修改文件里面的内容\" class=\"headerlink\" title=\"Tip 1 : 修改文件里面的内容\"></a>Tip 1 : 修改文件里面的内容</h2><p>早上产品有一个小需求就是把工程中的所有网页的标题修改为黑米流量通，可以使用以下命令来实现</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ find . -name <span class=\"string\">'*.html'</span> -print0 | xargs -0 sed -i <span class=\"string\">''</span> -e <span class=\"string\">'s/&lt;title&gt;.*&lt;\\/title&gt;/&lt;title&gt;黑米流量通&lt;\\/title&gt;/g'</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>find</code>          查找命令，可以用 man find 查看更多的信息</li>\n<li><code>.</code>             代表当前目录</li>\n<li><code>-name</code>         find 命令的参数，表示要查找的文件名</li>\n<li><code>-print0</code>       是一种不换行的输出格式，以 ASCII NUL 字符（也就是\\0）作为分隔符。上面的例子可能是 <code>a.html\\0b.html\\0c.html</code></li>\n<li><code>|</code>             这是一个管道符，表示把前面命令的输出作为后面命令的输入</li>\n<li><code>xargs</code>         是用来构造输入参数，并且循环执行每一个参数</li>\n<li><code>-0</code>            表示让 xargs 使用 ASCII NUL 来分隔参数。上面的例子将被分隔成 <code>a.html</code> <code>b.html</code> <code>c.html</code> 三个参数依次执行</li>\n<li><code>sed</code>           这是一个流编辑器，如果传的是文件名会把文件内容读入内存，如果只是普通字符串就会把字符串读入内存</li>\n<li><code>-i</code>            表示要把原来的文件内容做一次备份，后面的 <code>&#39;&#39;</code> 是表示要备份的文件名字，如果没有文件名字就表示不需要备份</li>\n<li><code>-e</code>            表示后面的字符串是一个命令，需要被执行</li>\n<li><code>s/old/new/g</code>   这个是用来替换字符串的命令</li>\n</ul>\n<h2 id=\"Tip-2-查找文件的内容\"><a href=\"#Tip-2-查找文件的内容\" class=\"headerlink\" title=\"Tip 2 : 查找文件的内容\"></a>Tip 2 : 查找文件的内容</h2><p>把匹配的文件内容的相关文件列出来</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ find . -name <span class=\"string\">'*.html'</span> -print0 | xargs -0 grep <span class=\"string\">'PATTERN'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Tip-3-解决-Homebrew-的权限问题\"><a href=\"#Tip-3-解决-Homebrew-的权限问题\" class=\"headerlink\" title=\"Tip 3 : 解决 Homebrew 的权限问题\"></a>Tip 3 : 解决 Homebrew 的权限问题</h2><p>查看 Homebrew 的所有权</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls -al `<span class=\"built_in\">which</span> brew`</span><br></pre></td></tr></table></figure>\n<p>把 Homebrew 的用户和分组修改为 root 和 wheel</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo chown root:wheel `<span class=\"built_in\">which</span> brew`</span><br></pre></td></tr></table></figure>\n<p>最后还原 Homebrew 的权限（安全）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo chown : `chown brew`</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tip-4-利用-Shell-生成生成-ICON\"><a href=\"#Tip-4-利用-Shell-生成生成-ICON\" class=\"headerlink\" title=\"Tip 4 : 利用 Shell 生成生成 ICON\"></a>Tip 4 : 利用 Shell 生成生成 ICON</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\">#此脚本是用来生成 iPhone 和 iPad 所需 icon 的不同尺寸的，最好是准备一张 1024x1024 的 Icon 图片</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">filename=<span class=\"string\">\"icon.png\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">dirname=<span class=\"string\">\"icon\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">name_array=(<span class=\"string\">\"Icon-20.png\"</span> <span class=\"string\">\"Icon-20@2x.png\"</span> <span class=\"string\">\"Icon-20@3x.png\"</span></span><br><span class=\"line\"><span class=\"string\">\"Icon-29.png\"</span> <span class=\"string\">\"Icon-29@2x.png\"</span> <span class=\"string\">\"Icon-29@3x.png\"</span></span><br><span class=\"line\"><span class=\"string\">\"Icon-40.png\"</span> <span class=\"string\">\"Icon-40@2x.png\"</span> <span class=\"string\">\"Icon-40@3x.png\"</span></span><br><span class=\"line\"><span class=\"string\">\"Icon-60@2x.png\"</span> <span class=\"string\">\"Icon-60@3x.png\"</span></span><br><span class=\"line\"><span class=\"string\">\"Icon-76.png\"</span> <span class=\"string\">\"Icon-76@2x.png\"</span></span><br><span class=\"line\"><span class=\"string\">\"Icon-83.5@2x.png\"</span>)</span><br><span class=\"line\">size_array=(<span class=\"string\">\"20\"</span> <span class=\"string\">\"40\"</span> <span class=\"string\">\"60\"</span></span><br><span class=\"line\"><span class=\"string\">\"29\"</span> <span class=\"string\">\"58\"</span> <span class=\"string\">\"87\"</span></span><br><span class=\"line\"><span class=\"string\">\"40\"</span> <span class=\"string\">\"80\"</span> <span class=\"string\">\"120\"</span></span><br><span class=\"line\"><span class=\"string\">\"120\"</span> <span class=\"string\">\"180\"</span></span><br><span class=\"line\"><span class=\"string\">\"76\"</span> <span class=\"string\">\"152\"</span></span><br><span class=\"line\"><span class=\"string\">\"167\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir <span class=\"variable\">$dirname</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ((i=0;i&lt;<span class=\"variable\">$&#123;#name_array[@]&#125;</span>;++i)); <span class=\"keyword\">do</span></span><br><span class=\"line\">    m_dir=<span class=\"variable\">$dirname</span>/<span class=\"variable\">$&#123;name_array[i]&#125;</span></span><br><span class=\"line\">    cp <span class=\"variable\">$filename</span> <span class=\"variable\">$m_dir</span></span><br><span class=\"line\">    sips -Z <span class=\"variable\">$&#123;size_array[i]&#125;</span> <span class=\"variable\">$m_dir</span></span><br><span class=\"line\"><span class=\"comment\"># 如果图片是 sRGB 的话，使用下面的命令</span></span><br><span class=\"line\"><span class=\"comment\">#    sips --matchTo '/System/Library/ColorSync/Profiles/sRGB Profile.icc' -Z $&#123;size_array[i]&#125; $m_dir </span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Tip5-使用-Python-共享当前目录\"><a href=\"#Tip5-使用-Python-共享当前目录\" class=\"headerlink\" title=\"Tip5 : 使用 Python 共享当前目录\"></a>Tip5 : 使用 Python 共享当前目录</h2><p>利用下面的命令可以暂时开启一个端口号为 8000 的 HTTP 服务，其他人只需要在浏览器输入 <code>http://ip-address:8000</code> 即可浏览共享目录下的文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python -m SimpleHTTPServer</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tip6-加密和解密文件\"><a href=\"#Tip6-加密和解密文件\" class=\"headerlink\" title=\"Tip6 : 加密和解密文件\"></a>Tip6 : 加密和解密文件</h2><ul>\n<li>加密</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar czf - &#123;SRC_DIR&#125; | openssl des3 -salt -k <span class=\"string\">\"&#123;KEY&#125;\"</span> -out &#123;DIST_PACKAGE&#125;.tar.gz</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<p>目录名 <code>paris_code</code>，秘钥 <code>meta#com</code>，输出包 <code>paris_code_20161008.tar.gz</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar czf - paris_code | openssl des3 -salt -k <span class=\"string\">\"meta#com\"</span> -out paris_code_20161008.tar.gz</span><br></pre></td></tr></table></figure>\n<ul>\n<li>解密</li>\n</ul>\n<p>第一步：获取代码压缩文件包</p>\n<p>下载地址 <code>http://XXXX.com/paris_code_20161008.tar.gz</code></p>\n<p>第二步：解密文件（OS X / Linux only）</p>\n<p>在 Terminal 进入压缩文件包同级目录，输入以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ openssl des3 -d -k <span class=\"string\">\"meta#com\"</span> -salt -<span class=\"keyword\">in</span> paris_code_20161008.tar.gz | tar xzf -</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tip7-iOS-打包命令\"><a href=\"#Tip7-iOS-打包命令\" class=\"headerlink\" title=\"Tip7: iOS 打包命令\"></a>Tip7: iOS 打包命令</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"----------------\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Begin Build!\"</span></span><br><span class=\"line\">PROJECT_NAME=<span class=\"string\">\"orbit\"</span></span><br><span class=\"line\">BUILD_DATE=<span class=\"string\">\"<span class=\"variable\">$(date +'%Y%m%d')</span>\"</span></span><br><span class=\"line\">BUNDLE_ID=<span class=\"string\">\"com.meta.paris\"</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$&#123;WORKSPACE&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#/usr/local/bin/npm install</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -d <span class=\"string\">\"<span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build\"</span> ]; <span class=\"keyword\">then</span> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ls <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build/**/*.ipa 1&gt; /dev/null 2&gt;&amp;1; <span class=\"keyword\">then</span></span><br><span class=\"line\">        rm -rf <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build/**/*.ipa; </span><br><span class=\"line\">    <span class=\"keyword\">fi</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ls <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build/**/*.xcarchive 1&gt; /dev/null 2&gt;&amp;1; <span class=\"keyword\">then</span></span><br><span class=\"line\">        rm -rf <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build/**/*.xcarchive; </span><br><span class=\"line\">    <span class=\"keyword\">fi</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span> </span><br><span class=\"line\">    mkdir <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build; </span><br><span class=\"line\"><span class=\"keyword\">fi</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"计算今天的 Build Version\"</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -d <span class=\"string\">\"<span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build/<span class=\"variable\">$&#123;BUILD_DATE&#125;</span>\"</span> ]; <span class=\"keyword\">then</span> </span><br><span class=\"line\">   <span class=\"comment\">#如果不加上面的 if, Jenkins 无法直接执行下面的命令❓</span></span><br><span class=\"line\">\tBUILD_DATE_COUNT=$(ls <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build | grep <span class=\"string\">\"^<span class=\"variable\">$&#123;BUILD_DATE&#125;</span>\"</span> -c)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$&#123;BUILD_DATE_COUNT&#125;</span> -lt 10 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        BUILD_DATE_COUNT=<span class=\"string\">\"0<span class=\"variable\">$&#123;BUILD_DATE_COUNT&#125;</span>\"</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span>;</span><br><span class=\"line\">\tBUILD_VERSION=<span class=\"string\">\"<span class=\"variable\">$&#123;BUILD_DATE&#125;</span><span class=\"variable\">$&#123;BUILD_DATE_COUNT&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> </span><br><span class=\"line\">  \tBUILD_VERSION=<span class=\"variable\">$&#123;BUILD_DATE&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span>;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"今天的 Build Version 是 <span class=\"variable\">$&#123;BUILD_VERSION&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -d <span class=\"string\">\"<span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build/<span class=\"variable\">$&#123;BUILD_VERSION&#125;</span>\"</span> ]; <span class=\"keyword\">then</span> </span><br><span class=\"line\">    rm -rf <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build/<span class=\"variable\">$&#123;BUILD_VERSION&#125;</span>; </span><br><span class=\"line\"><span class=\"keyword\">fi</span>;</span><br><span class=\"line\">mkdir <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build/<span class=\"variable\">$&#123;BUILD_VERSION&#125;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -d <span class=\"string\">\"<span class=\"variable\">$&#123;WORKSPACE&#125;</span>/Enterprise.plist\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    rm <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/Enterprise.plist; </span><br><span class=\"line\"><span class=\"keyword\">fi</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#http://www.matrixprojects.net/p/xcodebuild-export-options-plist/</span></span><br><span class=\"line\">Enterprise=<span class=\"string\">'&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;plist version=\"1.0\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;dict&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;key&gt;teamID&lt;/key&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;string&gt;&lt;/string&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;key&gt;method&lt;/key&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;string&gt;app-store&lt;/string&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;key&gt;uploadSymbols&lt;/key&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;true/&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;key&gt;uploadBitcode&lt;/key&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;false/&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/dict&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/plist&gt;'</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;Enterprise&#125;</span> &gt; <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/Enterprise.plist</span><br><span class=\"line\"></span><br><span class=\"line\">sed -i <span class=\"string\">''</span> <span class=\"string\">'s/ProvisioningStyle = Automatic;/ProvisioningStyle = Manual;/g'</span> \\</span><br><span class=\"line\"><span class=\"variable\">$&#123;WORKSPACE&#125;</span>/<span class=\"variable\">$&#123;PROJECT_NAME&#125;</span>.xcodeproj/project.pbxproj</span><br><span class=\"line\"></span><br><span class=\"line\">sed -i <span class=\"string\">''</span> <span class=\"string\">'s/DEVELOPMENT_TEAM = .*;/DEVELOPMENT_TEAM = \"\";/g'</span> \\</span><br><span class=\"line\"><span class=\"variable\">$&#123;WORKSPACE&#125;</span>/<span class=\"variable\">$&#123;PROJECT_NAME&#125;</span>.xcodeproj/project.pbxproj</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#动态生成 Build Version</span></span><br><span class=\"line\">sed -i <span class=\"string\">''</span> <span class=\"string\">\"/&lt;key&gt;CFBundleVersion&lt;\\/key&gt;/&#123;N;s/&lt;string&gt;.*&lt;\\/string&gt;/&lt;string&gt;<span class=\"variable\">$&#123;BUILD_VERSION&#125;</span>&lt;\\/string&gt;/g;&#125;\"</span> \\</span><br><span class=\"line\"><span class=\"variable\">$&#123;WORKSPACE&#125;</span>/<span class=\"variable\">$&#123;PROJECT_NAME&#125;</span>/<span class=\"variable\">$&#123;PROJECT_NAME&#125;</span>-Info.plist</span><br><span class=\"line\"></span><br><span class=\"line\">xcodebuild -workspace <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/<span class=\"variable\">$&#123;PROJECT_NAME&#125;</span>.xcworkspace \\</span><br><span class=\"line\">-scheme <span class=\"variable\">$&#123;PROJECT_NAME&#125;</span> -sdk iphoneos \\</span><br><span class=\"line\">build CODE_SIGN_IDENTITY=<span class=\"string\">\"iPhone Distribution: Beijing PS Technology Co., Ltd.\"</span> \\</span><br><span class=\"line\">PROVISIONING_PROFILE=<span class=\"string\">\"\"</span> \\</span><br><span class=\"line\">-configuration Release clean archive \\</span><br><span class=\"line\">-archivePath <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build/<span class=\"variable\">$&#123;BUILD_VERSION&#125;</span>/<span class=\"variable\">$&#123;PROJECT_NAME&#125;</span>.xcarchive</span><br><span class=\"line\"></span><br><span class=\"line\">xcodebuild -exportArchive -exportOptionsPlist <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/Enterprise.plist \\</span><br><span class=\"line\">-archivePath <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build/<span class=\"variable\">$&#123;BUILD_VERSION&#125;</span>/<span class=\"variable\">$&#123;PROJECT_NAME&#125;</span>.xcarchive \\</span><br><span class=\"line\">-exportPath <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build/<span class=\"variable\">$&#123;BUILD_VERSION&#125;</span>/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"----------------\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Build successfully!\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Begin Upload to itunes...\"</span></span><br><span class=\"line\"><span class=\"comment\">#Use [shenzhen](https://github.com/nomad/shenzhen) to upload the ipa file to itunes connect.</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/bin/ipa distribute:itunesconnect -f <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build/<span class=\"variable\">$&#123;BUILD_VERSION&#125;</span>/<span class=\"variable\">$&#123;PROJECT_NAME&#125;</span>.ipa -a YourAppleID -p YourPassword -i <span class=\"variable\">$&#123;BUNDLE_ID&#125;</span> --upload</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Upload successfully!\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Tip8-重置-iOS-模拟器\"><a href=\"#Tip8-重置-iOS-模拟器\" class=\"headerlink\" title=\"Tip8: 重置 iOS 模拟器\"></a>Tip8: 重置 iOS 模拟器</h2><p>相信各位在做 iOS 开发的同学都会碰到模拟器上各种神奇的现象，通过重置 iOS 模拟器基本上可以解决大部分问题：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 退出当前的所有模拟器</span><br><span class=\"line\">$ osascript -e <span class=\"string\">'tell application \"iOS Simulator\" to quit'</span></span><br><span class=\"line\">$ osascript -e <span class=\"string\">'tell application \"Simulator\" to quit'</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 清掉之前使用模拟器产生的所有内容</span><br><span class=\"line\">$ xcrun simctl erase all</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>记录日常中用到的一些 Bash 脚本，经常更新</p>\n</blockquote>\n<h2 id=\"Tip-1-修改文件里面的内容\"><a href=\"#Tip-1-修改文件里面的内容\" class=\"headerlink\" title=\"Tip 1 : 修改文件里面的内容\"></a>Tip 1 : 修改文件里面的内容</h2><p>早上产品有一个小需求就是把工程中的所有网页的标题修改为黑米流量通，可以使用以下命令来实现</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ find . -name <span class=\"string\">'*.html'</span> -print0 | xargs -0 sed -i <span class=\"string\">''</span> -e <span class=\"string\">'s/&lt;title&gt;.*&lt;\\/title&gt;/&lt;title&gt;黑米流量通&lt;\\/title&gt;/g'</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>find</code>          查找命令，可以用 man find 查看更多的信息</li>\n<li><code>.</code>             代表当前目录</li>\n<li><code>-name</code>         find 命令的参数，表示要查找的文件名</li>\n<li><code>-print0</code>       是一种不换行的输出格式，以 ASCII NUL 字符（也就是\\0）作为分隔符。上面的例子可能是 <code>a.html\\0b.html\\0c.html</code></li>\n<li><code>|</code>             这是一个管道符，表示把前面命令的输出作为后面命令的输入</li>\n<li><code>xargs</code>         是用来构造输入参数，并且循环执行每一个参数</li>\n<li><code>-0</code>            表示让 xargs 使用 ASCII NUL 来分隔参数。上面的例子将被分隔成 <code>a.html</code> <code>b.html</code> <code>c.html</code> 三个参数依次执行</li>\n<li><code>sed</code>           这是一个流编辑器，如果传的是文件名会把文件内容读入内存，如果只是普通字符串就会把字符串读入内存</li>\n<li><code>-i</code>            表示要把原来的文件内容做一次备份，后面的 <code>&#39;&#39;</code> 是表示要备份的文件名字，如果没有文件名字就表示不需要备份</li>\n<li><code>-e</code>            表示后面的字符串是一个命令，需要被执行</li>\n<li><code>s/old/new/g</code>   这个是用来替换字符串的命令</li>\n</ul>\n<h2 id=\"Tip-2-查找文件的内容\"><a href=\"#Tip-2-查找文件的内容\" class=\"headerlink\" title=\"Tip 2 : 查找文件的内容\"></a>Tip 2 : 查找文件的内容</h2><p>把匹配的文件内容的相关文件列出来</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ find . -name <span class=\"string\">'*.html'</span> -print0 | xargs -0 grep <span class=\"string\">'PATTERN'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Tip-3-解决-Homebrew-的权限问题\"><a href=\"#Tip-3-解决-Homebrew-的权限问题\" class=\"headerlink\" title=\"Tip 3 : 解决 Homebrew 的权限问题\"></a>Tip 3 : 解决 Homebrew 的权限问题</h2><p>查看 Homebrew 的所有权</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ls -al `<span class=\"built_in\">which</span> brew`</span><br></pre></td></tr></table></figure>\n<p>把 Homebrew 的用户和分组修改为 root 和 wheel</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo chown root:wheel `<span class=\"built_in\">which</span> brew`</span><br></pre></td></tr></table></figure>\n<p>最后还原 Homebrew 的权限（安全）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo chown : `chown brew`</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tip-4-利用-Shell-生成生成-ICON\"><a href=\"#Tip-4-利用-Shell-生成生成-ICON\" class=\"headerlink\" title=\"Tip 4 : 利用 Shell 生成生成 ICON\"></a>Tip 4 : 利用 Shell 生成生成 ICON</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"comment\">#此脚本是用来生成 iPhone 和 iPad 所需 icon 的不同尺寸的，最好是准备一张 1024x1024 的 Icon 图片</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">filename=<span class=\"string\">\"icon.png\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">dirname=<span class=\"string\">\"icon\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">name_array=(<span class=\"string\">\"Icon-20.png\"</span> <span class=\"string\">\"Icon-20@2x.png\"</span> <span class=\"string\">\"Icon-20@3x.png\"</span></span><br><span class=\"line\"><span class=\"string\">\"Icon-29.png\"</span> <span class=\"string\">\"Icon-29@2x.png\"</span> <span class=\"string\">\"Icon-29@3x.png\"</span></span><br><span class=\"line\"><span class=\"string\">\"Icon-40.png\"</span> <span class=\"string\">\"Icon-40@2x.png\"</span> <span class=\"string\">\"Icon-40@3x.png\"</span></span><br><span class=\"line\"><span class=\"string\">\"Icon-60@2x.png\"</span> <span class=\"string\">\"Icon-60@3x.png\"</span></span><br><span class=\"line\"><span class=\"string\">\"Icon-76.png\"</span> <span class=\"string\">\"Icon-76@2x.png\"</span></span><br><span class=\"line\"><span class=\"string\">\"Icon-83.5@2x.png\"</span>)</span><br><span class=\"line\">size_array=(<span class=\"string\">\"20\"</span> <span class=\"string\">\"40\"</span> <span class=\"string\">\"60\"</span></span><br><span class=\"line\"><span class=\"string\">\"29\"</span> <span class=\"string\">\"58\"</span> <span class=\"string\">\"87\"</span></span><br><span class=\"line\"><span class=\"string\">\"40\"</span> <span class=\"string\">\"80\"</span> <span class=\"string\">\"120\"</span></span><br><span class=\"line\"><span class=\"string\">\"120\"</span> <span class=\"string\">\"180\"</span></span><br><span class=\"line\"><span class=\"string\">\"76\"</span> <span class=\"string\">\"152\"</span></span><br><span class=\"line\"><span class=\"string\">\"167\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir <span class=\"variable\">$dirname</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> ((i=0;i&lt;<span class=\"variable\">$&#123;#name_array[@]&#125;</span>;++i)); <span class=\"keyword\">do</span></span><br><span class=\"line\">    m_dir=<span class=\"variable\">$dirname</span>/<span class=\"variable\">$&#123;name_array[i]&#125;</span></span><br><span class=\"line\">    cp <span class=\"variable\">$filename</span> <span class=\"variable\">$m_dir</span></span><br><span class=\"line\">    sips -Z <span class=\"variable\">$&#123;size_array[i]&#125;</span> <span class=\"variable\">$m_dir</span></span><br><span class=\"line\"><span class=\"comment\"># 如果图片是 sRGB 的话，使用下面的命令</span></span><br><span class=\"line\"><span class=\"comment\">#    sips --matchTo '/System/Library/ColorSync/Profiles/sRGB Profile.icc' -Z $&#123;size_array[i]&#125; $m_dir </span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Tip5-使用-Python-共享当前目录\"><a href=\"#Tip5-使用-Python-共享当前目录\" class=\"headerlink\" title=\"Tip5 : 使用 Python 共享当前目录\"></a>Tip5 : 使用 Python 共享当前目录</h2><p>利用下面的命令可以暂时开启一个端口号为 8000 的 HTTP 服务，其他人只需要在浏览器输入 <code>http://ip-address:8000</code> 即可浏览共享目录下的文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python -m SimpleHTTPServer</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tip6-加密和解密文件\"><a href=\"#Tip6-加密和解密文件\" class=\"headerlink\" title=\"Tip6 : 加密和解密文件\"></a>Tip6 : 加密和解密文件</h2><ul>\n<li>加密</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar czf - &#123;SRC_DIR&#125; | openssl des3 -salt -k <span class=\"string\">\"&#123;KEY&#125;\"</span> -out &#123;DIST_PACKAGE&#125;.tar.gz</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<p>目录名 <code>paris_code</code>，秘钥 <code>meta#com</code>，输出包 <code>paris_code_20161008.tar.gz</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar czf - paris_code | openssl des3 -salt -k <span class=\"string\">\"meta#com\"</span> -out paris_code_20161008.tar.gz</span><br></pre></td></tr></table></figure>\n<ul>\n<li>解密</li>\n</ul>\n<p>第一步：获取代码压缩文件包</p>\n<p>下载地址 <code>http://XXXX.com/paris_code_20161008.tar.gz</code></p>\n<p>第二步：解密文件（OS X / Linux only）</p>\n<p>在 Terminal 进入压缩文件包同级目录，输入以下命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ openssl des3 -d -k <span class=\"string\">\"meta#com\"</span> -salt -<span class=\"keyword\">in</span> paris_code_20161008.tar.gz | tar xzf -</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tip7-iOS-打包命令\"><a href=\"#Tip7-iOS-打包命令\" class=\"headerlink\" title=\"Tip7: iOS 打包命令\"></a>Tip7: iOS 打包命令</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"----------------\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Begin Build!\"</span></span><br><span class=\"line\">PROJECT_NAME=<span class=\"string\">\"orbit\"</span></span><br><span class=\"line\">BUILD_DATE=<span class=\"string\">\"<span class=\"variable\">$(date +'%Y%m%d')</span>\"</span></span><br><span class=\"line\">BUNDLE_ID=<span class=\"string\">\"com.meta.paris\"</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$&#123;WORKSPACE&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#/usr/local/bin/npm install</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -d <span class=\"string\">\"<span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build\"</span> ]; <span class=\"keyword\">then</span> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ls <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build/**/*.ipa 1&gt; /dev/null 2&gt;&amp;1; <span class=\"keyword\">then</span></span><br><span class=\"line\">        rm -rf <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build/**/*.ipa; </span><br><span class=\"line\">    <span class=\"keyword\">fi</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ls <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build/**/*.xcarchive 1&gt; /dev/null 2&gt;&amp;1; <span class=\"keyword\">then</span></span><br><span class=\"line\">        rm -rf <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build/**/*.xcarchive; </span><br><span class=\"line\">    <span class=\"keyword\">fi</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span> </span><br><span class=\"line\">    mkdir <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build; </span><br><span class=\"line\"><span class=\"keyword\">fi</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"计算今天的 Build Version\"</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -d <span class=\"string\">\"<span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build/<span class=\"variable\">$&#123;BUILD_DATE&#125;</span>\"</span> ]; <span class=\"keyword\">then</span> </span><br><span class=\"line\">   <span class=\"comment\">#如果不加上面的 if, Jenkins 无法直接执行下面的命令❓</span></span><br><span class=\"line\">\tBUILD_DATE_COUNT=$(ls <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build | grep <span class=\"string\">\"^<span class=\"variable\">$&#123;BUILD_DATE&#125;</span>\"</span> -c)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$&#123;BUILD_DATE_COUNT&#125;</span> -lt 10 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        BUILD_DATE_COUNT=<span class=\"string\">\"0<span class=\"variable\">$&#123;BUILD_DATE_COUNT&#125;</span>\"</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span>;</span><br><span class=\"line\">\tBUILD_VERSION=<span class=\"string\">\"<span class=\"variable\">$&#123;BUILD_DATE&#125;</span><span class=\"variable\">$&#123;BUILD_DATE_COUNT&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> </span><br><span class=\"line\">  \tBUILD_VERSION=<span class=\"variable\">$&#123;BUILD_DATE&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span>;</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"今天的 Build Version 是 <span class=\"variable\">$&#123;BUILD_VERSION&#125;</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -d <span class=\"string\">\"<span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build/<span class=\"variable\">$&#123;BUILD_VERSION&#125;</span>\"</span> ]; <span class=\"keyword\">then</span> </span><br><span class=\"line\">    rm -rf <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build/<span class=\"variable\">$&#123;BUILD_VERSION&#125;</span>; </span><br><span class=\"line\"><span class=\"keyword\">fi</span>;</span><br><span class=\"line\">mkdir <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build/<span class=\"variable\">$&#123;BUILD_VERSION&#125;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -d <span class=\"string\">\"<span class=\"variable\">$&#123;WORKSPACE&#125;</span>/Enterprise.plist\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    rm <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/Enterprise.plist; </span><br><span class=\"line\"><span class=\"keyword\">fi</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#http://www.matrixprojects.net/p/xcodebuild-export-options-plist/</span></span><br><span class=\"line\">Enterprise=<span class=\"string\">'&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;plist version=\"1.0\"&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;dict&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;key&gt;teamID&lt;/key&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;string&gt;&lt;/string&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;key&gt;method&lt;/key&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;string&gt;app-store&lt;/string&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;key&gt;uploadSymbols&lt;/key&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;true/&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;key&gt;uploadBitcode&lt;/key&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;false/&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/dict&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/plist&gt;'</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;Enterprise&#125;</span> &gt; <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/Enterprise.plist</span><br><span class=\"line\"></span><br><span class=\"line\">sed -i <span class=\"string\">''</span> <span class=\"string\">'s/ProvisioningStyle = Automatic;/ProvisioningStyle = Manual;/g'</span> \\</span><br><span class=\"line\"><span class=\"variable\">$&#123;WORKSPACE&#125;</span>/<span class=\"variable\">$&#123;PROJECT_NAME&#125;</span>.xcodeproj/project.pbxproj</span><br><span class=\"line\"></span><br><span class=\"line\">sed -i <span class=\"string\">''</span> <span class=\"string\">'s/DEVELOPMENT_TEAM = .*;/DEVELOPMENT_TEAM = \"\";/g'</span> \\</span><br><span class=\"line\"><span class=\"variable\">$&#123;WORKSPACE&#125;</span>/<span class=\"variable\">$&#123;PROJECT_NAME&#125;</span>.xcodeproj/project.pbxproj</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#动态生成 Build Version</span></span><br><span class=\"line\">sed -i <span class=\"string\">''</span> <span class=\"string\">\"/&lt;key&gt;CFBundleVersion&lt;\\/key&gt;/&#123;N;s/&lt;string&gt;.*&lt;\\/string&gt;/&lt;string&gt;<span class=\"variable\">$&#123;BUILD_VERSION&#125;</span>&lt;\\/string&gt;/g;&#125;\"</span> \\</span><br><span class=\"line\"><span class=\"variable\">$&#123;WORKSPACE&#125;</span>/<span class=\"variable\">$&#123;PROJECT_NAME&#125;</span>/<span class=\"variable\">$&#123;PROJECT_NAME&#125;</span>-Info.plist</span><br><span class=\"line\"></span><br><span class=\"line\">xcodebuild -workspace <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/<span class=\"variable\">$&#123;PROJECT_NAME&#125;</span>.xcworkspace \\</span><br><span class=\"line\">-scheme <span class=\"variable\">$&#123;PROJECT_NAME&#125;</span> -sdk iphoneos \\</span><br><span class=\"line\">build CODE_SIGN_IDENTITY=<span class=\"string\">\"iPhone Distribution: Beijing PS Technology Co., Ltd.\"</span> \\</span><br><span class=\"line\">PROVISIONING_PROFILE=<span class=\"string\">\"\"</span> \\</span><br><span class=\"line\">-configuration Release clean archive \\</span><br><span class=\"line\">-archivePath <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build/<span class=\"variable\">$&#123;BUILD_VERSION&#125;</span>/<span class=\"variable\">$&#123;PROJECT_NAME&#125;</span>.xcarchive</span><br><span class=\"line\"></span><br><span class=\"line\">xcodebuild -exportArchive -exportOptionsPlist <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/Enterprise.plist \\</span><br><span class=\"line\">-archivePath <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build/<span class=\"variable\">$&#123;BUILD_VERSION&#125;</span>/<span class=\"variable\">$&#123;PROJECT_NAME&#125;</span>.xcarchive \\</span><br><span class=\"line\">-exportPath <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build/<span class=\"variable\">$&#123;BUILD_VERSION&#125;</span>/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"----------------\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Build successfully!\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Begin Upload to itunes...\"</span></span><br><span class=\"line\"><span class=\"comment\">#Use [shenzhen](https://github.com/nomad/shenzhen) to upload the ipa file to itunes connect.</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/bin/ipa distribute:itunesconnect -f <span class=\"variable\">$&#123;WORKSPACE&#125;</span>/build/<span class=\"variable\">$&#123;BUILD_VERSION&#125;</span>/<span class=\"variable\">$&#123;PROJECT_NAME&#125;</span>.ipa -a YourAppleID -p YourPassword -i <span class=\"variable\">$&#123;BUNDLE_ID&#125;</span> --upload</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"Upload successfully!\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Tip8-重置-iOS-模拟器\"><a href=\"#Tip8-重置-iOS-模拟器\" class=\"headerlink\" title=\"Tip8: 重置 iOS 模拟器\"></a>Tip8: 重置 iOS 模拟器</h2><p>相信各位在做 iOS 开发的同学都会碰到模拟器上各种神奇的现象，通过重置 iOS 模拟器基本上可以解决大部分问题：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 退出当前的所有模拟器</span><br><span class=\"line\">$ osascript -e <span class=\"string\">'tell application \"iOS Simulator\" to quit'</span></span><br><span class=\"line\">$ osascript -e <span class=\"string\">'tell application \"Simulator\" to quit'</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 清掉之前使用模拟器产生的所有内容</span><br><span class=\"line\">$ xcrun simctl erase all</span><br></pre></td></tr></table></figure>\n"},{"title":"Swift High-Performance Tip 1：Array 和 ContiguousArray","author":"帕帕","date":"2017-09-05T15:30:56.000Z","thumbnail":"https://images.unsplash.com/photo-1485988412941-77a35537dae4?ixlib=rb-0.3.5&s=177fa5618e070b6d13cf5debd2034426&auto=format&fit=crop&w=160&q=100","_content":"\n> Array 是随机存储的（random-access）集合类型。\n\n> ContiguousArray 是连续存储（contiguously stored）的数组，并且不允许和 NSArray 进行桥接的。\n\n当我们的数组元素是 Class 或 @objc protocol 类型的话，并且我们不需要在 Objective-C 中使用该数组的话，那么我们最好使用 ContiguousArray。这是因为 Array 需要额外的资源来处理跟 NSArray 的桥接功能，但是 ContiguousArray 则不需要，所以 ContiguousArray 比 Array 的效率要高。\n\n```Swift\nclass A {\n\n}\n\n// 不要用Array: let array = Array<A>()\n\nlet contiguousArray = ContiguousArray<A>()\n```\n\n另外需要注意的是官方文档说如果数组元素不是 Class 和 @objc protocol 类型的话，Array 和 ContiguousArray 的效率是一样的。（我猜测是因为如果 Array 的元素都是 Struct 类型的话，它就不需要消耗资源来处理桥接的问题了。）\n\n> Efficiency is equivalent to that of Array, unless Element is a class or @objc protocol type, in which case using ContiguousArray may be more efficient.\n\n但是 [@Paul Hudson](https://twitter.com/twostraws) 在他的[《Pro Swift》](https://gumroad.com/l/proswift)中说他发现即使数组元素是 Struct 类型的话，ContiguousArray 也要比 Array 更快。我们来看看他给出的例子：\n\n```Swift\nlet array2 = Array<Int>(1...1000000)\nlet array3 = ContiguousArray<Int>(1...1000000)\n\nvar start = CFAbsoluteTimeGetCurrent()\narray2.reduce(0, combine: +)\nvar end = CFAbsoluteTimeGetCurrent() - start\nprint(\"Took \\(end) seconds\")\n\nstart = CFAbsoluteTimeGetCurrent()\narray3.reduce(0, combine: +)\nend = CFAbsoluteTimeGetCurrent() - start\nprint(\"Took \\(end) seconds\")\n```\n\n经过我的测试，上面的代码中 ContiguousArray 只用了0.19秒而 Array 用了0.38秒，所以 ContiguousArray 确实要比 Array 快。\n\n如果大家想在性能上有所提升的话，建议大家可以用 ContiguousArray 试一试。\n\n","source":"_posts/Swift-High-Performance-Tip 1：Array和ContiguousArray.md","raw":"---\ntitle: Swift High-Performance Tip 1：Array 和 ContiguousArray\nauthor: 帕帕\ndate: 2017-09-05 15:30:56 +0800\ncategories: 技术\ntags: [iOS, Swift]\nthumbnail: https://images.unsplash.com/photo-1485988412941-77a35537dae4?ixlib=rb-0.3.5&s=177fa5618e070b6d13cf5debd2034426&auto=format&fit=crop&w=160&q=100\n---\n\n> Array 是随机存储的（random-access）集合类型。\n\n> ContiguousArray 是连续存储（contiguously stored）的数组，并且不允许和 NSArray 进行桥接的。\n\n当我们的数组元素是 Class 或 @objc protocol 类型的话，并且我们不需要在 Objective-C 中使用该数组的话，那么我们最好使用 ContiguousArray。这是因为 Array 需要额外的资源来处理跟 NSArray 的桥接功能，但是 ContiguousArray 则不需要，所以 ContiguousArray 比 Array 的效率要高。\n\n```Swift\nclass A {\n\n}\n\n// 不要用Array: let array = Array<A>()\n\nlet contiguousArray = ContiguousArray<A>()\n```\n\n另外需要注意的是官方文档说如果数组元素不是 Class 和 @objc protocol 类型的话，Array 和 ContiguousArray 的效率是一样的。（我猜测是因为如果 Array 的元素都是 Struct 类型的话，它就不需要消耗资源来处理桥接的问题了。）\n\n> Efficiency is equivalent to that of Array, unless Element is a class or @objc protocol type, in which case using ContiguousArray may be more efficient.\n\n但是 [@Paul Hudson](https://twitter.com/twostraws) 在他的[《Pro Swift》](https://gumroad.com/l/proswift)中说他发现即使数组元素是 Struct 类型的话，ContiguousArray 也要比 Array 更快。我们来看看他给出的例子：\n\n```Swift\nlet array2 = Array<Int>(1...1000000)\nlet array3 = ContiguousArray<Int>(1...1000000)\n\nvar start = CFAbsoluteTimeGetCurrent()\narray2.reduce(0, combine: +)\nvar end = CFAbsoluteTimeGetCurrent() - start\nprint(\"Took \\(end) seconds\")\n\nstart = CFAbsoluteTimeGetCurrent()\narray3.reduce(0, combine: +)\nend = CFAbsoluteTimeGetCurrent() - start\nprint(\"Took \\(end) seconds\")\n```\n\n经过我的测试，上面的代码中 ContiguousArray 只用了0.19秒而 Array 用了0.38秒，所以 ContiguousArray 确实要比 Array 快。\n\n如果大家想在性能上有所提升的话，建议大家可以用 ContiguousArray 试一试。\n\n","slug":"Swift-High-Performance-Tip 1：Array和ContiguousArray","published":1,"updated":"2018-03-23T08:42:53.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo44p6v9000earvb5exys7qs","content":"<blockquote>\n<p>Array 是随机存储的（random-access）集合类型。</p>\n</blockquote>\n<blockquote>\n<p>ContiguousArray 是连续存储（contiguously stored）的数组，并且不允许和 NSArray 进行桥接的。</p>\n</blockquote>\n<p>当我们的数组元素是 Class 或 @objc protocol 类型的话，并且我们不需要在 Objective-C 中使用该数组的话，那么我们最好使用 ContiguousArray。这是因为 Array 需要额外的资源来处理跟 NSArray 的桥接功能，但是 ContiguousArray 则不需要，所以 ContiguousArray 比 Array 的效率要高。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不要用Array: let array = Array&lt;A&gt;()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> contiguousArray = <span class=\"type\">ContiguousArray</span>&lt;<span class=\"type\">A</span>&gt;()</span><br></pre></td></tr></table></figure>\n<p>另外需要注意的是官方文档说如果数组元素不是 Class 和 @objc protocol 类型的话，Array 和 ContiguousArray 的效率是一样的。（我猜测是因为如果 Array 的元素都是 Struct 类型的话，它就不需要消耗资源来处理桥接的问题了。）</p>\n<blockquote>\n<p>Efficiency is equivalent to that of Array, unless Element is a class or @objc protocol type, in which case using ContiguousArray may be more efficient.</p>\n</blockquote>\n<p>但是 <a href=\"https://twitter.com/twostraws\" target=\"_blank\" rel=\"noopener\">@Paul Hudson</a> 在他的<a href=\"https://gumroad.com/l/proswift\" target=\"_blank\" rel=\"noopener\">《Pro Swift》</a>中说他发现即使数组元素是 Struct 类型的话，ContiguousArray 也要比 Array 更快。我们来看看他给出的例子：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array2 = <span class=\"type\">Array</span>&lt;<span class=\"type\">Int</span>&gt;(<span class=\"number\">1</span>...<span class=\"number\">1000000</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> array3 = <span class=\"type\">ContiguousArray</span>&lt;<span class=\"type\">Int</span>&gt;(<span class=\"number\">1</span>...<span class=\"number\">1000000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> start = <span class=\"type\">CFAbsoluteTimeGetCurrent</span>()</span><br><span class=\"line\">array2.<span class=\"built_in\">reduce</span>(<span class=\"number\">0</span>, combine: +)</span><br><span class=\"line\"><span class=\"keyword\">var</span> end = <span class=\"type\">CFAbsoluteTimeGetCurrent</span>() - start</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Took <span class=\"subst\">\\(end)</span> seconds\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">start = <span class=\"type\">CFAbsoluteTimeGetCurrent</span>()</span><br><span class=\"line\">array3.<span class=\"built_in\">reduce</span>(<span class=\"number\">0</span>, combine: +)</span><br><span class=\"line\">end = <span class=\"type\">CFAbsoluteTimeGetCurrent</span>() - start</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Took <span class=\"subst\">\\(end)</span> seconds\"</span>)</span><br></pre></td></tr></table></figure>\n<p>经过我的测试，上面的代码中 ContiguousArray 只用了0.19秒而 Array 用了0.38秒，所以 ContiguousArray 确实要比 Array 快。</p>\n<p>如果大家想在性能上有所提升的话，建议大家可以用 ContiguousArray 试一试。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Array 是随机存储的（random-access）集合类型。</p>\n</blockquote>\n<blockquote>\n<p>ContiguousArray 是连续存储（contiguously stored）的数组，并且不允许和 NSArray 进行桥接的。</p>\n</blockquote>\n<p>当我们的数组元素是 Class 或 @objc protocol 类型的话，并且我们不需要在 Objective-C 中使用该数组的话，那么我们最好使用 ContiguousArray。这是因为 Array 需要额外的资源来处理跟 NSArray 的桥接功能，但是 ContiguousArray 则不需要，所以 ContiguousArray 比 Array 的效率要高。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 不要用Array: let array = Array&lt;A&gt;()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> contiguousArray = <span class=\"type\">ContiguousArray</span>&lt;<span class=\"type\">A</span>&gt;()</span><br></pre></td></tr></table></figure>\n<p>另外需要注意的是官方文档说如果数组元素不是 Class 和 @objc protocol 类型的话，Array 和 ContiguousArray 的效率是一样的。（我猜测是因为如果 Array 的元素都是 Struct 类型的话，它就不需要消耗资源来处理桥接的问题了。）</p>\n<blockquote>\n<p>Efficiency is equivalent to that of Array, unless Element is a class or @objc protocol type, in which case using ContiguousArray may be more efficient.</p>\n</blockquote>\n<p>但是 <a href=\"https://twitter.com/twostraws\" target=\"_blank\" rel=\"noopener\">@Paul Hudson</a> 在他的<a href=\"https://gumroad.com/l/proswift\" target=\"_blank\" rel=\"noopener\">《Pro Swift》</a>中说他发现即使数组元素是 Struct 类型的话，ContiguousArray 也要比 Array 更快。我们来看看他给出的例子：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> array2 = <span class=\"type\">Array</span>&lt;<span class=\"type\">Int</span>&gt;(<span class=\"number\">1</span>...<span class=\"number\">1000000</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> array3 = <span class=\"type\">ContiguousArray</span>&lt;<span class=\"type\">Int</span>&gt;(<span class=\"number\">1</span>...<span class=\"number\">1000000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> start = <span class=\"type\">CFAbsoluteTimeGetCurrent</span>()</span><br><span class=\"line\">array2.<span class=\"built_in\">reduce</span>(<span class=\"number\">0</span>, combine: +)</span><br><span class=\"line\"><span class=\"keyword\">var</span> end = <span class=\"type\">CFAbsoluteTimeGetCurrent</span>() - start</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Took <span class=\"subst\">\\(end)</span> seconds\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">start = <span class=\"type\">CFAbsoluteTimeGetCurrent</span>()</span><br><span class=\"line\">array3.<span class=\"built_in\">reduce</span>(<span class=\"number\">0</span>, combine: +)</span><br><span class=\"line\">end = <span class=\"type\">CFAbsoluteTimeGetCurrent</span>() - start</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Took <span class=\"subst\">\\(end)</span> seconds\"</span>)</span><br></pre></td></tr></table></figure>\n<p>经过我的测试，上面的代码中 ContiguousArray 只用了0.19秒而 Array 用了0.38秒，所以 ContiguousArray 确实要比 Array 快。</p>\n<p>如果大家想在性能上有所提升的话，建议大家可以用 ContiguousArray 试一试。</p>\n"},{"title":"Swift High-Performance Tip 2：final 和 private(fileprivate)","author":"帕帕","date":"2017-09-05T15:30:56.000Z","_content":"\n> Dynamic dispatch means that program has to determine at run time which method or property is being referred to and then perform an indirect call or indirect access.\n\n我们都知道 Swift 的 class 是可以被继承，function 和 property 是可以被重写的，而这就意味着 Swift 需要 dynamic dispatch 这种机制来完成这些功能。Swift 的 dynamic dispatch 首先会再 method table 查找方法，然后间接调用。很明显这种方式要比直接调用的效率慢，并且用间接调用的方式还会阻止编译器的一些优化无法实现。\n\n**那么应该怎么优化呢？**\n\n当我们明确的知道 class、function、property 是不需要 overridden，我们可以通过使用 final 和 private(fileprivate) 这些关键字减少动态派发的发生，从而有效的提高效率。\n\n在 Swift 中，如果被 final 或 private(fileprivate) 修饰的 class、function、property 是不能 overridden，并且调用这些 class、function、property 的时候不再通过 dynamic dispatch 去间接调用，而是直接调用。\n\n所以，通过在必要的代码中使用 final 或 private(fileprivate) 这些关键字进行优化的话，将可以有效提高的效率。\n\n**Whole Module Optimization**\n\nSwift 的 class、function、property 的默认权限都是 internal ，除非我们明确的加上 public 或 private(fileprivate) 关键字才能改变它们的默认权限。\n\n编译器在编译 Module 的时候都是对里面的源文件进行单独编译，这样的话编译器就无法确切的知道被 internal 修饰的 class、function、property 究竟有没有被 overridden。一旦我们开启 Whole Module Optimization 的优化选项，编译器就会同时对整个 Module 的所有源文件进行编译，这个时候编译器就可以知道哪些被 internal 修饰的 class、function、property 没有被 overridden，从而把它们的权限从 internal 修改为 final。这样的话，就可以减少 dynamic dispatch 的发生从而提高效率。\n\n开启编译优化选项的步骤如下：Xcode -> Build Settings -> Swift Compiler -> Optimization Level。\n\n![](http://i.imgur.com/0AxWEVA.jpg)\n\n---\n\n**参考文献**\n\n1. https://www.reddit.com/r/iOSProgramming/comments/3atu5w/does_swift_use_dynamic_method_dispatch_or_a/\n\n2. https://developer.apple.com/swift/blog/?id=27\n\n3. https://github.com/apple/swift/blob/3ef6c79e3c591cf31b8a853b1357e1b8c5771252/docs/OptimizationTips.rst#whole-module-optimizations\n\n","source":"_posts/Swift-High-Performance-Tip 2：final和private(fileprivate).md","raw":"---\ntitle: Swift High-Performance Tip 2：final 和 private(fileprivate)\nauthor: 帕帕\ndate: 2017-09-05 15:30:56 +0800\ncategories: 技术\ntags: [iOS, Swift]\n---\n\n> Dynamic dispatch means that program has to determine at run time which method or property is being referred to and then perform an indirect call or indirect access.\n\n我们都知道 Swift 的 class 是可以被继承，function 和 property 是可以被重写的，而这就意味着 Swift 需要 dynamic dispatch 这种机制来完成这些功能。Swift 的 dynamic dispatch 首先会再 method table 查找方法，然后间接调用。很明显这种方式要比直接调用的效率慢，并且用间接调用的方式还会阻止编译器的一些优化无法实现。\n\n**那么应该怎么优化呢？**\n\n当我们明确的知道 class、function、property 是不需要 overridden，我们可以通过使用 final 和 private(fileprivate) 这些关键字减少动态派发的发生，从而有效的提高效率。\n\n在 Swift 中，如果被 final 或 private(fileprivate) 修饰的 class、function、property 是不能 overridden，并且调用这些 class、function、property 的时候不再通过 dynamic dispatch 去间接调用，而是直接调用。\n\n所以，通过在必要的代码中使用 final 或 private(fileprivate) 这些关键字进行优化的话，将可以有效提高的效率。\n\n**Whole Module Optimization**\n\nSwift 的 class、function、property 的默认权限都是 internal ，除非我们明确的加上 public 或 private(fileprivate) 关键字才能改变它们的默认权限。\n\n编译器在编译 Module 的时候都是对里面的源文件进行单独编译，这样的话编译器就无法确切的知道被 internal 修饰的 class、function、property 究竟有没有被 overridden。一旦我们开启 Whole Module Optimization 的优化选项，编译器就会同时对整个 Module 的所有源文件进行编译，这个时候编译器就可以知道哪些被 internal 修饰的 class、function、property 没有被 overridden，从而把它们的权限从 internal 修改为 final。这样的话，就可以减少 dynamic dispatch 的发生从而提高效率。\n\n开启编译优化选项的步骤如下：Xcode -> Build Settings -> Swift Compiler -> Optimization Level。\n\n![](http://i.imgur.com/0AxWEVA.jpg)\n\n---\n\n**参考文献**\n\n1. https://www.reddit.com/r/iOSProgramming/comments/3atu5w/does_swift_use_dynamic_method_dispatch_or_a/\n\n2. https://developer.apple.com/swift/blog/?id=27\n\n3. https://github.com/apple/swift/blob/3ef6c79e3c591cf31b8a853b1357e1b8c5771252/docs/OptimizationTips.rst#whole-module-optimizations\n\n","slug":"Swift-High-Performance-Tip 2：final和private(fileprivate)","published":1,"updated":"2018-03-23T08:43:01.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo44p6vd000iarvbtcsntbqi","content":"<blockquote>\n<p>Dynamic dispatch means that program has to determine at run time which method or property is being referred to and then perform an indirect call or indirect access.</p>\n</blockquote>\n<p>我们都知道 Swift 的 class 是可以被继承，function 和 property 是可以被重写的，而这就意味着 Swift 需要 dynamic dispatch 这种机制来完成这些功能。Swift 的 dynamic dispatch 首先会再 method table 查找方法，然后间接调用。很明显这种方式要比直接调用的效率慢，并且用间接调用的方式还会阻止编译器的一些优化无法实现。</p>\n<p><strong>那么应该怎么优化呢？</strong></p>\n<p>当我们明确的知道 class、function、property 是不需要 overridden，我们可以通过使用 final 和 private(fileprivate) 这些关键字减少动态派发的发生，从而有效的提高效率。</p>\n<p>在 Swift 中，如果被 final 或 private(fileprivate) 修饰的 class、function、property 是不能 overridden，并且调用这些 class、function、property 的时候不再通过 dynamic dispatch 去间接调用，而是直接调用。</p>\n<p>所以，通过在必要的代码中使用 final 或 private(fileprivate) 这些关键字进行优化的话，将可以有效提高的效率。</p>\n<p><strong>Whole Module Optimization</strong></p>\n<p>Swift 的 class、function、property 的默认权限都是 internal ，除非我们明确的加上 public 或 private(fileprivate) 关键字才能改变它们的默认权限。</p>\n<p>编译器在编译 Module 的时候都是对里面的源文件进行单独编译，这样的话编译器就无法确切的知道被 internal 修饰的 class、function、property 究竟有没有被 overridden。一旦我们开启 Whole Module Optimization 的优化选项，编译器就会同时对整个 Module 的所有源文件进行编译，这个时候编译器就可以知道哪些被 internal 修饰的 class、function、property 没有被 overridden，从而把它们的权限从 internal 修改为 final。这样的话，就可以减少 dynamic dispatch 的发生从而提高效率。</p>\n<p>开启编译优化选项的步骤如下：Xcode -&gt; Build Settings -&gt; Swift Compiler -&gt; Optimization Level。</p>\n<p><img src=\"http://i.imgur.com/0AxWEVA.jpg\" alt=\"\"></p>\n<hr>\n<p><strong>参考文献</strong></p>\n<ol>\n<li><p><a href=\"https://www.reddit.com/r/iOSProgramming/comments/3atu5w/does_swift_use_dynamic_method_dispatch_or_a/\" target=\"_blank\" rel=\"noopener\">https://www.reddit.com/r/iOSProgramming/comments/3atu5w/does_swift_use_dynamic_method_dispatch_or_a/</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/swift/blog/?id=27\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/swift/blog/?id=27</a></p>\n</li>\n<li><p><a href=\"https://github.com/apple/swift/blob/3ef6c79e3c591cf31b8a853b1357e1b8c5771252/docs/OptimizationTips.rst#whole-module-optimizations\" target=\"_blank\" rel=\"noopener\">https://github.com/apple/swift/blob/3ef6c79e3c591cf31b8a853b1357e1b8c5771252/docs/OptimizationTips.rst#whole-module-optimizations</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Dynamic dispatch means that program has to determine at run time which method or property is being referred to and then perform an indirect call or indirect access.</p>\n</blockquote>\n<p>我们都知道 Swift 的 class 是可以被继承，function 和 property 是可以被重写的，而这就意味着 Swift 需要 dynamic dispatch 这种机制来完成这些功能。Swift 的 dynamic dispatch 首先会再 method table 查找方法，然后间接调用。很明显这种方式要比直接调用的效率慢，并且用间接调用的方式还会阻止编译器的一些优化无法实现。</p>\n<p><strong>那么应该怎么优化呢？</strong></p>\n<p>当我们明确的知道 class、function、property 是不需要 overridden，我们可以通过使用 final 和 private(fileprivate) 这些关键字减少动态派发的发生，从而有效的提高效率。</p>\n<p>在 Swift 中，如果被 final 或 private(fileprivate) 修饰的 class、function、property 是不能 overridden，并且调用这些 class、function、property 的时候不再通过 dynamic dispatch 去间接调用，而是直接调用。</p>\n<p>所以，通过在必要的代码中使用 final 或 private(fileprivate) 这些关键字进行优化的话，将可以有效提高的效率。</p>\n<p><strong>Whole Module Optimization</strong></p>\n<p>Swift 的 class、function、property 的默认权限都是 internal ，除非我们明确的加上 public 或 private(fileprivate) 关键字才能改变它们的默认权限。</p>\n<p>编译器在编译 Module 的时候都是对里面的源文件进行单独编译，这样的话编译器就无法确切的知道被 internal 修饰的 class、function、property 究竟有没有被 overridden。一旦我们开启 Whole Module Optimization 的优化选项，编译器就会同时对整个 Module 的所有源文件进行编译，这个时候编译器就可以知道哪些被 internal 修饰的 class、function、property 没有被 overridden，从而把它们的权限从 internal 修改为 final。这样的话，就可以减少 dynamic dispatch 的发生从而提高效率。</p>\n<p>开启编译优化选项的步骤如下：Xcode -&gt; Build Settings -&gt; Swift Compiler -&gt; Optimization Level。</p>\n<p><img src=\"http://i.imgur.com/0AxWEVA.jpg\" alt=\"\"></p>\n<hr>\n<p><strong>参考文献</strong></p>\n<ol>\n<li><p><a href=\"https://www.reddit.com/r/iOSProgramming/comments/3atu5w/does_swift_use_dynamic_method_dispatch_or_a/\" target=\"_blank\" rel=\"noopener\">https://www.reddit.com/r/iOSProgramming/comments/3atu5w/does_swift_use_dynamic_method_dispatch_or_a/</a></p>\n</li>\n<li><p><a href=\"https://developer.apple.com/swift/blog/?id=27\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/swift/blog/?id=27</a></p>\n</li>\n<li><p><a href=\"https://github.com/apple/swift/blob/3ef6c79e3c591cf31b8a853b1357e1b8c5771252/docs/OptimizationTips.rst#whole-module-optimizations\" target=\"_blank\" rel=\"noopener\">https://github.com/apple/swift/blob/3ef6c79e3c591cf31b8a853b1357e1b8c5771252/docs/OptimizationTips.rst#whole-module-optimizations</a></p>\n</li>\n</ol>\n"},{"title":"Swift High-Performance Tip 3：@objc 和 dynamic","author":"帕帕","date":"2018-05-24T18:48:01.000Z","thumbnail":"https://images.unsplash.com/photo-1507358522600-9f71e620c44e?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9606de2cffd6c619093871ef2d1c0e6f&auto=format&fit=crop&w=160&q=100","_content":"\n### @objc\n\n@objc 的作用是为了让 Objective-C 能够调用 Swift 的代码。其中的关键是 @objc 会生成一段 thunk 代码，Objective-C 通过这段 thunk 代码来间接调用 Swift 代码。如果是 Swift 来调用被 @objc 修饰的方法的时候，此时是不需要经过 thunk 代码就能直接调用的。\n\n所以我们可以想象，如果方法变得复杂或者被 @objc 修饰的方法数量变得越来越多会发生什么事？答案就是 thunk 代码变得越来越多，最后会导致我们的包大小也变得越来越大。并且动态链接器（dynamic linker）还需要整理这些 thunk 代码，最后导致加载时间也会变得越来越长。\n\n在 Swift3 的时候，编译器会推断出你的方法不是 Swift 专用的（比如有元组、结构体），就会默认给你的方法增加 @objc 的修饰。这种方式就导致了在 Swift3 的时候，会生成大量的 thunk 代码，并且这其中的大部分代码都不会被使用。所以 Swift4 默认是不做 @objc 的推断，只有我们手动添加了 @objc 之后，Objective-C 才能调用我们的 Swift 代码。 \n\n### dynamic\n\nSwift 的方法是通过 vtable 来调用的，使用 vtable 要比 Objective-C 的 runtime 更高效。\n\n而使用 dynamic 来修饰的方法，代表这个方法是可以被动态调用的。而由于目前 Swfit 还没有实现自己的 runtime 机制，所以动态调用只能够在 Objective-C 去调用。在  Swift4 使用 dynamic 修饰一个方法的时候，编译器会要求你还需要使用 @objc 去修饰。这是为了明确的告诉编译器这个方法是由 Objective-C 的 runtime 来调用的，同时也是为了兼容以后可能会出现的 Swift runtime 机制。\n\n由于目前使用 @objc dynamic 修饰的方法并不在 Swift 实例对象的 vtable 里面，所以 Swift 来调用该方法的时候依旧需要通过 thunk 代码来调用。\n\n### 总结\n\n![此图出自 https://swiftunboxed.com/interop/objc-dynamic/](https://swiftunboxed.com/images/native-objc-dynamic.png)\n\n通过上图我们知道：\n\n> 除非明确的知道会在 Objective-C 中调用这段代码，否则别使用 @objc；\n> 除非明确的知道该方法需要被 Objective-C 的 runtime 动态调用，否则别使用 @objc dynamic。\n\n\n---\n\n**参考文献**\n\n1. https://swiftunboxed.com/interop/objc-dynamic/\n\n2. https://github.com/apple/swift-evolution/blob/master/proposals/0160-objc-inference.md\n\n\n","source":"_posts/Swift-High-Performance-Tip 3：@objc-和-dynamic.md","raw":"---\ntitle: Swift High-Performance Tip 3：@objc 和 dynamic\nauthor: 帕帕\ndate: 2018-05-24 18:48:01 +0800\ncategories: 技术\ntags: [iOS, Swift]\nthumbnail: https://images.unsplash.com/photo-1507358522600-9f71e620c44e?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=9606de2cffd6c619093871ef2d1c0e6f&auto=format&fit=crop&w=160&q=100\n---\n\n### @objc\n\n@objc 的作用是为了让 Objective-C 能够调用 Swift 的代码。其中的关键是 @objc 会生成一段 thunk 代码，Objective-C 通过这段 thunk 代码来间接调用 Swift 代码。如果是 Swift 来调用被 @objc 修饰的方法的时候，此时是不需要经过 thunk 代码就能直接调用的。\n\n所以我们可以想象，如果方法变得复杂或者被 @objc 修饰的方法数量变得越来越多会发生什么事？答案就是 thunk 代码变得越来越多，最后会导致我们的包大小也变得越来越大。并且动态链接器（dynamic linker）还需要整理这些 thunk 代码，最后导致加载时间也会变得越来越长。\n\n在 Swift3 的时候，编译器会推断出你的方法不是 Swift 专用的（比如有元组、结构体），就会默认给你的方法增加 @objc 的修饰。这种方式就导致了在 Swift3 的时候，会生成大量的 thunk 代码，并且这其中的大部分代码都不会被使用。所以 Swift4 默认是不做 @objc 的推断，只有我们手动添加了 @objc 之后，Objective-C 才能调用我们的 Swift 代码。 \n\n### dynamic\n\nSwift 的方法是通过 vtable 来调用的，使用 vtable 要比 Objective-C 的 runtime 更高效。\n\n而使用 dynamic 来修饰的方法，代表这个方法是可以被动态调用的。而由于目前 Swfit 还没有实现自己的 runtime 机制，所以动态调用只能够在 Objective-C 去调用。在  Swift4 使用 dynamic 修饰一个方法的时候，编译器会要求你还需要使用 @objc 去修饰。这是为了明确的告诉编译器这个方法是由 Objective-C 的 runtime 来调用的，同时也是为了兼容以后可能会出现的 Swift runtime 机制。\n\n由于目前使用 @objc dynamic 修饰的方法并不在 Swift 实例对象的 vtable 里面，所以 Swift 来调用该方法的时候依旧需要通过 thunk 代码来调用。\n\n### 总结\n\n![此图出自 https://swiftunboxed.com/interop/objc-dynamic/](https://swiftunboxed.com/images/native-objc-dynamic.png)\n\n通过上图我们知道：\n\n> 除非明确的知道会在 Objective-C 中调用这段代码，否则别使用 @objc；\n> 除非明确的知道该方法需要被 Objective-C 的 runtime 动态调用，否则别使用 @objc dynamic。\n\n\n---\n\n**参考文献**\n\n1. https://swiftunboxed.com/interop/objc-dynamic/\n\n2. https://github.com/apple/swift-evolution/blob/master/proposals/0160-objc-inference.md\n\n\n","slug":"Swift-High-Performance-Tip 3：@objc-和-dynamic","published":1,"updated":"2018-06-13T08:44:56.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo44p6vg000karvbcv45ll5q","content":"<h3 id=\"objc\"><a href=\"#objc\" class=\"headerlink\" title=\"@objc\"></a>@objc</h3><p>@objc 的作用是为了让 Objective-C 能够调用 Swift 的代码。其中的关键是 @objc 会生成一段 thunk 代码，Objective-C 通过这段 thunk 代码来间接调用 Swift 代码。如果是 Swift 来调用被 @objc 修饰的方法的时候，此时是不需要经过 thunk 代码就能直接调用的。</p>\n<p>所以我们可以想象，如果方法变得复杂或者被 @objc 修饰的方法数量变得越来越多会发生什么事？答案就是 thunk 代码变得越来越多，最后会导致我们的包大小也变得越来越大。并且动态链接器（dynamic linker）还需要整理这些 thunk 代码，最后导致加载时间也会变得越来越长。</p>\n<p>在 Swift3 的时候，编译器会推断出你的方法不是 Swift 专用的（比如有元组、结构体），就会默认给你的方法增加 @objc 的修饰。这种方式就导致了在 Swift3 的时候，会生成大量的 thunk 代码，并且这其中的大部分代码都不会被使用。所以 Swift4 默认是不做 @objc 的推断，只有我们手动添加了 @objc 之后，Objective-C 才能调用我们的 Swift 代码。 </p>\n<h3 id=\"dynamic\"><a href=\"#dynamic\" class=\"headerlink\" title=\"dynamic\"></a>dynamic</h3><p>Swift 的方法是通过 vtable 来调用的，使用 vtable 要比 Objective-C 的 runtime 更高效。</p>\n<p>而使用 dynamic 来修饰的方法，代表这个方法是可以被动态调用的。而由于目前 Swfit 还没有实现自己的 runtime 机制，所以动态调用只能够在 Objective-C 去调用。在  Swift4 使用 dynamic 修饰一个方法的时候，编译器会要求你还需要使用 @objc 去修饰。这是为了明确的告诉编译器这个方法是由 Objective-C 的 runtime 来调用的，同时也是为了兼容以后可能会出现的 Swift runtime 机制。</p>\n<p>由于目前使用 @objc dynamic 修饰的方法并不在 Swift 实例对象的 vtable 里面，所以 Swift 来调用该方法的时候依旧需要通过 thunk 代码来调用。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><img src=\"https://swiftunboxed.com/images/native-objc-dynamic.png\" alt=\"此图出自 https://swiftunboxed.com/interop/objc-dynamic/\"></p>\n<p>通过上图我们知道：</p>\n<blockquote>\n<p>除非明确的知道会在 Objective-C 中调用这段代码，否则别使用 @objc；<br>除非明确的知道该方法需要被 Objective-C 的 runtime 动态调用，否则别使用 @objc dynamic。</p>\n</blockquote>\n<hr>\n<p><strong>参考文献</strong></p>\n<ol>\n<li><p><a href=\"https://swiftunboxed.com/interop/objc-dynamic/\" target=\"_blank\" rel=\"noopener\">https://swiftunboxed.com/interop/objc-dynamic/</a></p>\n</li>\n<li><p><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0160-objc-inference.md\" target=\"_blank\" rel=\"noopener\">https://github.com/apple/swift-evolution/blob/master/proposals/0160-objc-inference.md</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"objc\"><a href=\"#objc\" class=\"headerlink\" title=\"@objc\"></a>@objc</h3><p>@objc 的作用是为了让 Objective-C 能够调用 Swift 的代码。其中的关键是 @objc 会生成一段 thunk 代码，Objective-C 通过这段 thunk 代码来间接调用 Swift 代码。如果是 Swift 来调用被 @objc 修饰的方法的时候，此时是不需要经过 thunk 代码就能直接调用的。</p>\n<p>所以我们可以想象，如果方法变得复杂或者被 @objc 修饰的方法数量变得越来越多会发生什么事？答案就是 thunk 代码变得越来越多，最后会导致我们的包大小也变得越来越大。并且动态链接器（dynamic linker）还需要整理这些 thunk 代码，最后导致加载时间也会变得越来越长。</p>\n<p>在 Swift3 的时候，编译器会推断出你的方法不是 Swift 专用的（比如有元组、结构体），就会默认给你的方法增加 @objc 的修饰。这种方式就导致了在 Swift3 的时候，会生成大量的 thunk 代码，并且这其中的大部分代码都不会被使用。所以 Swift4 默认是不做 @objc 的推断，只有我们手动添加了 @objc 之后，Objective-C 才能调用我们的 Swift 代码。 </p>\n<h3 id=\"dynamic\"><a href=\"#dynamic\" class=\"headerlink\" title=\"dynamic\"></a>dynamic</h3><p>Swift 的方法是通过 vtable 来调用的，使用 vtable 要比 Objective-C 的 runtime 更高效。</p>\n<p>而使用 dynamic 来修饰的方法，代表这个方法是可以被动态调用的。而由于目前 Swfit 还没有实现自己的 runtime 机制，所以动态调用只能够在 Objective-C 去调用。在  Swift4 使用 dynamic 修饰一个方法的时候，编译器会要求你还需要使用 @objc 去修饰。这是为了明确的告诉编译器这个方法是由 Objective-C 的 runtime 来调用的，同时也是为了兼容以后可能会出现的 Swift runtime 机制。</p>\n<p>由于目前使用 @objc dynamic 修饰的方法并不在 Swift 实例对象的 vtable 里面，所以 Swift 来调用该方法的时候依旧需要通过 thunk 代码来调用。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><img src=\"https://swiftunboxed.com/images/native-objc-dynamic.png\" alt=\"此图出自 https://swiftunboxed.com/interop/objc-dynamic/\"></p>\n<p>通过上图我们知道：</p>\n<blockquote>\n<p>除非明确的知道会在 Objective-C 中调用这段代码，否则别使用 @objc；<br>除非明确的知道该方法需要被 Objective-C 的 runtime 动态调用，否则别使用 @objc dynamic。</p>\n</blockquote>\n<hr>\n<p><strong>参考文献</strong></p>\n<ol>\n<li><p><a href=\"https://swiftunboxed.com/interop/objc-dynamic/\" target=\"_blank\" rel=\"noopener\">https://swiftunboxed.com/interop/objc-dynamic/</a></p>\n</li>\n<li><p><a href=\"https://github.com/apple/swift-evolution/blob/master/proposals/0160-objc-inference.md\" target=\"_blank\" rel=\"noopener\">https://github.com/apple/swift-evolution/blob/master/proposals/0160-objc-inference.md</a></p>\n</li>\n</ol>\n"},{"title":"Vim Tip","subtitle":"记录日常中使用的 Vim 命令，经常更新","author":"帕帕","date":"2017-09-05T15:30:56.000Z","_content":"\n## 1、替换第n1行到第n2行的内容\n\n```Vim\n:n1,n2/origin/replace/g\n```\n\n## 2、替换整个文件的内容\n\n```Vim\n:%s/origin/replace/g\n```\n\n## 3、移动n1-n2行(包括n1,n2)到n3行之下\n\n```Vim\nn1,n2 m n3     \n```\n\n## 4、复制n1-n2行(包括n1,n2)到n3行之下\n\n```Vim\n:n1,n2 co n3\n```\n\n## 5、删除文件的空行\n\n```Vim\n:g/^$/d\n```\n\n## 6、在文本中插入一个1到100的序列（来自池老师[《说，谁才是最帅的编程工具？》](http://mp.weixin.qq.com/s?__biz=MjM5ODQ2MDIyMA==&mid=2650712546&idx=1&sn=c4db99547b75d6001b3cfaa6cbc0e715&scene=1&srcid=0805j7ny3Ua1WufWDEpnhwOG#rd)）\n\n```Vim\n:r!seq 100\n```\n\n## 7、在当前的每一行文字前面增加“序号. ”（来自池老师[《说，谁才是最帅的编程工具？》](http://mp.weixin.qq.com/s?__biz=MjM5ODQ2MDIyMA==&mid=2650712546&idx=1&sn=c4db99547b75d6001b3cfaa6cbc0e715&scene=1&srcid=0805j7ny3Ua1WufWDEpnhwOG#rd)）\n\n```Vim\n:let i=1 | g /^/ s//\\=i.\". \"/ | let i+=1\n```\n\n## 8、当前目录下（包括子文件夹）所有后缀为 java 的文件中的 apache 替换成 eclipse，那么在当前目录下依次执行如下命令：（来自池老师[《说，谁才是最帅的编程工具？》](http://mp.weixin.qq.com/s?__biz=MjM5ODQ2MDIyMA==&mid=2650712546&idx=1&sn=c4db99547b75d6001b3cfaa6cbc0e715&scene=1&srcid=0805j7ny3Ua1WufWDEpnhwOG#rd)）\n\n```Vim\nvim\n:n **/*.java\n:argdo %s/apache/eclipse/ge | update \n```\n\n","source":"_posts/Vim-Tip.md","raw":"---\ntitle: Vim Tip\nsubtitle: 记录日常中使用的 Vim 命令，经常更新\nauthor: 帕帕\ndate: 2017-09-05 15:30:56 +0800\ncategories: 技术\ntags: [tip]\n---\n\n## 1、替换第n1行到第n2行的内容\n\n```Vim\n:n1,n2/origin/replace/g\n```\n\n## 2、替换整个文件的内容\n\n```Vim\n:%s/origin/replace/g\n```\n\n## 3、移动n1-n2行(包括n1,n2)到n3行之下\n\n```Vim\nn1,n2 m n3     \n```\n\n## 4、复制n1-n2行(包括n1,n2)到n3行之下\n\n```Vim\n:n1,n2 co n3\n```\n\n## 5、删除文件的空行\n\n```Vim\n:g/^$/d\n```\n\n## 6、在文本中插入一个1到100的序列（来自池老师[《说，谁才是最帅的编程工具？》](http://mp.weixin.qq.com/s?__biz=MjM5ODQ2MDIyMA==&mid=2650712546&idx=1&sn=c4db99547b75d6001b3cfaa6cbc0e715&scene=1&srcid=0805j7ny3Ua1WufWDEpnhwOG#rd)）\n\n```Vim\n:r!seq 100\n```\n\n## 7、在当前的每一行文字前面增加“序号. ”（来自池老师[《说，谁才是最帅的编程工具？》](http://mp.weixin.qq.com/s?__biz=MjM5ODQ2MDIyMA==&mid=2650712546&idx=1&sn=c4db99547b75d6001b3cfaa6cbc0e715&scene=1&srcid=0805j7ny3Ua1WufWDEpnhwOG#rd)）\n\n```Vim\n:let i=1 | g /^/ s//\\=i.\". \"/ | let i+=1\n```\n\n## 8、当前目录下（包括子文件夹）所有后缀为 java 的文件中的 apache 替换成 eclipse，那么在当前目录下依次执行如下命令：（来自池老师[《说，谁才是最帅的编程工具？》](http://mp.weixin.qq.com/s?__biz=MjM5ODQ2MDIyMA==&mid=2650712546&idx=1&sn=c4db99547b75d6001b3cfaa6cbc0e715&scene=1&srcid=0805j7ny3Ua1WufWDEpnhwOG#rd)）\n\n```Vim\nvim\n:n **/*.java\n:argdo %s/apache/eclipse/ge | update \n```\n\n","slug":"Vim-Tip","published":1,"updated":"2018-03-23T08:43:06.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo44p6vj000oarvbfaa761le","content":"<h2 id=\"1、替换第n1行到第n2行的内容\"><a href=\"#1、替换第n1行到第n2行的内容\" class=\"headerlink\" title=\"1、替换第n1行到第n2行的内容\"></a>1、替换第n1行到第n2行的内容</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:n1,n2/origin/replace/g</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、替换整个文件的内容\"><a href=\"#2、替换整个文件的内容\" class=\"headerlink\" title=\"2、替换整个文件的内容\"></a>2、替换整个文件的内容</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:%s/origin/replace/g</span><br></pre></td></tr></table></figure>\n<h2 id=\"3、移动n1-n2行-包括n1-n2-到n3行之下\"><a href=\"#3、移动n1-n2行-包括n1-n2-到n3行之下\" class=\"headerlink\" title=\"3、移动n1-n2行(包括n1,n2)到n3行之下\"></a>3、移动n1-n2行(包括n1,n2)到n3行之下</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n1,n2 <span class=\"keyword\">m</span> n3</span><br></pre></td></tr></table></figure>\n<h2 id=\"4、复制n1-n2行-包括n1-n2-到n3行之下\"><a href=\"#4、复制n1-n2行-包括n1-n2-到n3行之下\" class=\"headerlink\" title=\"4、复制n1-n2行(包括n1,n2)到n3行之下\"></a>4、复制n1-n2行(包括n1,n2)到n3行之下</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:n1,n2 <span class=\"keyword\">co</span> n3</span><br></pre></td></tr></table></figure>\n<h2 id=\"5、删除文件的空行\"><a href=\"#5、删除文件的空行\" class=\"headerlink\" title=\"5、删除文件的空行\"></a>5、删除文件的空行</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:g/^$/d</span><br></pre></td></tr></table></figure>\n<h2 id=\"6、在文本中插入一个1到100的序列（来自池老师《说，谁才是最帅的编程工具？》）\"><a href=\"#6、在文本中插入一个1到100的序列（来自池老师《说，谁才是最帅的编程工具？》）\" class=\"headerlink\" title=\"6、在文本中插入一个1到100的序列（来自池老师《说，谁才是最帅的编程工具？》）\"></a>6、在文本中插入一个1到100的序列（来自池老师<a href=\"http://mp.weixin.qq.com/s?__biz=MjM5ODQ2MDIyMA==&amp;mid=2650712546&amp;idx=1&amp;sn=c4db99547b75d6001b3cfaa6cbc0e715&amp;scene=1&amp;srcid=0805j7ny3Ua1WufWDEpnhwOG#rd\" target=\"_blank\" rel=\"noopener\">《说，谁才是最帅的编程工具？》</a>）</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:r!seq <span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"7、在当前的每一行文字前面增加“序号-”（来自池老师《说，谁才是最帅的编程工具？》）\"><a href=\"#7、在当前的每一行文字前面增加“序号-”（来自池老师《说，谁才是最帅的编程工具？》）\" class=\"headerlink\" title=\"7、在当前的每一行文字前面增加“序号. ”（来自池老师《说，谁才是最帅的编程工具？》）\"></a>7、在当前的每一行文字前面增加“序号. ”（来自池老师<a href=\"http://mp.weixin.qq.com/s?__biz=MjM5ODQ2MDIyMA==&amp;mid=2650712546&amp;idx=1&amp;sn=c4db99547b75d6001b3cfaa6cbc0e715&amp;scene=1&amp;srcid=0805j7ny3Ua1WufWDEpnhwOG#rd\" target=\"_blank\" rel=\"noopener\">《说，谁才是最帅的编程工具？》</a>）</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:<span class=\"keyword\">let</span> i=<span class=\"number\">1</span> | g /^/ s//\\=i.<span class=\"string\">\". \"</span>/ | <span class=\"keyword\">let</span> i+=<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"8、当前目录下（包括子文件夹）所有后缀为-java-的文件中的-apache-替换成-eclipse，那么在当前目录下依次执行如下命令：（来自池老师《说，谁才是最帅的编程工具？》）\"><a href=\"#8、当前目录下（包括子文件夹）所有后缀为-java-的文件中的-apache-替换成-eclipse，那么在当前目录下依次执行如下命令：（来自池老师《说，谁才是最帅的编程工具？》）\" class=\"headerlink\" title=\"8、当前目录下（包括子文件夹）所有后缀为 java 的文件中的 apache 替换成 eclipse，那么在当前目录下依次执行如下命令：（来自池老师《说，谁才是最帅的编程工具？》）\"></a>8、当前目录下（包括子文件夹）所有后缀为 java 的文件中的 apache 替换成 eclipse，那么在当前目录下依次执行如下命令：（来自池老师<a href=\"http://mp.weixin.qq.com/s?__biz=MjM5ODQ2MDIyMA==&amp;mid=2650712546&amp;idx=1&amp;sn=c4db99547b75d6001b3cfaa6cbc0e715&amp;scene=1&amp;srcid=0805j7ny3Ua1WufWDEpnhwOG#rd\" target=\"_blank\" rel=\"noopener\">《说，谁才是最帅的编程工具？》</a>）</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">vim</span></span><br><span class=\"line\">:n **/*.java</span><br><span class=\"line\">:<span class=\"keyword\">argdo</span> %s/apache/eclipse/ge | <span class=\"keyword\">update</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1、替换第n1行到第n2行的内容\"><a href=\"#1、替换第n1行到第n2行的内容\" class=\"headerlink\" title=\"1、替换第n1行到第n2行的内容\"></a>1、替换第n1行到第n2行的内容</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:n1,n2/origin/replace/g</span><br></pre></td></tr></table></figure>\n<h2 id=\"2、替换整个文件的内容\"><a href=\"#2、替换整个文件的内容\" class=\"headerlink\" title=\"2、替换整个文件的内容\"></a>2、替换整个文件的内容</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:%s/origin/replace/g</span><br></pre></td></tr></table></figure>\n<h2 id=\"3、移动n1-n2行-包括n1-n2-到n3行之下\"><a href=\"#3、移动n1-n2行-包括n1-n2-到n3行之下\" class=\"headerlink\" title=\"3、移动n1-n2行(包括n1,n2)到n3行之下\"></a>3、移动n1-n2行(包括n1,n2)到n3行之下</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n1,n2 <span class=\"keyword\">m</span> n3</span><br></pre></td></tr></table></figure>\n<h2 id=\"4、复制n1-n2行-包括n1-n2-到n3行之下\"><a href=\"#4、复制n1-n2行-包括n1-n2-到n3行之下\" class=\"headerlink\" title=\"4、复制n1-n2行(包括n1,n2)到n3行之下\"></a>4、复制n1-n2行(包括n1,n2)到n3行之下</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:n1,n2 <span class=\"keyword\">co</span> n3</span><br></pre></td></tr></table></figure>\n<h2 id=\"5、删除文件的空行\"><a href=\"#5、删除文件的空行\" class=\"headerlink\" title=\"5、删除文件的空行\"></a>5、删除文件的空行</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:g/^$/d</span><br></pre></td></tr></table></figure>\n<h2 id=\"6、在文本中插入一个1到100的序列（来自池老师《说，谁才是最帅的编程工具？》）\"><a href=\"#6、在文本中插入一个1到100的序列（来自池老师《说，谁才是最帅的编程工具？》）\" class=\"headerlink\" title=\"6、在文本中插入一个1到100的序列（来自池老师《说，谁才是最帅的编程工具？》）\"></a>6、在文本中插入一个1到100的序列（来自池老师<a href=\"http://mp.weixin.qq.com/s?__biz=MjM5ODQ2MDIyMA==&amp;mid=2650712546&amp;idx=1&amp;sn=c4db99547b75d6001b3cfaa6cbc0e715&amp;scene=1&amp;srcid=0805j7ny3Ua1WufWDEpnhwOG#rd\" target=\"_blank\" rel=\"noopener\">《说，谁才是最帅的编程工具？》</a>）</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:r!seq <span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"7、在当前的每一行文字前面增加“序号-”（来自池老师《说，谁才是最帅的编程工具？》）\"><a href=\"#7、在当前的每一行文字前面增加“序号-”（来自池老师《说，谁才是最帅的编程工具？》）\" class=\"headerlink\" title=\"7、在当前的每一行文字前面增加“序号. ”（来自池老师《说，谁才是最帅的编程工具？》）\"></a>7、在当前的每一行文字前面增加“序号. ”（来自池老师<a href=\"http://mp.weixin.qq.com/s?__biz=MjM5ODQ2MDIyMA==&amp;mid=2650712546&amp;idx=1&amp;sn=c4db99547b75d6001b3cfaa6cbc0e715&amp;scene=1&amp;srcid=0805j7ny3Ua1WufWDEpnhwOG#rd\" target=\"_blank\" rel=\"noopener\">《说，谁才是最帅的编程工具？》</a>）</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:<span class=\"keyword\">let</span> i=<span class=\"number\">1</span> | g /^/ s//\\=i.<span class=\"string\">\". \"</span>/ | <span class=\"keyword\">let</span> i+=<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"8、当前目录下（包括子文件夹）所有后缀为-java-的文件中的-apache-替换成-eclipse，那么在当前目录下依次执行如下命令：（来自池老师《说，谁才是最帅的编程工具？》）\"><a href=\"#8、当前目录下（包括子文件夹）所有后缀为-java-的文件中的-apache-替换成-eclipse，那么在当前目录下依次执行如下命令：（来自池老师《说，谁才是最帅的编程工具？》）\" class=\"headerlink\" title=\"8、当前目录下（包括子文件夹）所有后缀为 java 的文件中的 apache 替换成 eclipse，那么在当前目录下依次执行如下命令：（来自池老师《说，谁才是最帅的编程工具？》）\"></a>8、当前目录下（包括子文件夹）所有后缀为 java 的文件中的 apache 替换成 eclipse，那么在当前目录下依次执行如下命令：（来自池老师<a href=\"http://mp.weixin.qq.com/s?__biz=MjM5ODQ2MDIyMA==&amp;mid=2650712546&amp;idx=1&amp;sn=c4db99547b75d6001b3cfaa6cbc0e715&amp;scene=1&amp;srcid=0805j7ny3Ua1WufWDEpnhwOG#rd\" target=\"_blank\" rel=\"noopener\">《说，谁才是最帅的编程工具？》</a>）</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">vim</span></span><br><span class=\"line\">:n **/*.java</span><br><span class=\"line\">:<span class=\"keyword\">argdo</span> %s/apache/eclipse/ge | <span class=\"keyword\">update</span></span><br></pre></td></tr></table></figure>\n"},{"title":"include 和 import 的区别","author":"帕帕","date":"2017-09-05T15:30:56.000Z","_content":" \n今天我们来了解下面这几种包含文件的方式有什么特点和区别：\n\n```Swift\n#include \"fiel\"\n#include <file>\n#import \"file\"\n#import <file>\n@import Module\n```\n\n---\n\n## 一、#include\n\n学过 C 语言的人都知道，#include 其实是一个预处理命令。它会在预处理的时候简单的把被 #include 包含的文件内容进行复制粘贴。我们来看看下面的代码：\n\n```C\n// A.h\nvoid sampleA() {\n  // A code\n}\n\n```\n\n```C\n// B.h\n#include \"A.h\"\n\nvoid sampleB() {\n  // B code\n}\n```\n\n我们使用 gcc -E B.h 命令来看看经过预处理后的文件内容大概如下：\n\n```C\n# 1 \"B.h\"\n# 1 \"<built-in>\" 1\n# 1 \"<built-in>\" 3\n# 329 \"<built-in>\" 3\n# 1 \"<command line>\" 1\n# 1 \"<built-in>\" 2\n# 1 \"B.h\" 2\n# 1 \"./A.h\" 1\nvoid sampleA() {\n\n}\n# 2 \"B.h\" 2\n\nvoid sampleB() {\n\n}\n```\n\n我们可以看到经过预处理之后，A.h 文件中的内容被直接复制并粘贴到 B.h 文件中来。如果我们在 B.h 文件中多次包含了 A.h 文件，会出现什么情况？比如：\n\n```C\n// A.h\nvoid sampleA() {\n  // A code\n}\n```\n\n```C\n// B.h\n#include \"A.h\"\n#include \"A.h\"\n\nvoid sampleB() {\n  // B code\n}\n```\n\n经过预处理之后的内容大概如下：\n\n```C\n# 1 \"B.h\"\n# 1 \"<built-in>\" 1\n# 1 \"<built-in>\" 3\n# 329 \"<built-in>\" 3\n# 1 \"<command line>\" 1\n# 1 \"<built-in>\" 2\n# 1 \"B.h\" 2\n# 1 \"./A.h\" 1\nvoid sampleA() {\n\n}\n# 2 \"B.h\" 2\n# 1 \"./A.h\" 1\nvoid sampleA() {\n\n}\n# 3 \"B.h\" 2\n\nvoid sampleB() {\n\n}\n```\n\nA.h 文件中的 sampleA() 函数出现了两次，所以我们需要利用其他的一些预处理命令来规避这种情况，看看下面的代码：\n\n```C\n// A.h\n#ifndef FILE_A\n#define FILE_A\n\nvoid sampleA() {\n  // A code\n}\n#endif\n```\n\n```C\n// B.h\n#include \"A.h\"\n#include \"A.h\"\n\nvoid sampleB() {\n  // B code\n}\n```\n\n我们再来看看增加了这些预处理命令之后的预处理文件内容：\n\n```C\n# 1 \"B.h\"\n# 1 \"<built-in>\" 1\n# 1 \"<built-in>\" 3\n# 329 \"<built-in>\" 3\n# 1 \"<command line>\" 1\n# 1 \"<built-in>\" 2\n# 1 \"B.h\" 2\n# 1 \"./A.h\" 1\n\n\n\nvoid sampleA() {\n\n}\n# 2 \"B.h\" 2\n\n\nvoid sampleB() {\n\n}\n```\n\nOK，这就正常了。如果我们在 A.h 中包含 B.h，然后又在 B.h 中包含 A.h，具体代码如下：\n\n```C\n// A.h\n#include \"B.h\"\n\nvoid sampleA() {\n  // A code\n}\n#endif\n```\n\n```\n// B.h\n#include \"A.h\"\n\nvoid sampleB() {\n  // B code\n}\n```\n\n我们再来看看经过 gcc -E B.h 处理之后的文件内容：\n\n```C\n# 1 \"B.h\"\n# 1 \"<built-in>\" 1\n# 1 \"<built-in>\" 3\n# 329 \"<built-in>\" 3\n# 1 \"<command line>\" 1\n# 1 \"<built-in>\" 2\n# 1 \"B.h\" 2\n# 1 \"./A.h\" 1\n# 1 \"./B.h\" 1\n# 1 \"./A.h\" 1\n# 1 \"./B.h\" 1\n...\n...\n# 1 \"./A.h\" 1\n# 1 \"./B.h\" 1\nIn file included from ./B.h:1:\nIn file included from ./A.h:1:\nIn file included from ./B.h:1:\nIn file included from ./A.h:1:\n...\n...\nIn file included from ./B.h:1:\nIn file included from ./A.h:1:\n./A.h:1:10: error: #include nested too deeply\n#include \"B.h\"\n         ^\n\n\nvoid sampleA() {\n\n}\n# 2 \"./B.h\" 2\n\nvoid sampleB() {\n\n}\n# 2 \"./A.h\" 2\n\nvoid sampleA() {\n\n}\n# 2 \"./B.h\" 2\n\nvoid sampleB() {\n\n}\n# 2 \"./A.h\" 2\n\nvoid sampleA() {\n\n}\n...\n...\n# 2 \"./A.h\" 2\n\nvoid sampleA() {\n\n}\n# 2 \"./B.h\" 2\n\nvoid sampleB() {\n\n}\n1 error generated.\n```\n\n我们发现 A.h 和 B.h 重复出现，这是因为这个时候 A.h 和 B.h 文件互相引用导致的。从理论上来讲，这个时候会无限循环下去，直至世界终结。在这里最后会出现一句 *1 error generated.*的提示是 gcc 强行中断了这个预处理的过程，所以我们才能看到这样的结果。那我们可以怎么做？当然是利用前面说的预处理命令来避免循环引用的问题。看下面的代码：\n\n```C\n// A.h\n#ifndef FILE_A\n#define FILE_A\n\n#include \"B.h\"\n\nvoid sampleA() {\n  // A code\n}\n#endif\n```\n\n```C\n// B.h\n#ifndef FILE_B\n#define FILE_B\n\n#include \"A.h\"\n\nvoid sampleB() {\n  // B code\n}\n#endif\n```\n\n这个时候使用 gcc -E B.h 就可以正常的进行预处理，最后的结果如下：\n\n```C\n# 1 \"B.h\"\n# 1 \"<built-in>\" 1\n# 1 \"<built-in>\" 3\n# 329 \"<built-in>\" 3\n# 1 \"<command line>\" 1\n# 1 \"<built-in>\" 2\n# 1 \"B.h\" 2\n\n\n\n# 1 \"./A.h\" 1\n\n\n\n# 1 \"./B.h\" 1\n# 5 \"./A.h\" 2\n\nvoid sampleA() {\n\n}\n# 5 \"./B.h\" 2\n\nvoid sampleB() {\n\n}\n```\n\n所以C程序员总是需要通过各种手段（比如：[#pragma once](https://en.wikipedia.org/wiki/Pragma_once)）来防范此类事件的发生。\n\n\n## 二、#import\n\n我们在文件中通过#import来导入 iAd Framework：\n![](http://i.imgur.com/nLPSsNN.jpg)\n\n\n编译报错：\n![](http://i.imgur.com/XBXD8wu.jpg)\n\n需要重新导入和链接 Framework：\n![](http://i.imgur.com/rUnKJGb.jpg)\n![](http://i.imgur.com/XuxVI6b.jpg)\n\n编译成功：\n![](http://i.imgur.com/QvyQunr.jpg)\n\n从上面的过程中我们就知道在 Objective-C 项目中使用 #import 需要注意导入和链接 Framework，否则是会报错的。\n\n预处理器在碰到 #import 命令的时候，它会采用递归的方式把被所有头文件的内容复制并粘贴到当前文件中，如果文件依赖层次比较深就会造成预处理后的文件内容体积大幅度变大。\n\n比如导入 UIKit 的时候只需要一行代码：\n\n```Swift\n#import <UIKit/UIKit.h>\n```\n\n预处理之后会变成200多行（UIKit.h 文件有200多行代码）：\n\n```Swift\n#import <UIKit/UIKitDefines.h>\n\n#if __has_include(<UIKit/UIAccelerometer.h>)\n#import <UIKit/UIAccelerometer.h>\n.....\n#import <UIKit/UIRegion.h>\n#endif\n```\n\n接下来还需要递归的把每个头文件的内容展开，最后的结果就是一行代码变成超过11000行代码。如果有多个文件都包含来 UIKit 的头文件，这样就会让每个文件的体积都会变得很大，编译过程也会变得越来越慢。这种递归的方式会让项目的编译时间变成：*M source files + N headers => M x N compile time*。\n\n所以这个时候有一个优化方法就是把项目中频繁被引用的文件放到 PCH（Pre-Compile Header）文件中。PCH 会被编译一次并且会被缓存，这就可以缩短编译时间，我们也不需要在不同的文件里面添加import语法。\n\n当然，PCH 也有自己的缺点：\n\n* 维护负担：随着项目变得越来越复杂，我们就会不停的往PCH文件加入内容，内容一旦变多就会变得不好维护。（这也是我们平常在项目中要避免在 ViewController 做太多事情的，要研究 MVVM的缘故。）\n\n* 命名空间污染\n\n\n最后，给大家提供一个例子看看 #import 编译出来之后的文件内容：\n\n```C\n// A.h\n#import \"B.h\"\n \nvoid sampleA() {\n  // A code\n}\n#endif\n```\n\n```C\n// B.h\n#import \"A.h\"\n#import \"A.h\"\n\nvoid sampleB() {\n  // B code\n}\n```\n\n使用 gcc -E B.h 进行预处理之后的内容如下：\n\n```C\n\n# 1 \"B.h\"\n# 1 \"<built-in>\" 1\n# 1 \"<built-in>\" 3\n# 329 \"<built-in>\" 3\n# 1 \"<command line>\" 1\n# 1 \"<built-in>\" 2\n# 1 \"B.h\" 2\n# 1 \"./A.h\" 1\n\n\nvoid sampleA() {\n\n}\n# 2 \"./B.h\" 2\n\nvoid sampleB() {\n\n}\n```\n\n我们在B.h中有两个 #import \"A.h\"，但是这些内容跟我们之前在 A.h 和 B.h 文件中使用 #include 和其他预处理命令之后的处理结果很相似，所以我们就明白了 #import 大概做了什么事。\n\n## 三、@import\n\n在2012年的 LLVM 大会上，苹果的 Doug Gregor 首次提出了 Objective-C 中的 Module。使用 @import 方式导入有几个好处：\n\n* 不需要像 #import 一样得手动去链接 Framework，@import会自动去链接\n\n* @import 工作方式和 PCH 很像，但是 @import 要比 PCH 的效率高出许多\n\n* @import 导入 Modul 优化文件体积变大、编译速度变慢的问题\n\n* 可以部分导入（@import Framework.A）或全部导入（@import Framework）\n\n所以，建议大家尽量使用 @import 来导入文件。如果你以前的项目用的是 #import，那么你也不需要担心，我们只通过 Build Settings 开启 Modules 选项（看下图），#import 和 #include 会自动被映射成 @import，所以你不需要更改原来的代码也能享受 @import带来的好处。\n\n![](http://i.imgur.com/l7ZMUy6.jpg)\n\n详细内容可以看看苹果2013年的 [Advances in Objective-C](https://developer.apple.com/videos/play/wwdc2013/404/)，里面就详细介绍了 Module。\n\n## 四、文件路径\n\n接下来我们来了解一下 *#include <file>* 和 *#include \"file\"*：\n\n* \\#include \\<file>: 表示编译器会直接到系统设定的目录下寻找指定的文件。\n \n* \\#include \"file\": 表示编译器会到当前的目录下寻找指定的文件，如果找不到，则会去系统设定的目录下寻找指定的文件。\n\n---\n参考文献：\n\n1. https://gcc.gnu.org/onlinedocs/cpp/Include-Syntax.html\n\n2. http://stackoverflow.com/questions/18947516/import-vs-import-ios-7\n\n3. https://www.raywenderlich.com/49850/whats-new-in-objective-c-and-foundation-in-ios-7\n\n","source":"_posts/include和import的区别.md","raw":"---\ntitle: include 和 import 的区别\nauthor: 帕帕\ndate: 2017-09-05 15:30:56 +0800\ncategories: 技术 \ntags: [iOS]\n---\n \n今天我们来了解下面这几种包含文件的方式有什么特点和区别：\n\n```Swift\n#include \"fiel\"\n#include <file>\n#import \"file\"\n#import <file>\n@import Module\n```\n\n---\n\n## 一、#include\n\n学过 C 语言的人都知道，#include 其实是一个预处理命令。它会在预处理的时候简单的把被 #include 包含的文件内容进行复制粘贴。我们来看看下面的代码：\n\n```C\n// A.h\nvoid sampleA() {\n  // A code\n}\n\n```\n\n```C\n// B.h\n#include \"A.h\"\n\nvoid sampleB() {\n  // B code\n}\n```\n\n我们使用 gcc -E B.h 命令来看看经过预处理后的文件内容大概如下：\n\n```C\n# 1 \"B.h\"\n# 1 \"<built-in>\" 1\n# 1 \"<built-in>\" 3\n# 329 \"<built-in>\" 3\n# 1 \"<command line>\" 1\n# 1 \"<built-in>\" 2\n# 1 \"B.h\" 2\n# 1 \"./A.h\" 1\nvoid sampleA() {\n\n}\n# 2 \"B.h\" 2\n\nvoid sampleB() {\n\n}\n```\n\n我们可以看到经过预处理之后，A.h 文件中的内容被直接复制并粘贴到 B.h 文件中来。如果我们在 B.h 文件中多次包含了 A.h 文件，会出现什么情况？比如：\n\n```C\n// A.h\nvoid sampleA() {\n  // A code\n}\n```\n\n```C\n// B.h\n#include \"A.h\"\n#include \"A.h\"\n\nvoid sampleB() {\n  // B code\n}\n```\n\n经过预处理之后的内容大概如下：\n\n```C\n# 1 \"B.h\"\n# 1 \"<built-in>\" 1\n# 1 \"<built-in>\" 3\n# 329 \"<built-in>\" 3\n# 1 \"<command line>\" 1\n# 1 \"<built-in>\" 2\n# 1 \"B.h\" 2\n# 1 \"./A.h\" 1\nvoid sampleA() {\n\n}\n# 2 \"B.h\" 2\n# 1 \"./A.h\" 1\nvoid sampleA() {\n\n}\n# 3 \"B.h\" 2\n\nvoid sampleB() {\n\n}\n```\n\nA.h 文件中的 sampleA() 函数出现了两次，所以我们需要利用其他的一些预处理命令来规避这种情况，看看下面的代码：\n\n```C\n// A.h\n#ifndef FILE_A\n#define FILE_A\n\nvoid sampleA() {\n  // A code\n}\n#endif\n```\n\n```C\n// B.h\n#include \"A.h\"\n#include \"A.h\"\n\nvoid sampleB() {\n  // B code\n}\n```\n\n我们再来看看增加了这些预处理命令之后的预处理文件内容：\n\n```C\n# 1 \"B.h\"\n# 1 \"<built-in>\" 1\n# 1 \"<built-in>\" 3\n# 329 \"<built-in>\" 3\n# 1 \"<command line>\" 1\n# 1 \"<built-in>\" 2\n# 1 \"B.h\" 2\n# 1 \"./A.h\" 1\n\n\n\nvoid sampleA() {\n\n}\n# 2 \"B.h\" 2\n\n\nvoid sampleB() {\n\n}\n```\n\nOK，这就正常了。如果我们在 A.h 中包含 B.h，然后又在 B.h 中包含 A.h，具体代码如下：\n\n```C\n// A.h\n#include \"B.h\"\n\nvoid sampleA() {\n  // A code\n}\n#endif\n```\n\n```\n// B.h\n#include \"A.h\"\n\nvoid sampleB() {\n  // B code\n}\n```\n\n我们再来看看经过 gcc -E B.h 处理之后的文件内容：\n\n```C\n# 1 \"B.h\"\n# 1 \"<built-in>\" 1\n# 1 \"<built-in>\" 3\n# 329 \"<built-in>\" 3\n# 1 \"<command line>\" 1\n# 1 \"<built-in>\" 2\n# 1 \"B.h\" 2\n# 1 \"./A.h\" 1\n# 1 \"./B.h\" 1\n# 1 \"./A.h\" 1\n# 1 \"./B.h\" 1\n...\n...\n# 1 \"./A.h\" 1\n# 1 \"./B.h\" 1\nIn file included from ./B.h:1:\nIn file included from ./A.h:1:\nIn file included from ./B.h:1:\nIn file included from ./A.h:1:\n...\n...\nIn file included from ./B.h:1:\nIn file included from ./A.h:1:\n./A.h:1:10: error: #include nested too deeply\n#include \"B.h\"\n         ^\n\n\nvoid sampleA() {\n\n}\n# 2 \"./B.h\" 2\n\nvoid sampleB() {\n\n}\n# 2 \"./A.h\" 2\n\nvoid sampleA() {\n\n}\n# 2 \"./B.h\" 2\n\nvoid sampleB() {\n\n}\n# 2 \"./A.h\" 2\n\nvoid sampleA() {\n\n}\n...\n...\n# 2 \"./A.h\" 2\n\nvoid sampleA() {\n\n}\n# 2 \"./B.h\" 2\n\nvoid sampleB() {\n\n}\n1 error generated.\n```\n\n我们发现 A.h 和 B.h 重复出现，这是因为这个时候 A.h 和 B.h 文件互相引用导致的。从理论上来讲，这个时候会无限循环下去，直至世界终结。在这里最后会出现一句 *1 error generated.*的提示是 gcc 强行中断了这个预处理的过程，所以我们才能看到这样的结果。那我们可以怎么做？当然是利用前面说的预处理命令来避免循环引用的问题。看下面的代码：\n\n```C\n// A.h\n#ifndef FILE_A\n#define FILE_A\n\n#include \"B.h\"\n\nvoid sampleA() {\n  // A code\n}\n#endif\n```\n\n```C\n// B.h\n#ifndef FILE_B\n#define FILE_B\n\n#include \"A.h\"\n\nvoid sampleB() {\n  // B code\n}\n#endif\n```\n\n这个时候使用 gcc -E B.h 就可以正常的进行预处理，最后的结果如下：\n\n```C\n# 1 \"B.h\"\n# 1 \"<built-in>\" 1\n# 1 \"<built-in>\" 3\n# 329 \"<built-in>\" 3\n# 1 \"<command line>\" 1\n# 1 \"<built-in>\" 2\n# 1 \"B.h\" 2\n\n\n\n# 1 \"./A.h\" 1\n\n\n\n# 1 \"./B.h\" 1\n# 5 \"./A.h\" 2\n\nvoid sampleA() {\n\n}\n# 5 \"./B.h\" 2\n\nvoid sampleB() {\n\n}\n```\n\n所以C程序员总是需要通过各种手段（比如：[#pragma once](https://en.wikipedia.org/wiki/Pragma_once)）来防范此类事件的发生。\n\n\n## 二、#import\n\n我们在文件中通过#import来导入 iAd Framework：\n![](http://i.imgur.com/nLPSsNN.jpg)\n\n\n编译报错：\n![](http://i.imgur.com/XBXD8wu.jpg)\n\n需要重新导入和链接 Framework：\n![](http://i.imgur.com/rUnKJGb.jpg)\n![](http://i.imgur.com/XuxVI6b.jpg)\n\n编译成功：\n![](http://i.imgur.com/QvyQunr.jpg)\n\n从上面的过程中我们就知道在 Objective-C 项目中使用 #import 需要注意导入和链接 Framework，否则是会报错的。\n\n预处理器在碰到 #import 命令的时候，它会采用递归的方式把被所有头文件的内容复制并粘贴到当前文件中，如果文件依赖层次比较深就会造成预处理后的文件内容体积大幅度变大。\n\n比如导入 UIKit 的时候只需要一行代码：\n\n```Swift\n#import <UIKit/UIKit.h>\n```\n\n预处理之后会变成200多行（UIKit.h 文件有200多行代码）：\n\n```Swift\n#import <UIKit/UIKitDefines.h>\n\n#if __has_include(<UIKit/UIAccelerometer.h>)\n#import <UIKit/UIAccelerometer.h>\n.....\n#import <UIKit/UIRegion.h>\n#endif\n```\n\n接下来还需要递归的把每个头文件的内容展开，最后的结果就是一行代码变成超过11000行代码。如果有多个文件都包含来 UIKit 的头文件，这样就会让每个文件的体积都会变得很大，编译过程也会变得越来越慢。这种递归的方式会让项目的编译时间变成：*M source files + N headers => M x N compile time*。\n\n所以这个时候有一个优化方法就是把项目中频繁被引用的文件放到 PCH（Pre-Compile Header）文件中。PCH 会被编译一次并且会被缓存，这就可以缩短编译时间，我们也不需要在不同的文件里面添加import语法。\n\n当然，PCH 也有自己的缺点：\n\n* 维护负担：随着项目变得越来越复杂，我们就会不停的往PCH文件加入内容，内容一旦变多就会变得不好维护。（这也是我们平常在项目中要避免在 ViewController 做太多事情的，要研究 MVVM的缘故。）\n\n* 命名空间污染\n\n\n最后，给大家提供一个例子看看 #import 编译出来之后的文件内容：\n\n```C\n// A.h\n#import \"B.h\"\n \nvoid sampleA() {\n  // A code\n}\n#endif\n```\n\n```C\n// B.h\n#import \"A.h\"\n#import \"A.h\"\n\nvoid sampleB() {\n  // B code\n}\n```\n\n使用 gcc -E B.h 进行预处理之后的内容如下：\n\n```C\n\n# 1 \"B.h\"\n# 1 \"<built-in>\" 1\n# 1 \"<built-in>\" 3\n# 329 \"<built-in>\" 3\n# 1 \"<command line>\" 1\n# 1 \"<built-in>\" 2\n# 1 \"B.h\" 2\n# 1 \"./A.h\" 1\n\n\nvoid sampleA() {\n\n}\n# 2 \"./B.h\" 2\n\nvoid sampleB() {\n\n}\n```\n\n我们在B.h中有两个 #import \"A.h\"，但是这些内容跟我们之前在 A.h 和 B.h 文件中使用 #include 和其他预处理命令之后的处理结果很相似，所以我们就明白了 #import 大概做了什么事。\n\n## 三、@import\n\n在2012年的 LLVM 大会上，苹果的 Doug Gregor 首次提出了 Objective-C 中的 Module。使用 @import 方式导入有几个好处：\n\n* 不需要像 #import 一样得手动去链接 Framework，@import会自动去链接\n\n* @import 工作方式和 PCH 很像，但是 @import 要比 PCH 的效率高出许多\n\n* @import 导入 Modul 优化文件体积变大、编译速度变慢的问题\n\n* 可以部分导入（@import Framework.A）或全部导入（@import Framework）\n\n所以，建议大家尽量使用 @import 来导入文件。如果你以前的项目用的是 #import，那么你也不需要担心，我们只通过 Build Settings 开启 Modules 选项（看下图），#import 和 #include 会自动被映射成 @import，所以你不需要更改原来的代码也能享受 @import带来的好处。\n\n![](http://i.imgur.com/l7ZMUy6.jpg)\n\n详细内容可以看看苹果2013年的 [Advances in Objective-C](https://developer.apple.com/videos/play/wwdc2013/404/)，里面就详细介绍了 Module。\n\n## 四、文件路径\n\n接下来我们来了解一下 *#include <file>* 和 *#include \"file\"*：\n\n* \\#include \\<file>: 表示编译器会直接到系统设定的目录下寻找指定的文件。\n \n* \\#include \"file\": 表示编译器会到当前的目录下寻找指定的文件，如果找不到，则会去系统设定的目录下寻找指定的文件。\n\n---\n参考文献：\n\n1. https://gcc.gnu.org/onlinedocs/cpp/Include-Syntax.html\n\n2. http://stackoverflow.com/questions/18947516/import-vs-import-ios-7\n\n3. https://www.raywenderlich.com/49850/whats-new-in-objective-c-and-foundation-in-ios-7\n\n","slug":"include和import的区别","published":1,"updated":"2018-03-23T08:42:11.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo44p6vk000qarvbha07iv4y","content":"<p>今天我们来了解下面这几种包含文件的方式有什么特点和区别：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include <span class=\"string\">\"fiel\"</span></span><br><span class=\"line\">#include &lt;file&gt;</span><br><span class=\"line\">#<span class=\"keyword\">import</span> \"file\"</span><br><span class=\"line\">#<span class=\"keyword\">import</span> &lt;file&gt;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> Module</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"一、-include\"><a href=\"#一、-include\" class=\"headerlink\" title=\"一、#include\"></a>一、#include</h2><p>学过 C 语言的人都知道，#include 其实是一个预处理命令。它会在预处理的时候简单的把被 #include 包含的文件内容进行复制粘贴。我们来看看下面的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A.h</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// A code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// B.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"A.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// B code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们使用 gcc -E B.h 命令来看看经过预处理后的文件内容大概如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"B.h\"</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">3</span></span><br><span class=\"line\"># <span class=\"number\">329</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">3</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;command line&gt;\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"./A.h\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># <span class=\"number\">2</span> <span class=\"string\">\"B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以看到经过预处理之后，A.h 文件中的内容被直接复制并粘贴到 B.h 文件中来。如果我们在 B.h 文件中多次包含了 A.h 文件，会出现什么情况？比如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A.h</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// A code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// B.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"A.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"A.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// B code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>经过预处理之后的内容大概如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"B.h\"</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">3</span></span><br><span class=\"line\"># <span class=\"number\">329</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">3</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;command line&gt;\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"./A.h\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># <span class=\"number\">2</span> <span class=\"string\">\"B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"./A.h\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># <span class=\"number\">3</span> <span class=\"string\">\"B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>A.h 文件中的 sampleA() 函数出现了两次，所以我们需要利用其他的一些预处理命令来规避这种情况，看看下面的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> FILE_A</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FILE_A</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// A code</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// B.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"A.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"A.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// B code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们再来看看增加了这些预处理命令之后的预处理文件内容：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"B.h\"</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">3</span></span><br><span class=\"line\"># <span class=\"number\">329</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">3</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;command line&gt;\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"./A.h\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># <span class=\"number\">2</span> <span class=\"string\">\"B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>OK，这就正常了。如果我们在 A.h 中包含 B.h，然后又在 B.h 中包含 A.h，具体代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"B.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// A code</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// B.h</span><br><span class=\"line\">#include &quot;A.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">void sampleB() &#123;</span><br><span class=\"line\">  // B code</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们再来看看经过 gcc -E B.h 处理之后的文件内容：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"B.h\"</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">3</span></span><br><span class=\"line\"># <span class=\"number\">329</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">3</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;command line&gt;\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"./A.h\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"./B.h\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"./A.h\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"./B.h\"</span> <span class=\"number\">1</span></span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"./A.h\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"./B.h\"</span> <span class=\"number\">1</span></span><br><span class=\"line\">In file included from ./B.h:<span class=\"number\">1</span>:</span><br><span class=\"line\">In file included from ./A.h:<span class=\"number\">1</span>:</span><br><span class=\"line\">In file included from ./B.h:<span class=\"number\">1</span>:</span><br><span class=\"line\">In file included from ./A.h:<span class=\"number\">1</span>:</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">In file included from ./B.h:<span class=\"number\">1</span>:</span><br><span class=\"line\">In file included from ./A.h:<span class=\"number\">1</span>:</span><br><span class=\"line\">./A.h:<span class=\"number\">1</span>:<span class=\"number\">10</span>: error: <span class=\"meta\">#<span class=\"meta-keyword\">include</span> nested too deeply</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"B.h\"</span></span></span><br><span class=\"line\">         ^</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># <span class=\"number\">2</span> <span class=\"string\">\"./B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># <span class=\"number\">2</span> <span class=\"string\">\"./A.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># <span class=\"number\">2</span> <span class=\"string\">\"./B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># <span class=\"number\">2</span> <span class=\"string\">\"./A.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"># <span class=\"number\">2</span> <span class=\"string\">\"./A.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># <span class=\"number\">2</span> <span class=\"string\">\"./B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">1</span> error generated.</span><br></pre></td></tr></table></figure>\n<p>我们发现 A.h 和 B.h 重复出现，这是因为这个时候 A.h 和 B.h 文件互相引用导致的。从理论上来讲，这个时候会无限循环下去，直至世界终结。在这里最后会出现一句 <em>1 error generated.</em>的提示是 gcc 强行中断了这个预处理的过程，所以我们才能看到这样的结果。那我们可以怎么做？当然是利用前面说的预处理命令来避免循环引用的问题。看下面的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> FILE_A</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FILE_A</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"B.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// A code</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// B.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> FILE_B</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FILE_B</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"A.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// B code</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>这个时候使用 gcc -E B.h 就可以正常的进行预处理，最后的结果如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"B.h\"</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">3</span></span><br><span class=\"line\"># <span class=\"number\">329</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">3</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;command line&gt;\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"./A.h\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"./B.h\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">5</span> <span class=\"string\">\"./A.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># <span class=\"number\">5</span> <span class=\"string\">\"./B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以C程序员总是需要通过各种手段（比如：<a href=\"https://en.wikipedia.org/wiki/Pragma_once\" target=\"_blank\" rel=\"noopener\">#pragma once</a>）来防范此类事件的发生。</p>\n<h2 id=\"二、-import\"><a href=\"#二、-import\" class=\"headerlink\" title=\"二、#import\"></a>二、#import</h2><p>我们在文件中通过#import来导入 iAd Framework：<br><img src=\"http://i.imgur.com/nLPSsNN.jpg\" alt=\"\"></p>\n<p>编译报错：<br><img src=\"http://i.imgur.com/XBXD8wu.jpg\" alt=\"\"></p>\n<p>需要重新导入和链接 Framework：<br><img src=\"http://i.imgur.com/rUnKJGb.jpg\" alt=\"\"><br><img src=\"http://i.imgur.com/XuxVI6b.jpg\" alt=\"\"></p>\n<p>编译成功：<br><img src=\"http://i.imgur.com/QvyQunr.jpg\" alt=\"\"></p>\n<p>从上面的过程中我们就知道在 Objective-C 项目中使用 #import 需要注意导入和链接 Framework，否则是会报错的。</p>\n<p>预处理器在碰到 #import 命令的时候，它会采用递归的方式把被所有头文件的内容复制并粘贴到当前文件中，如果文件依赖层次比较深就会造成预处理后的文件内容体积大幅度变大。</p>\n<p>比如导入 UIKit 的时候只需要一行代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#<span class=\"keyword\">import</span> &lt;UIKit/UIKit.h&gt;</span><br></pre></td></tr></table></figure>\n<p>预处理之后会变成200多行（UIKit.h 文件有200多行代码）：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#<span class=\"keyword\">import</span> &lt;UIKit/UIKitDefines.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#<span class=\"keyword\">if</span> __has_include(&lt;<span class=\"type\">UIKit</span>/<span class=\"type\">UIAccelerometer</span>.h&gt;)</span><br><span class=\"line\">#<span class=\"keyword\">import</span> &lt;UIKit/UIAccelerometer.h&gt;</span><br><span class=\"line\">.....</span><br><span class=\"line\">#<span class=\"keyword\">import</span> &lt;UIKit/UIRegion.h&gt;</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n<p>接下来还需要递归的把每个头文件的内容展开，最后的结果就是一行代码变成超过11000行代码。如果有多个文件都包含来 UIKit 的头文件，这样就会让每个文件的体积都会变得很大，编译过程也会变得越来越慢。这种递归的方式会让项目的编译时间变成：<em>M source files + N headers =&gt; M x N compile time</em>。</p>\n<p>所以这个时候有一个优化方法就是把项目中频繁被引用的文件放到 PCH（Pre-Compile Header）文件中。PCH 会被编译一次并且会被缓存，这就可以缩短编译时间，我们也不需要在不同的文件里面添加import语法。</p>\n<p>当然，PCH 也有自己的缺点：</p>\n<ul>\n<li><p>维护负担：随着项目变得越来越复杂，我们就会不停的往PCH文件加入内容，内容一旦变多就会变得不好维护。（这也是我们平常在项目中要避免在 ViewController 做太多事情的，要研究 MVVM的缘故。）</p>\n</li>\n<li><p>命名空间污染</p>\n</li>\n</ul>\n<p>最后，给大家提供一个例子看看 #import 编译出来之后的文件内容：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A.h</span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"B.h\"</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// A code</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// B.h</span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"A.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"A.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// B code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 gcc -E B.h 进行预处理之后的内容如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"B.h\"</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">3</span></span><br><span class=\"line\"># <span class=\"number\">329</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">3</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;command line&gt;\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"./A.h\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># <span class=\"number\">2</span> <span class=\"string\">\"./B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们在B.h中有两个 #import “A.h”，但是这些内容跟我们之前在 A.h 和 B.h 文件中使用 #include 和其他预处理命令之后的处理结果很相似，所以我们就明白了 #import 大概做了什么事。</p>\n<h2 id=\"三、-import\"><a href=\"#三、-import\" class=\"headerlink\" title=\"三、@import\"></a>三、@import</h2><p>在2012年的 LLVM 大会上，苹果的 Doug Gregor 首次提出了 Objective-C 中的 Module。使用 @import 方式导入有几个好处：</p>\n<ul>\n<li><p>不需要像 #import 一样得手动去链接 Framework，@import会自动去链接</p>\n</li>\n<li><p>@import 工作方式和 PCH 很像，但是 @import 要比 PCH 的效率高出许多</p>\n</li>\n<li><p>@import 导入 Modul 优化文件体积变大、编译速度变慢的问题</p>\n</li>\n<li><p>可以部分导入（@import Framework.A）或全部导入（@import Framework）</p>\n</li>\n</ul>\n<p>所以，建议大家尽量使用 @import 来导入文件。如果你以前的项目用的是 #import，那么你也不需要担心，我们只通过 Build Settings 开启 Modules 选项（看下图），#import 和 #include 会自动被映射成 @import，所以你不需要更改原来的代码也能享受 @import带来的好处。</p>\n<p><img src=\"http://i.imgur.com/l7ZMUy6.jpg\" alt=\"\"></p>\n<p>详细内容可以看看苹果2013年的 <a href=\"https://developer.apple.com/videos/play/wwdc2013/404/\" target=\"_blank\" rel=\"noopener\">Advances in Objective-C</a>，里面就详细介绍了 Module。</p>\n<h2 id=\"四、文件路径\"><a href=\"#四、文件路径\" class=\"headerlink\" title=\"四、文件路径\"></a>四、文件路径</h2><p>接下来我们来了解一下 <em>#include <file></file></em> 和 <em>#include “file”</em>：</p>\n<ul>\n<li><p>#include \\<file>: 表示编译器会直接到系统设定的目录下寻找指定的文件。</file></p>\n</li>\n<li><p>#include “file”: 表示编译器会到当前的目录下寻找指定的文件，如果找不到，则会去系统设定的目录下寻找指定的文件。</p>\n</li>\n</ul>\n<hr>\n<p>参考文献：</p>\n<ol>\n<li><p><a href=\"https://gcc.gnu.org/onlinedocs/cpp/Include-Syntax.html\" target=\"_blank\" rel=\"noopener\">https://gcc.gnu.org/onlinedocs/cpp/Include-Syntax.html</a></p>\n</li>\n<li><p><a href=\"http://stackoverflow.com/questions/18947516/import-vs-import-ios-7\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/18947516/import-vs-import-ios-7</a></p>\n</li>\n<li><p><a href=\"https://www.raywenderlich.com/49850/whats-new-in-objective-c-and-foundation-in-ios-7\" target=\"_blank\" rel=\"noopener\">https://www.raywenderlich.com/49850/whats-new-in-objective-c-and-foundation-in-ios-7</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>今天我们来了解下面这几种包含文件的方式有什么特点和区别：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include <span class=\"string\">\"fiel\"</span></span><br><span class=\"line\">#include &lt;file&gt;</span><br><span class=\"line\">#<span class=\"keyword\">import</span> \"file\"</span><br><span class=\"line\">#<span class=\"keyword\">import</span> &lt;file&gt;</span><br><span class=\"line\">@<span class=\"keyword\">import</span> Module</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"一、-include\"><a href=\"#一、-include\" class=\"headerlink\" title=\"一、#include\"></a>一、#include</h2><p>学过 C 语言的人都知道，#include 其实是一个预处理命令。它会在预处理的时候简单的把被 #include 包含的文件内容进行复制粘贴。我们来看看下面的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A.h</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// A code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// B.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"A.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// B code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们使用 gcc -E B.h 命令来看看经过预处理后的文件内容大概如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"B.h\"</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">3</span></span><br><span class=\"line\"># <span class=\"number\">329</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">3</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;command line&gt;\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"./A.h\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># <span class=\"number\">2</span> <span class=\"string\">\"B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以看到经过预处理之后，A.h 文件中的内容被直接复制并粘贴到 B.h 文件中来。如果我们在 B.h 文件中多次包含了 A.h 文件，会出现什么情况？比如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A.h</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// A code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// B.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"A.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"A.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// B code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>经过预处理之后的内容大概如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"B.h\"</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">3</span></span><br><span class=\"line\"># <span class=\"number\">329</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">3</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;command line&gt;\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"./A.h\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># <span class=\"number\">2</span> <span class=\"string\">\"B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"./A.h\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># <span class=\"number\">3</span> <span class=\"string\">\"B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>A.h 文件中的 sampleA() 函数出现了两次，所以我们需要利用其他的一些预处理命令来规避这种情况，看看下面的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> FILE_A</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FILE_A</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// A code</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// B.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"A.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"A.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// B code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们再来看看增加了这些预处理命令之后的预处理文件内容：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"B.h\"</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">3</span></span><br><span class=\"line\"># <span class=\"number\">329</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">3</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;command line&gt;\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"./A.h\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># <span class=\"number\">2</span> <span class=\"string\">\"B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>OK，这就正常了。如果我们在 A.h 中包含 B.h，然后又在 B.h 中包含 A.h，具体代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"B.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// A code</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// B.h</span><br><span class=\"line\">#include &quot;A.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">void sampleB() &#123;</span><br><span class=\"line\">  // B code</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们再来看看经过 gcc -E B.h 处理之后的文件内容：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"B.h\"</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">3</span></span><br><span class=\"line\"># <span class=\"number\">329</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">3</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;command line&gt;\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"./A.h\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"./B.h\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"./A.h\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"./B.h\"</span> <span class=\"number\">1</span></span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"./A.h\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"./B.h\"</span> <span class=\"number\">1</span></span><br><span class=\"line\">In file included from ./B.h:<span class=\"number\">1</span>:</span><br><span class=\"line\">In file included from ./A.h:<span class=\"number\">1</span>:</span><br><span class=\"line\">In file included from ./B.h:<span class=\"number\">1</span>:</span><br><span class=\"line\">In file included from ./A.h:<span class=\"number\">1</span>:</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">In file included from ./B.h:<span class=\"number\">1</span>:</span><br><span class=\"line\">In file included from ./A.h:<span class=\"number\">1</span>:</span><br><span class=\"line\">./A.h:<span class=\"number\">1</span>:<span class=\"number\">10</span>: error: <span class=\"meta\">#<span class=\"meta-keyword\">include</span> nested too deeply</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"B.h\"</span></span></span><br><span class=\"line\">         ^</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># <span class=\"number\">2</span> <span class=\"string\">\"./B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># <span class=\"number\">2</span> <span class=\"string\">\"./A.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># <span class=\"number\">2</span> <span class=\"string\">\"./B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># <span class=\"number\">2</span> <span class=\"string\">\"./A.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"># <span class=\"number\">2</span> <span class=\"string\">\"./A.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># <span class=\"number\">2</span> <span class=\"string\">\"./B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"number\">1</span> error generated.</span><br></pre></td></tr></table></figure>\n<p>我们发现 A.h 和 B.h 重复出现，这是因为这个时候 A.h 和 B.h 文件互相引用导致的。从理论上来讲，这个时候会无限循环下去，直至世界终结。在这里最后会出现一句 <em>1 error generated.</em>的提示是 gcc 强行中断了这个预处理的过程，所以我们才能看到这样的结果。那我们可以怎么做？当然是利用前面说的预处理命令来避免循环引用的问题。看下面的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> FILE_A</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FILE_A</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"B.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// A code</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// B.h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> FILE_B</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FILE_B</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"A.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// B code</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>这个时候使用 gcc -E B.h 就可以正常的进行预处理，最后的结果如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"B.h\"</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">3</span></span><br><span class=\"line\"># <span class=\"number\">329</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">3</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;command line&gt;\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"./A.h\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"./B.h\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">5</span> <span class=\"string\">\"./A.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># <span class=\"number\">5</span> <span class=\"string\">\"./B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以C程序员总是需要通过各种手段（比如：<a href=\"https://en.wikipedia.org/wiki/Pragma_once\" target=\"_blank\" rel=\"noopener\">#pragma once</a>）来防范此类事件的发生。</p>\n<h2 id=\"二、-import\"><a href=\"#二、-import\" class=\"headerlink\" title=\"二、#import\"></a>二、#import</h2><p>我们在文件中通过#import来导入 iAd Framework：<br><img src=\"http://i.imgur.com/nLPSsNN.jpg\" alt=\"\"></p>\n<p>编译报错：<br><img src=\"http://i.imgur.com/XBXD8wu.jpg\" alt=\"\"></p>\n<p>需要重新导入和链接 Framework：<br><img src=\"http://i.imgur.com/rUnKJGb.jpg\" alt=\"\"><br><img src=\"http://i.imgur.com/XuxVI6b.jpg\" alt=\"\"></p>\n<p>编译成功：<br><img src=\"http://i.imgur.com/QvyQunr.jpg\" alt=\"\"></p>\n<p>从上面的过程中我们就知道在 Objective-C 项目中使用 #import 需要注意导入和链接 Framework，否则是会报错的。</p>\n<p>预处理器在碰到 #import 命令的时候，它会采用递归的方式把被所有头文件的内容复制并粘贴到当前文件中，如果文件依赖层次比较深就会造成预处理后的文件内容体积大幅度变大。</p>\n<p>比如导入 UIKit 的时候只需要一行代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#<span class=\"keyword\">import</span> &lt;UIKit/UIKit.h&gt;</span><br></pre></td></tr></table></figure>\n<p>预处理之后会变成200多行（UIKit.h 文件有200多行代码）：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#<span class=\"keyword\">import</span> &lt;UIKit/UIKitDefines.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#<span class=\"keyword\">if</span> __has_include(&lt;<span class=\"type\">UIKit</span>/<span class=\"type\">UIAccelerometer</span>.h&gt;)</span><br><span class=\"line\">#<span class=\"keyword\">import</span> &lt;UIKit/UIAccelerometer.h&gt;</span><br><span class=\"line\">.....</span><br><span class=\"line\">#<span class=\"keyword\">import</span> &lt;UIKit/UIRegion.h&gt;</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n<p>接下来还需要递归的把每个头文件的内容展开，最后的结果就是一行代码变成超过11000行代码。如果有多个文件都包含来 UIKit 的头文件，这样就会让每个文件的体积都会变得很大，编译过程也会变得越来越慢。这种递归的方式会让项目的编译时间变成：<em>M source files + N headers =&gt; M x N compile time</em>。</p>\n<p>所以这个时候有一个优化方法就是把项目中频繁被引用的文件放到 PCH（Pre-Compile Header）文件中。PCH 会被编译一次并且会被缓存，这就可以缩短编译时间，我们也不需要在不同的文件里面添加import语法。</p>\n<p>当然，PCH 也有自己的缺点：</p>\n<ul>\n<li><p>维护负担：随着项目变得越来越复杂，我们就会不停的往PCH文件加入内容，内容一旦变多就会变得不好维护。（这也是我们平常在项目中要避免在 ViewController 做太多事情的，要研究 MVVM的缘故。）</p>\n</li>\n<li><p>命名空间污染</p>\n</li>\n</ul>\n<p>最后，给大家提供一个例子看看 #import 编译出来之后的文件内容：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A.h</span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"B.h\"</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// A code</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// B.h</span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"A.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"A.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// B code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 gcc -E B.h 进行预处理之后的内容如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"B.h\"</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">3</span></span><br><span class=\"line\"># <span class=\"number\">329</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">3</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;command line&gt;\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"&lt;built-in&gt;\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"># <span class=\"number\">1</span> <span class=\"string\">\"./A.h\"</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"># <span class=\"number\">2</span> <span class=\"string\">\"./B.h\"</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sampleB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们在B.h中有两个 #import “A.h”，但是这些内容跟我们之前在 A.h 和 B.h 文件中使用 #include 和其他预处理命令之后的处理结果很相似，所以我们就明白了 #import 大概做了什么事。</p>\n<h2 id=\"三、-import\"><a href=\"#三、-import\" class=\"headerlink\" title=\"三、@import\"></a>三、@import</h2><p>在2012年的 LLVM 大会上，苹果的 Doug Gregor 首次提出了 Objective-C 中的 Module。使用 @import 方式导入有几个好处：</p>\n<ul>\n<li><p>不需要像 #import 一样得手动去链接 Framework，@import会自动去链接</p>\n</li>\n<li><p>@import 工作方式和 PCH 很像，但是 @import 要比 PCH 的效率高出许多</p>\n</li>\n<li><p>@import 导入 Modul 优化文件体积变大、编译速度变慢的问题</p>\n</li>\n<li><p>可以部分导入（@import Framework.A）或全部导入（@import Framework）</p>\n</li>\n</ul>\n<p>所以，建议大家尽量使用 @import 来导入文件。如果你以前的项目用的是 #import，那么你也不需要担心，我们只通过 Build Settings 开启 Modules 选项（看下图），#import 和 #include 会自动被映射成 @import，所以你不需要更改原来的代码也能享受 @import带来的好处。</p>\n<p><img src=\"http://i.imgur.com/l7ZMUy6.jpg\" alt=\"\"></p>\n<p>详细内容可以看看苹果2013年的 <a href=\"https://developer.apple.com/videos/play/wwdc2013/404/\" target=\"_blank\" rel=\"noopener\">Advances in Objective-C</a>，里面就详细介绍了 Module。</p>\n<h2 id=\"四、文件路径\"><a href=\"#四、文件路径\" class=\"headerlink\" title=\"四、文件路径\"></a>四、文件路径</h2><p>接下来我们来了解一下 <em>#include <file></file></em> 和 <em>#include “file”</em>：</p>\n<ul>\n<li><p>#include \\<file>: 表示编译器会直接到系统设定的目录下寻找指定的文件。</file></p>\n</li>\n<li><p>#include “file”: 表示编译器会到当前的目录下寻找指定的文件，如果找不到，则会去系统设定的目录下寻找指定的文件。</p>\n</li>\n</ul>\n<hr>\n<p>参考文献：</p>\n<ol>\n<li><p><a href=\"https://gcc.gnu.org/onlinedocs/cpp/Include-Syntax.html\" target=\"_blank\" rel=\"noopener\">https://gcc.gnu.org/onlinedocs/cpp/Include-Syntax.html</a></p>\n</li>\n<li><p><a href=\"http://stackoverflow.com/questions/18947516/import-vs-import-ios-7\" target=\"_blank\" rel=\"noopener\">http://stackoverflow.com/questions/18947516/import-vs-import-ios-7</a></p>\n</li>\n<li><p><a href=\"https://www.raywenderlich.com/49850/whats-new-in-objective-c-and-foundation-in-ios-7\" target=\"_blank\" rel=\"noopener\">https://www.raywenderlich.com/49850/whats-new-in-objective-c-and-foundation-in-ios-7</a></p>\n</li>\n</ol>\n"},{"title":"redux 之页面跳转","author":"帕帕","date":"2018-02-26T17:48:56.000Z","thumbnail":"https://images.unsplash.com/photo-1493235431945-90c060301e41?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=0279978342b1a6b4f3e0e00a0784c2e3&auto=format&fit=crop&w=160&q=100","_content":"\n最近正在用 React Native 重构整个项目，我们用了 **[react-native-navigation](https://github.com/krystofcelba/react-native-navigation#rn52)** 这个库来作为项目的导航控制器。\n所以，我们平常会把页面跳转逻辑的时候放在 Screen 里面的，比如:\n\n```Javascript\nclass FirstScreen extends React.Component {\n    \n    // 点击事件\n    _someAction = () => {\n        this.props.navigator.push({\n          screen: 'example.SecondScreen',\n        });\n    }\n    \n    render = () => {\n        ...\n    }\n}\n```\n\n一般情况下，上面的写法没有问题。但是直到我们碰到这样一个需求的时候就抓瞎了：点击一个 PDF 文件，如果 PDF 文件没有下载就先去下载，下载完成之后自动跳转到 PDF 阅读器。由于用了 redux 之后，我们就增加一个 finished 的 state 来判断是否已经下载完成。示例代码如下：\n\n```Javascript\nclass ExampleScreen extends React.Component {\n\n    componentWillReceiveProps = (nextProps) => {\n        // 这里判断下载状态是否已完成，完成的话就去跳转\n        if (nextProps.finished === true) {\n            // 这里需要重置一下状态，不然其他 state 发生变化会多次触发页面的跳转\n            this.props.dispatch(resetFinished());\n            this.props.navigator.push({\n              screen: 'example.PDFScreen',\n            });\n        }\n    }\n    \n    // 点击事件\n    _someAction = () => {\n        // openPDF() 这个 action 会自动去下载 PDF 文件，然后修改 finished 的状态\n        this.props.dispatch(openPDF());\n    }\n    \n    render = () => {\n        ...\n    }\n}\n\nconst mapStateToProps = state => {\n  return {\n    finished: state.finished\n  }\n};\n\nexport default connect(mapStateToProps)(ExampleScreen);\n```\n\n上面的做法是可以实现我们的需求，但是这种写法很蛋疼。因为当你在调用用 openPDF() 的时候，你以为后面的事不需要你操心，然后这个时候有人告诉你还需要在其他地方增加一个中间状态去补充 openPDF() 的后续逻辑处理。\n\n经过讨论之后，我们决定改成用 callback 的方式来实现：\n\n```Javascript\nclass ExampleScreen extends React.Component {\n\n    // 点击事件\n    _someAction = () => {\n        // openPDF() 是一个异步 action\n        this.props.dispatch(openPDF(callback: () => {\n            this.props.navigator.push({\n              screen: 'example.PDFScreen',\n            });\n        }));\n    }\n    \n    render = () => {\n        ...\n    }\n}\n```\n\n使用 callback 的好处就是去掉了一个烦人的中间状态，并且从阅读体验来说很容易让读者明白这个点击事件在干什么。但是在 redux 的 action 方法中增加一个 callback 的调用，看起来也有点不伦不类的。虽然我认为 callback 和其他参数具有相同的法律地位。\n\n其实最好的实现是，这个点击事件应该连页面的跳转逻辑也不需要处理：\n\n```Javascript\nclass ExampleScreen extends React.Component {\n\n    // 点击事件，这个事件只做一件事就是去 dispatch 一个 openPDF() 的 action\n    _someAction = () => {\n        this.props.dispatch(openPDF());\n    }\n    \n    render = () => {\n        ...\n    }\n}\n```\n\n像上面这种实现，我们也就只能在 openPDF() 里动手脚了：\n\n```Javascript\n// action.js\nexport const openPDF = await () => {\n    return dispatch => {\n        // 异步下载 PDF\n        async downloadPDF();\n        // 完成之后通过 router 去实现页面跳转\n        dispatch(openRouter('PDFScreen'));\n    };\n}\n```\n\n> 这里就不再详细说 router 的实现细节了，因为网上有很多现成的资料。（PS: 主要是我也还没看到这一块）\n\n从页面（Screen）的角度来说，我认为这样的处理是最合适的。因为 Screen 只需要关注本页面的 state 和 action，至于跳转的逻辑交给后面的 action 来处理是最好的。\n\n\n\n\n","source":"_posts/redux-之页面跳转.md","raw":"---\ntitle: redux 之页面跳转\nauthor: 帕帕\ndate: 2018-02-26 17:48:56 +0800\ncategories: 技术\ntags: [RN, redux]\nthumbnail: https://images.unsplash.com/photo-1493235431945-90c060301e41?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=0279978342b1a6b4f3e0e00a0784c2e3&auto=format&fit=crop&w=160&q=100\n---\n\n最近正在用 React Native 重构整个项目，我们用了 **[react-native-navigation](https://github.com/krystofcelba/react-native-navigation#rn52)** 这个库来作为项目的导航控制器。\n所以，我们平常会把页面跳转逻辑的时候放在 Screen 里面的，比如:\n\n```Javascript\nclass FirstScreen extends React.Component {\n    \n    // 点击事件\n    _someAction = () => {\n        this.props.navigator.push({\n          screen: 'example.SecondScreen',\n        });\n    }\n    \n    render = () => {\n        ...\n    }\n}\n```\n\n一般情况下，上面的写法没有问题。但是直到我们碰到这样一个需求的时候就抓瞎了：点击一个 PDF 文件，如果 PDF 文件没有下载就先去下载，下载完成之后自动跳转到 PDF 阅读器。由于用了 redux 之后，我们就增加一个 finished 的 state 来判断是否已经下载完成。示例代码如下：\n\n```Javascript\nclass ExampleScreen extends React.Component {\n\n    componentWillReceiveProps = (nextProps) => {\n        // 这里判断下载状态是否已完成，完成的话就去跳转\n        if (nextProps.finished === true) {\n            // 这里需要重置一下状态，不然其他 state 发生变化会多次触发页面的跳转\n            this.props.dispatch(resetFinished());\n            this.props.navigator.push({\n              screen: 'example.PDFScreen',\n            });\n        }\n    }\n    \n    // 点击事件\n    _someAction = () => {\n        // openPDF() 这个 action 会自动去下载 PDF 文件，然后修改 finished 的状态\n        this.props.dispatch(openPDF());\n    }\n    \n    render = () => {\n        ...\n    }\n}\n\nconst mapStateToProps = state => {\n  return {\n    finished: state.finished\n  }\n};\n\nexport default connect(mapStateToProps)(ExampleScreen);\n```\n\n上面的做法是可以实现我们的需求，但是这种写法很蛋疼。因为当你在调用用 openPDF() 的时候，你以为后面的事不需要你操心，然后这个时候有人告诉你还需要在其他地方增加一个中间状态去补充 openPDF() 的后续逻辑处理。\n\n经过讨论之后，我们决定改成用 callback 的方式来实现：\n\n```Javascript\nclass ExampleScreen extends React.Component {\n\n    // 点击事件\n    _someAction = () => {\n        // openPDF() 是一个异步 action\n        this.props.dispatch(openPDF(callback: () => {\n            this.props.navigator.push({\n              screen: 'example.PDFScreen',\n            });\n        }));\n    }\n    \n    render = () => {\n        ...\n    }\n}\n```\n\n使用 callback 的好处就是去掉了一个烦人的中间状态，并且从阅读体验来说很容易让读者明白这个点击事件在干什么。但是在 redux 的 action 方法中增加一个 callback 的调用，看起来也有点不伦不类的。虽然我认为 callback 和其他参数具有相同的法律地位。\n\n其实最好的实现是，这个点击事件应该连页面的跳转逻辑也不需要处理：\n\n```Javascript\nclass ExampleScreen extends React.Component {\n\n    // 点击事件，这个事件只做一件事就是去 dispatch 一个 openPDF() 的 action\n    _someAction = () => {\n        this.props.dispatch(openPDF());\n    }\n    \n    render = () => {\n        ...\n    }\n}\n```\n\n像上面这种实现，我们也就只能在 openPDF() 里动手脚了：\n\n```Javascript\n// action.js\nexport const openPDF = await () => {\n    return dispatch => {\n        // 异步下载 PDF\n        async downloadPDF();\n        // 完成之后通过 router 去实现页面跳转\n        dispatch(openRouter('PDFScreen'));\n    };\n}\n```\n\n> 这里就不再详细说 router 的实现细节了，因为网上有很多现成的资料。（PS: 主要是我也还没看到这一块）\n\n从页面（Screen）的角度来说，我认为这样的处理是最合适的。因为 Screen 只需要关注本页面的 state 和 action，至于跳转的逻辑交给后面的 action 来处理是最好的。\n\n\n\n\n","slug":"redux-之页面跳转","published":1,"updated":"2018-06-13T09:17:50.920Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo44p6vm000uarvb42s57rkc","content":"<p>最近正在用 React Native 重构整个项目，我们用了 <strong><a href=\"https://github.com/krystofcelba/react-native-navigation#rn52\" target=\"_blank\" rel=\"noopener\">react-native-navigation</a></strong> 这个库来作为项目的导航控制器。<br>所以，我们平常会把页面跳转逻辑的时候放在 Screen 里面的，比如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstScreen</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 点击事件</span></span><br><span class=\"line\">    _someAction = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.props.navigator.push(&#123;</span><br><span class=\"line\">          screen: <span class=\"string\">'example.SecondScreen'</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    render = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一般情况下，上面的写法没有问题。但是直到我们碰到这样一个需求的时候就抓瞎了：点击一个 PDF 文件，如果 PDF 文件没有下载就先去下载，下载完成之后自动跳转到 PDF 阅读器。由于用了 redux 之后，我们就增加一个 finished 的 state 来判断是否已经下载完成。示例代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleScreen</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    componentWillReceiveProps = <span class=\"function\">(<span class=\"params\">nextProps</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里判断下载状态是否已完成，完成的话就去跳转</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextProps.finished === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 这里需要重置一下状态，不然其他 state 发生变化会多次触发页面的跳转</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.props.dispatch(resetFinished());</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.props.navigator.push(&#123;</span><br><span class=\"line\">              screen: <span class=\"string\">'example.PDFScreen'</span>,</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 点击事件</span></span><br><span class=\"line\">    _someAction = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// openPDF() 这个 action 会自动去下载 PDF 文件，然后修改 finished 的状态</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.props.dispatch(openPDF());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    render = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mapStateToProps = <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    finished: state.finished</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(mapStateToProps)(ExampleScreen);</span><br></pre></td></tr></table></figure>\n<p>上面的做法是可以实现我们的需求，但是这种写法很蛋疼。因为当你在调用用 openPDF() 的时候，你以为后面的事不需要你操心，然后这个时候有人告诉你还需要在其他地方增加一个中间状态去补充 openPDF() 的后续逻辑处理。</p>\n<p>经过讨论之后，我们决定改成用 callback 的方式来实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleScreen</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 点击事件</span></span><br><span class=\"line\">    _someAction = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// openPDF() 是一个异步 action</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.props.dispatch(openPDF(callback: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.props.navigator.push(&#123;</span><br><span class=\"line\">              screen: <span class=\"string\">'example.PDFScreen'</span>,</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    render = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 callback 的好处就是去掉了一个烦人的中间状态，并且从阅读体验来说很容易让读者明白这个点击事件在干什么。但是在 redux 的 action 方法中增加一个 callback 的调用，看起来也有点不伦不类的。虽然我认为 callback 和其他参数具有相同的法律地位。</p>\n<p>其实最好的实现是，这个点击事件应该连页面的跳转逻辑也不需要处理：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleScreen</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 点击事件，这个事件只做一件事就是去 dispatch 一个 openPDF() 的 action</span></span><br><span class=\"line\">    _someAction = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.props.dispatch(openPDF());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    render = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>像上面这种实现，我们也就只能在 openPDF() 里动手脚了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// action.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> openPDF = <span class=\"keyword\">await</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">dispatch</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 异步下载 PDF</span></span><br><span class=\"line\">        <span class=\"keyword\">async</span> downloadPDF();</span><br><span class=\"line\">        <span class=\"comment\">// 完成之后通过 router 去实现页面跳转</span></span><br><span class=\"line\">        dispatch(openRouter(<span class=\"string\">'PDFScreen'</span>));</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里就不再详细说 router 的实现细节了，因为网上有很多现成的资料。（PS: 主要是我也还没看到这一块）</p>\n</blockquote>\n<p>从页面（Screen）的角度来说，我认为这样的处理是最合适的。因为 Screen 只需要关注本页面的 state 和 action，至于跳转的逻辑交给后面的 action 来处理是最好的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近正在用 React Native 重构整个项目，我们用了 <strong><a href=\"https://github.com/krystofcelba/react-native-navigation#rn52\" target=\"_blank\" rel=\"noopener\">react-native-navigation</a></strong> 这个库来作为项目的导航控制器。<br>所以，我们平常会把页面跳转逻辑的时候放在 Screen 里面的，比如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstScreen</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 点击事件</span></span><br><span class=\"line\">    _someAction = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.props.navigator.push(&#123;</span><br><span class=\"line\">          screen: <span class=\"string\">'example.SecondScreen'</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    render = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一般情况下，上面的写法没有问题。但是直到我们碰到这样一个需求的时候就抓瞎了：点击一个 PDF 文件，如果 PDF 文件没有下载就先去下载，下载完成之后自动跳转到 PDF 阅读器。由于用了 redux 之后，我们就增加一个 finished 的 state 来判断是否已经下载完成。示例代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleScreen</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    componentWillReceiveProps = <span class=\"function\">(<span class=\"params\">nextProps</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里判断下载状态是否已完成，完成的话就去跳转</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextProps.finished === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 这里需要重置一下状态，不然其他 state 发生变化会多次触发页面的跳转</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.props.dispatch(resetFinished());</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.props.navigator.push(&#123;</span><br><span class=\"line\">              screen: <span class=\"string\">'example.PDFScreen'</span>,</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 点击事件</span></span><br><span class=\"line\">    _someAction = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// openPDF() 这个 action 会自动去下载 PDF 文件，然后修改 finished 的状态</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.props.dispatch(openPDF());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    render = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mapStateToProps = <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    finished: state.finished</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> connect(mapStateToProps)(ExampleScreen);</span><br></pre></td></tr></table></figure>\n<p>上面的做法是可以实现我们的需求，但是这种写法很蛋疼。因为当你在调用用 openPDF() 的时候，你以为后面的事不需要你操心，然后这个时候有人告诉你还需要在其他地方增加一个中间状态去补充 openPDF() 的后续逻辑处理。</p>\n<p>经过讨论之后，我们决定改成用 callback 的方式来实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleScreen</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 点击事件</span></span><br><span class=\"line\">    _someAction = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// openPDF() 是一个异步 action</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.props.dispatch(openPDF(callback: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.props.navigator.push(&#123;</span><br><span class=\"line\">              screen: <span class=\"string\">'example.PDFScreen'</span>,</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    render = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 callback 的好处就是去掉了一个烦人的中间状态，并且从阅读体验来说很容易让读者明白这个点击事件在干什么。但是在 redux 的 action 方法中增加一个 callback 的调用，看起来也有点不伦不类的。虽然我认为 callback 和其他参数具有相同的法律地位。</p>\n<p>其实最好的实现是，这个点击事件应该连页面的跳转逻辑也不需要处理：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleScreen</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 点击事件，这个事件只做一件事就是去 dispatch 一个 openPDF() 的 action</span></span><br><span class=\"line\">    _someAction = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.props.dispatch(openPDF());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    render = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>像上面这种实现，我们也就只能在 openPDF() 里动手脚了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// action.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> openPDF = <span class=\"keyword\">await</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">dispatch</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 异步下载 PDF</span></span><br><span class=\"line\">        <span class=\"keyword\">async</span> downloadPDF();</span><br><span class=\"line\">        <span class=\"comment\">// 完成之后通过 router 去实现页面跳转</span></span><br><span class=\"line\">        dispatch(openRouter(<span class=\"string\">'PDFScreen'</span>));</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里就不再详细说 router 的实现细节了，因为网上有很多现成的资料。（PS: 主要是我也还没看到这一块）</p>\n</blockquote>\n<p>从页面（Screen）的角度来说，我认为这样的处理是最合适的。因为 Screen 只需要关注本页面的 state 和 action，至于跳转的逻辑交给后面的 action 来处理是最好的。</p>\n"},{"title":"self 在 block 中的引用计数变化","author":"帕帕","date":"2018-04-19T11:34:51.000Z","thumbnail":"https://images.unsplash.com/photo-1462303966430-8a4708fd729e?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=c9dd0952e673c518403fb8d4c28f93b5&auto=format&fit=crop&w=160&q=60","_content":"\n\n相信大家在 Objective-C 中都会通过 `__waek` 的修饰符来保证 block 和 self 不会互相引用，代码如下:\n\n```Objective-C\n__weak typeof(self) weakSelf = self;\nself.block = ^{\n    __strong typeof(self) strongSelf = self;\n    ...\n}\n```\n\n但是你思考过 self 在这一段旅程中的引用计数变化么，接下来我会通过三个例子来展示这一段旅程是怎样的？\n\n\n```Objective-C\n// 🌰1\nNSLog(@\"Before block：%ld\", CFGetRetainCount((__bridge CFTypeRef)(self)));\nself.block = ^{\n    self;\n    NSLog(@\"Within block：%ld\", CFGetRetainCount((__bridge CFTypeRef)(self)));\n};\nself.block();\nNSLog(@\"After block：%ld\", CFGetRetainCount((__bridge CFTypeRef)(self)));\n\n\n// 🌰2\n__weak typeof(self) weakSelf = self;\nNSLog(@\"Before block：%ld\", CFGetRetainCount((__bridge CFTypeRef)(self)));\nself.block = ^{\n    weakSelf;\n    NSLog(@\"Within block：%ld\", CFGetRetainCount((__bridge CFTypeRef)(weakSelf)));\n};\nself.block();\nNSLog(@\"After block：%ld\", CFGetRetainCount((__bridge CFTypeRef)(self)));\n\n\n// 🌰3\n__weak typeof(self) weakSelf = self;\nNSLog(@\"Before block：%ld\", CFGetRetainCount((__bridge CFTypeRef)(self)));\nself.block = ^{\n    __strong typeof(self) strongSelf = weakSelf;\n    NSLog(@\"Within block：%ld\", CFGetRetainCount((__bridge CFTypeRef)(weakSelf)));\n};\nself.block();\nNSLog(@\"After block：%ld\", CFGetRetainCount((__bridge CFTypeRef)(self)));\n```\n\n我们可以通过 Clang 对上面的三个例子做一下编译，通过编译后的 C 代码（接下来所展示代码都是经过简化），我们可以推导出 self 的引用计数变化。\n\n---\n\n🌰1 的 C 代码如下：\n\n```Objective-C\n// Block 结构体。这个大家可以通过其他的资料去看看，我们今天主要是来探寻一下 self 的旅程，这里就不对 Block 本身做更详细的介绍\nstruct __block_impl {\n  void *isa;\n  int Flags;\n  int Reserved;\n  void *FuncPtr;\n};\n\n// ^{} 的实现\nstruct __BlockTest__test_block_impl_0 {\n    struct __block_impl impl;\n    struct __BlockTest__test_block_desc_0* Desc;\n    BlockTest *const __strong self;\n    __BlockTest__test_block_impl_0(void *fp, struct __BlockTest__test_block_desc_0 *desc, BlockTest *const __strong _self, int flags=0) : self(_self) {\n        impl.isa = &_NSConcreteStackBlock;\n        impl.Flags = flags;\n        impl.FuncPtr = fp;\n        Desc = desc;\n    }\n};\n\n// Block 方法\nstatic void __BlockTest__test_block_func_0(struct __BlockTest__test_block_impl_0 *__cself) {\n    BlockTest *const __strong self = __cself->self; // bound by copy\n    self;\n}\n\n// Block 的 copy 操作\nstatic void __BlockTest__test_block_copy_0(struct __BlockTest__test_block_impl_0*dst, struct __BlockTest__test_block_impl_0*src) {_Block_object_assign((void*)&dst->self, (void*)src->self, 3/*BLOCK_FIELD_IS_OBJECT*/);}\n\n// Block 的 dispose 操作\nstatic void __BlockTest__test_block_dispose_0(struct __BlockTest__test_block_impl_0*src) {_Block_object_dispose((void*)src->self, 3/*BLOCK_FIELD_IS_OBJECT*/);}\n\n// 描述 Block 的 copy 和 dispose\nstatic struct __BlockTest__test_block_desc_0 {\n    size_t reserved;\n    size_t Block_size;\n    void (*copy)(struct __BlockTest__test_block_impl_0*, struct __BlockTest__test_block_impl_0*);\n    void (*dispose)(struct __BlockTest__test_block_impl_0*);\n} __BlockTest__test_block_desc_0_DATA = { 0, sizeof(struct __BlockTest__test_block_impl_0), __BlockTest__test_block_copy_0, __BlockTest__test_block_dispose_0};\n\n// 方法主体\nstatic void _I_BlockTest_test(BlockTest * self, SEL _cmd) {\n    ((void (*)(id, SEL, void (*)()))(void *)objc_msgSend)((id)self, sel_registerName(\"setBlock:\"), ((void (*)())&__BlockTest__test_block_impl_0((void *)__BlockTest__test_block_func_0, &__BlockTest__test_block_desc_0_DATA, self, 570425344)));\n    ((void (*(*)(id, SEL))())(void *)objc_msgSend)((id)self, sel_registerName(\"block\"))();\n\n}\n```\n\n1. 在方法主体里面首先会构造一个 `__BlockTest__test_block_impl_0` 的结构体，该结构体捕获了 self；\n2. `__BlockTest__test_block_impl_0` 的构造函数中使用了 `__strong` 来捕获 self，所以我们知道在构造的时候默认是使用 `__strong` 来捕获外部的对象变量，此时 self 的引用计数应该要 +1；\n3. Block 被构造出来之后需要被赋值给 self，我们知道在 ARC 模式下此时的 Block 会执行 Copy 操作，从 `_NSConcreteStackBlock` 变成 `_NSMallocBlock`；\n4. Block 通过 `__BlockTest__test_block_desc_0_DATA` 找到 Copy 方法的具体实现 `__BlockTest__test_block_copy_0`，从上面的代码中我们知道该方法的实现是通过 `_Block_object_assign` 来实现的（对于这个方法的实现细节暂时还没有找到更相信的资料，有知道的可以麻烦告诉一下），通过名字我们可以猜测出该方法只是把捕获的变量地址直接拷贝一份到堆内存中，但是不会引起引用计数的变化；\n5. 当 Block 被真正执行的时候会通过 `__block_impl` 的 `FuncPtr` 找到真正的实现代码 `__BlockTest__test_block_func_0`，我们观察到在这个方法里面有这样一句代码 `BlockTest *const __strong self = __cself->self`，很明显此时 self 的引用计数会 +1，当该 `__BlockTest__test_block_func_0` 执行完毕之后还是会释放 self 的，此时引用计数会 -1；\n\n从上面的分析过程中，我们知道由于 Block 在构造的时候默认就对捕获的 self 进行了强引用，导致 self 的引用计数 +1；而又由于 self 持有了 Block，所以这里就造成了循环引用的问题。\n\n我们来看 🌰2 能不能解决这个问题？\n\n---\n\n🌰2 的 C 代码如下：\n\n```Objective-C\n// ^{} 结构体\nstruct __BlockTest__test_block_impl_0 {\n    struct __block_impl impl;\n    struct __BlockTest__test_block_desc_0* Desc;\n    BlockTest *const __weak weakSelf;\n    __BlockTest__test_block_impl_0(void *fp, struct __BlockTest__test_block_desc_0 *desc, BlockTest *const __weak _weakSelf, int flags=0) : weakSelf(_weakSelf) {\n        impl.isa = &_NSConcreteStackBlock;\n        impl.Flags = flags;\n        impl.FuncPtr = fp;\n        Desc = desc;\n    }\n};\n\n// Block 方法\nstatic void __BlockTest__test_block_func_0(struct __BlockTest__test_block_impl_0 *__cself) {\n    BlockTest *const __weak weakSelf = __cself->weakSelf; // bound by copy\n    weakSelf;\n}\n\n// Block 的 copy 操作\nstatic void __BlockTest__test_block_copy_0(struct __BlockTest__test_block_impl_0*dst, struct __BlockTest__test_block_impl_0*src) {_Block_object_assign((void*)&dst->weakSelf, (void*)src->weakSelf, 3/*BLOCK_FIELD_IS_OBJECT*/);}\n\n// Block 的 dispose 操作\nstatic void __BlockTest__test_block_dispose_0(struct __BlockTest__test_block_impl_0*src) {_Block_object_dispose((void*)src->weakSelf, 3/*BLOCK_FIELD_IS_OBJECT*/);}\n\n// 描述 Block 的 copy 和 dispose\nstatic struct __BlockTest__test_block_desc_0 {\n    size_t reserved;\n    size_t Block_size;\n    void (*copy)(struct __BlockTest__test_block_impl_0*, struct __BlockTest__test_block_impl_0*);\n    void (*dispose)(struct __BlockTest__test_block_impl_0*);\n} __BlockTest__test_block_desc_0_DATA = { 0, sizeof(struct __BlockTest__test_block_impl_0), __BlockTest__test_block_copy_0, __BlockTest__test_block_dispose_0};\n\n// 方法主体\nstatic void _I_BlockTest_test(BlockTest * self, SEL _cmd) {\n    __attribute__((objc_ownership(weak))) typeof(self) weakSelf = self;\n    ((void (*)(id, SEL, void (*)()))(void *)objc_msgSend)((id)self, sel_registerName(\"setBlock:\"), ((void (*)())&__BlockTest__test_block_impl_0((void *)__BlockTest__test_block_func_0, &__BlockTest__test_block_desc_0_DATA, weakSelf, 570425344)));\n    ((void (*(*)(id, SEL))())(void *)objc_msgSend)((id)self, sel_registerName(\"block\"))();\n}\n```\n\n1. 方法主体会先用 `__weak` 初始化一个 weakSelf，此时 self 的引用计数是不会发生变化的；之后会构造一个`__BlockTest__test_block_impl_0` 的结构体，该结构体捕获了 weakSelf；\n2. `__BlockTest__test_block_impl_0` 的构造函数中使用了 `__weak` 来捕获 weakSelf，所以我们知道此时 self 的引用计数应该要也是不会发生变化的；\n3. 然后把该结构体赋值给 self.block，block 结构体被从栈复制到堆的时候使用了 `_Block_object_assign`，所以此时 self 的引用计数不会发生变化\n4. 然后 block 在被执行的时候做了一下 `__weak` 的操作 `BlockTest *const __weak weakSelf = __cself->weakSelf`，这时候 self 的引用计数也不会发生变化\n5. 由于 block 对 weakSelf 没有强引用，所以在 block 执行完成之后也不需要做释放 weakSelf 的工作\n\n所以，在该例子中 block 无法强引用 weakSelf，weakSelf 的引用计数没有发生任何变化。由于 self 没有被 block 强应用，所以当 self 要被释放的时候，block 也会被释放，这就解决了我们 🌰1 中的循环引用的问题。但是在 block 方法执行的过程中，self 对象有可能已经被释放了，此时如果你还去使用 weakSelf 就有可能造成奔溃的情况。\n\n---\n\n🌰3 的 C 代码如下：\n\n```Objective-C\nstruct __BlockTest__test_block_impl_0 {\n    struct __block_impl impl;\n    struct __BlockTest__test_block_desc_0* Desc;\n    BlockTest *const __weak weakSelf;\n    __BlockTest__test_block_impl_0(void *fp, struct __BlockTest__test_block_desc_0 *desc, BlockTest *const __weak _weakSelf, int flags=0) : weakSelf(_weakSelf) {\n        impl.isa = &_NSConcreteStackBlock;\n        impl.Flags = flags;\n        impl.FuncPtr = fp;\n        Desc = desc;\n    }\n};\n\nstatic void __BlockTest__test_block_func_0(struct __BlockTest__test_block_impl_0 *__cself) {\n    BlockTest *const __weak weakSelf = __cself->weakSelf; // bound by copy\n    __attribute__((objc_ownership(strong))) typeof(self) strongSelf = weakSelf;    \n}\n\nstatic void __BlockTest__test_block_copy_0(struct __BlockTest__test_block_impl_0*dst, struct __BlockTest__test_block_impl_0*src) {_Block_object_assign((void*)&dst->weakSelf, (void*)src->weakSelf, 3/*BLOCK_FIELD_IS_OBJECT*/);}\n\nstatic void __BlockTest__test_block_dispose_0(struct __BlockTest__test_block_impl_0*src) {_Block_object_dispose((void*)src->weakSelf, 3/*BLOCK_FIELD_IS_OBJECT*/);}\n\nstatic struct __BlockTest__test_block_desc_0 {\n    size_t reserved;\n    size_t Block_size;\n    void (*copy)(struct __BlockTest__test_block_impl_0*, struct __BlockTest__test_block_impl_0*);\n    void (*dispose)(struct __BlockTest__test_block_impl_0*);\n} __BlockTest__test_block_desc_0_DATA = { 0, sizeof(struct __BlockTest__test_block_impl_0), __BlockTest__test_block_copy_0, __BlockTest__test_block_dispose_0};\n\nstatic void _I_BlockTest_test(BlockTest * self, SEL _cmd) {\n    __attribute__((objc_ownership(weak))) typeof(self) weakSelf = self;\n    ((void (*)(id, SEL, void (*)()))(void *)objc_msgSend)((id)self, sel_registerName(\"setBlock:\"), ((void (*)())&__BlockTest__test_block_impl_0((void *)__BlockTest__test_block_func_0, &__BlockTest__test_block_desc_0_DATA, weakSelf, 570425344)));\n    ((void (*(*)(id, SEL))())(void *)objc_msgSend)((id)self, sel_registerName(\"block\"))();  \n}\n```\n\n\n前面的步骤都跟 🌰2 中的一样，关键是在 Block 的方法实现里面有点不一样。我们来看看 `__BlockTest__test_block_func_0`，它首先调用了 `BlockTest *const __weak weakSelf = __cself->weakSelf`， 所以它此时的引用计数不会发生变化；但是接下来又用 `objc_ownership(strong)` 来强引用 weakSelf，所以此时 self 的引用计数 +1。这就保证了在函数执行的过程中，Block 会一直持有 self，知道 Block 执行完毕之后会释放 weakSelf。\n\n所以 🌰3 完美的解决了循环应用和直接使用 `__weak` 可能导致奔溃的问题。\n\n---\n\n最后，说一下关于 _Block_object_assign 的猜想：\n\n```\n_Block_object_assign((void*)&dst->weakSelf, (void*)src->weakSelf, 3/*BLOCK_FIELD_IS_OBJECT*/);\n```\n\n通过上面的例子，我们知道 Block 在构造的时候就会对捕获的变量进行内存管理（强引用和弱引用），所以当 Block 在做 Copy 操作的时候其实没有必要对它捕获的变量再做一遍内存管理了。这也应该是 Block 的 Copy 操作使用了 `_Block_object_assign` 这种不会导致引用计数发生变化的方式来实现的原因。\n\n\n\n\n","source":"_posts/self-在-block-中的引用计数变化.md","raw":"---\ntitle: self 在 block 中的引用计数变化\nauthor: 帕帕\ndate: 2018-04-19 11:34:51 +0800\ncategories: 技术 \ntags: [iOS, Objective-C, Block]\nthumbnail: https://images.unsplash.com/photo-1462303966430-8a4708fd729e?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=c9dd0952e673c518403fb8d4c28f93b5&auto=format&fit=crop&w=160&q=60\n---\n\n\n相信大家在 Objective-C 中都会通过 `__waek` 的修饰符来保证 block 和 self 不会互相引用，代码如下:\n\n```Objective-C\n__weak typeof(self) weakSelf = self;\nself.block = ^{\n    __strong typeof(self) strongSelf = self;\n    ...\n}\n```\n\n但是你思考过 self 在这一段旅程中的引用计数变化么，接下来我会通过三个例子来展示这一段旅程是怎样的？\n\n\n```Objective-C\n// 🌰1\nNSLog(@\"Before block：%ld\", CFGetRetainCount((__bridge CFTypeRef)(self)));\nself.block = ^{\n    self;\n    NSLog(@\"Within block：%ld\", CFGetRetainCount((__bridge CFTypeRef)(self)));\n};\nself.block();\nNSLog(@\"After block：%ld\", CFGetRetainCount((__bridge CFTypeRef)(self)));\n\n\n// 🌰2\n__weak typeof(self) weakSelf = self;\nNSLog(@\"Before block：%ld\", CFGetRetainCount((__bridge CFTypeRef)(self)));\nself.block = ^{\n    weakSelf;\n    NSLog(@\"Within block：%ld\", CFGetRetainCount((__bridge CFTypeRef)(weakSelf)));\n};\nself.block();\nNSLog(@\"After block：%ld\", CFGetRetainCount((__bridge CFTypeRef)(self)));\n\n\n// 🌰3\n__weak typeof(self) weakSelf = self;\nNSLog(@\"Before block：%ld\", CFGetRetainCount((__bridge CFTypeRef)(self)));\nself.block = ^{\n    __strong typeof(self) strongSelf = weakSelf;\n    NSLog(@\"Within block：%ld\", CFGetRetainCount((__bridge CFTypeRef)(weakSelf)));\n};\nself.block();\nNSLog(@\"After block：%ld\", CFGetRetainCount((__bridge CFTypeRef)(self)));\n```\n\n我们可以通过 Clang 对上面的三个例子做一下编译，通过编译后的 C 代码（接下来所展示代码都是经过简化），我们可以推导出 self 的引用计数变化。\n\n---\n\n🌰1 的 C 代码如下：\n\n```Objective-C\n// Block 结构体。这个大家可以通过其他的资料去看看，我们今天主要是来探寻一下 self 的旅程，这里就不对 Block 本身做更详细的介绍\nstruct __block_impl {\n  void *isa;\n  int Flags;\n  int Reserved;\n  void *FuncPtr;\n};\n\n// ^{} 的实现\nstruct __BlockTest__test_block_impl_0 {\n    struct __block_impl impl;\n    struct __BlockTest__test_block_desc_0* Desc;\n    BlockTest *const __strong self;\n    __BlockTest__test_block_impl_0(void *fp, struct __BlockTest__test_block_desc_0 *desc, BlockTest *const __strong _self, int flags=0) : self(_self) {\n        impl.isa = &_NSConcreteStackBlock;\n        impl.Flags = flags;\n        impl.FuncPtr = fp;\n        Desc = desc;\n    }\n};\n\n// Block 方法\nstatic void __BlockTest__test_block_func_0(struct __BlockTest__test_block_impl_0 *__cself) {\n    BlockTest *const __strong self = __cself->self; // bound by copy\n    self;\n}\n\n// Block 的 copy 操作\nstatic void __BlockTest__test_block_copy_0(struct __BlockTest__test_block_impl_0*dst, struct __BlockTest__test_block_impl_0*src) {_Block_object_assign((void*)&dst->self, (void*)src->self, 3/*BLOCK_FIELD_IS_OBJECT*/);}\n\n// Block 的 dispose 操作\nstatic void __BlockTest__test_block_dispose_0(struct __BlockTest__test_block_impl_0*src) {_Block_object_dispose((void*)src->self, 3/*BLOCK_FIELD_IS_OBJECT*/);}\n\n// 描述 Block 的 copy 和 dispose\nstatic struct __BlockTest__test_block_desc_0 {\n    size_t reserved;\n    size_t Block_size;\n    void (*copy)(struct __BlockTest__test_block_impl_0*, struct __BlockTest__test_block_impl_0*);\n    void (*dispose)(struct __BlockTest__test_block_impl_0*);\n} __BlockTest__test_block_desc_0_DATA = { 0, sizeof(struct __BlockTest__test_block_impl_0), __BlockTest__test_block_copy_0, __BlockTest__test_block_dispose_0};\n\n// 方法主体\nstatic void _I_BlockTest_test(BlockTest * self, SEL _cmd) {\n    ((void (*)(id, SEL, void (*)()))(void *)objc_msgSend)((id)self, sel_registerName(\"setBlock:\"), ((void (*)())&__BlockTest__test_block_impl_0((void *)__BlockTest__test_block_func_0, &__BlockTest__test_block_desc_0_DATA, self, 570425344)));\n    ((void (*(*)(id, SEL))())(void *)objc_msgSend)((id)self, sel_registerName(\"block\"))();\n\n}\n```\n\n1. 在方法主体里面首先会构造一个 `__BlockTest__test_block_impl_0` 的结构体，该结构体捕获了 self；\n2. `__BlockTest__test_block_impl_0` 的构造函数中使用了 `__strong` 来捕获 self，所以我们知道在构造的时候默认是使用 `__strong` 来捕获外部的对象变量，此时 self 的引用计数应该要 +1；\n3. Block 被构造出来之后需要被赋值给 self，我们知道在 ARC 模式下此时的 Block 会执行 Copy 操作，从 `_NSConcreteStackBlock` 变成 `_NSMallocBlock`；\n4. Block 通过 `__BlockTest__test_block_desc_0_DATA` 找到 Copy 方法的具体实现 `__BlockTest__test_block_copy_0`，从上面的代码中我们知道该方法的实现是通过 `_Block_object_assign` 来实现的（对于这个方法的实现细节暂时还没有找到更相信的资料，有知道的可以麻烦告诉一下），通过名字我们可以猜测出该方法只是把捕获的变量地址直接拷贝一份到堆内存中，但是不会引起引用计数的变化；\n5. 当 Block 被真正执行的时候会通过 `__block_impl` 的 `FuncPtr` 找到真正的实现代码 `__BlockTest__test_block_func_0`，我们观察到在这个方法里面有这样一句代码 `BlockTest *const __strong self = __cself->self`，很明显此时 self 的引用计数会 +1，当该 `__BlockTest__test_block_func_0` 执行完毕之后还是会释放 self 的，此时引用计数会 -1；\n\n从上面的分析过程中，我们知道由于 Block 在构造的时候默认就对捕获的 self 进行了强引用，导致 self 的引用计数 +1；而又由于 self 持有了 Block，所以这里就造成了循环引用的问题。\n\n我们来看 🌰2 能不能解决这个问题？\n\n---\n\n🌰2 的 C 代码如下：\n\n```Objective-C\n// ^{} 结构体\nstruct __BlockTest__test_block_impl_0 {\n    struct __block_impl impl;\n    struct __BlockTest__test_block_desc_0* Desc;\n    BlockTest *const __weak weakSelf;\n    __BlockTest__test_block_impl_0(void *fp, struct __BlockTest__test_block_desc_0 *desc, BlockTest *const __weak _weakSelf, int flags=0) : weakSelf(_weakSelf) {\n        impl.isa = &_NSConcreteStackBlock;\n        impl.Flags = flags;\n        impl.FuncPtr = fp;\n        Desc = desc;\n    }\n};\n\n// Block 方法\nstatic void __BlockTest__test_block_func_0(struct __BlockTest__test_block_impl_0 *__cself) {\n    BlockTest *const __weak weakSelf = __cself->weakSelf; // bound by copy\n    weakSelf;\n}\n\n// Block 的 copy 操作\nstatic void __BlockTest__test_block_copy_0(struct __BlockTest__test_block_impl_0*dst, struct __BlockTest__test_block_impl_0*src) {_Block_object_assign((void*)&dst->weakSelf, (void*)src->weakSelf, 3/*BLOCK_FIELD_IS_OBJECT*/);}\n\n// Block 的 dispose 操作\nstatic void __BlockTest__test_block_dispose_0(struct __BlockTest__test_block_impl_0*src) {_Block_object_dispose((void*)src->weakSelf, 3/*BLOCK_FIELD_IS_OBJECT*/);}\n\n// 描述 Block 的 copy 和 dispose\nstatic struct __BlockTest__test_block_desc_0 {\n    size_t reserved;\n    size_t Block_size;\n    void (*copy)(struct __BlockTest__test_block_impl_0*, struct __BlockTest__test_block_impl_0*);\n    void (*dispose)(struct __BlockTest__test_block_impl_0*);\n} __BlockTest__test_block_desc_0_DATA = { 0, sizeof(struct __BlockTest__test_block_impl_0), __BlockTest__test_block_copy_0, __BlockTest__test_block_dispose_0};\n\n// 方法主体\nstatic void _I_BlockTest_test(BlockTest * self, SEL _cmd) {\n    __attribute__((objc_ownership(weak))) typeof(self) weakSelf = self;\n    ((void (*)(id, SEL, void (*)()))(void *)objc_msgSend)((id)self, sel_registerName(\"setBlock:\"), ((void (*)())&__BlockTest__test_block_impl_0((void *)__BlockTest__test_block_func_0, &__BlockTest__test_block_desc_0_DATA, weakSelf, 570425344)));\n    ((void (*(*)(id, SEL))())(void *)objc_msgSend)((id)self, sel_registerName(\"block\"))();\n}\n```\n\n1. 方法主体会先用 `__weak` 初始化一个 weakSelf，此时 self 的引用计数是不会发生变化的；之后会构造一个`__BlockTest__test_block_impl_0` 的结构体，该结构体捕获了 weakSelf；\n2. `__BlockTest__test_block_impl_0` 的构造函数中使用了 `__weak` 来捕获 weakSelf，所以我们知道此时 self 的引用计数应该要也是不会发生变化的；\n3. 然后把该结构体赋值给 self.block，block 结构体被从栈复制到堆的时候使用了 `_Block_object_assign`，所以此时 self 的引用计数不会发生变化\n4. 然后 block 在被执行的时候做了一下 `__weak` 的操作 `BlockTest *const __weak weakSelf = __cself->weakSelf`，这时候 self 的引用计数也不会发生变化\n5. 由于 block 对 weakSelf 没有强引用，所以在 block 执行完成之后也不需要做释放 weakSelf 的工作\n\n所以，在该例子中 block 无法强引用 weakSelf，weakSelf 的引用计数没有发生任何变化。由于 self 没有被 block 强应用，所以当 self 要被释放的时候，block 也会被释放，这就解决了我们 🌰1 中的循环引用的问题。但是在 block 方法执行的过程中，self 对象有可能已经被释放了，此时如果你还去使用 weakSelf 就有可能造成奔溃的情况。\n\n---\n\n🌰3 的 C 代码如下：\n\n```Objective-C\nstruct __BlockTest__test_block_impl_0 {\n    struct __block_impl impl;\n    struct __BlockTest__test_block_desc_0* Desc;\n    BlockTest *const __weak weakSelf;\n    __BlockTest__test_block_impl_0(void *fp, struct __BlockTest__test_block_desc_0 *desc, BlockTest *const __weak _weakSelf, int flags=0) : weakSelf(_weakSelf) {\n        impl.isa = &_NSConcreteStackBlock;\n        impl.Flags = flags;\n        impl.FuncPtr = fp;\n        Desc = desc;\n    }\n};\n\nstatic void __BlockTest__test_block_func_0(struct __BlockTest__test_block_impl_0 *__cself) {\n    BlockTest *const __weak weakSelf = __cself->weakSelf; // bound by copy\n    __attribute__((objc_ownership(strong))) typeof(self) strongSelf = weakSelf;    \n}\n\nstatic void __BlockTest__test_block_copy_0(struct __BlockTest__test_block_impl_0*dst, struct __BlockTest__test_block_impl_0*src) {_Block_object_assign((void*)&dst->weakSelf, (void*)src->weakSelf, 3/*BLOCK_FIELD_IS_OBJECT*/);}\n\nstatic void __BlockTest__test_block_dispose_0(struct __BlockTest__test_block_impl_0*src) {_Block_object_dispose((void*)src->weakSelf, 3/*BLOCK_FIELD_IS_OBJECT*/);}\n\nstatic struct __BlockTest__test_block_desc_0 {\n    size_t reserved;\n    size_t Block_size;\n    void (*copy)(struct __BlockTest__test_block_impl_0*, struct __BlockTest__test_block_impl_0*);\n    void (*dispose)(struct __BlockTest__test_block_impl_0*);\n} __BlockTest__test_block_desc_0_DATA = { 0, sizeof(struct __BlockTest__test_block_impl_0), __BlockTest__test_block_copy_0, __BlockTest__test_block_dispose_0};\n\nstatic void _I_BlockTest_test(BlockTest * self, SEL _cmd) {\n    __attribute__((objc_ownership(weak))) typeof(self) weakSelf = self;\n    ((void (*)(id, SEL, void (*)()))(void *)objc_msgSend)((id)self, sel_registerName(\"setBlock:\"), ((void (*)())&__BlockTest__test_block_impl_0((void *)__BlockTest__test_block_func_0, &__BlockTest__test_block_desc_0_DATA, weakSelf, 570425344)));\n    ((void (*(*)(id, SEL))())(void *)objc_msgSend)((id)self, sel_registerName(\"block\"))();  \n}\n```\n\n\n前面的步骤都跟 🌰2 中的一样，关键是在 Block 的方法实现里面有点不一样。我们来看看 `__BlockTest__test_block_func_0`，它首先调用了 `BlockTest *const __weak weakSelf = __cself->weakSelf`， 所以它此时的引用计数不会发生变化；但是接下来又用 `objc_ownership(strong)` 来强引用 weakSelf，所以此时 self 的引用计数 +1。这就保证了在函数执行的过程中，Block 会一直持有 self，知道 Block 执行完毕之后会释放 weakSelf。\n\n所以 🌰3 完美的解决了循环应用和直接使用 `__weak` 可能导致奔溃的问题。\n\n---\n\n最后，说一下关于 _Block_object_assign 的猜想：\n\n```\n_Block_object_assign((void*)&dst->weakSelf, (void*)src->weakSelf, 3/*BLOCK_FIELD_IS_OBJECT*/);\n```\n\n通过上面的例子，我们知道 Block 在构造的时候就会对捕获的变量进行内存管理（强引用和弱引用），所以当 Block 在做 Copy 操作的时候其实没有必要对它捕获的变量再做一遍内存管理了。这也应该是 Block 的 Copy 操作使用了 `_Block_object_assign` 这种不会导致引用计数发生变化的方式来实现的原因。\n\n\n\n\n","slug":"self-在-block-中的引用计数变化","published":1,"updated":"2018-11-05T09:27:41.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo44p6vo000xarvb819pqrl7","content":"<p>相信大家在 Objective-C 中都会通过 <code>__waek</code> 的修饰符来保证 block 和 self 不会互相引用，代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__weak typeof(self) weakSelf = self;</span><br><span class=\"line\">self.block = ^&#123;</span><br><span class=\"line\">    __strong typeof(self) strongSelf = self;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是你思考过 self 在这一段旅程中的引用计数变化么，接下来我会通过三个例子来展示这一段旅程是怎样的？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 🌰1</span><br><span class=\"line\">NSLog(@&quot;Before block：%ld&quot;, CFGetRetainCount((__bridge CFTypeRef)(self)));</span><br><span class=\"line\">self.block = ^&#123;</span><br><span class=\"line\">    self;</span><br><span class=\"line\">    NSLog(@&quot;Within block：%ld&quot;, CFGetRetainCount((__bridge CFTypeRef)(self)));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">self.block();</span><br><span class=\"line\">NSLog(@&quot;After block：%ld&quot;, CFGetRetainCount((__bridge CFTypeRef)(self)));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 🌰2</span><br><span class=\"line\">__weak typeof(self) weakSelf = self;</span><br><span class=\"line\">NSLog(@&quot;Before block：%ld&quot;, CFGetRetainCount((__bridge CFTypeRef)(self)));</span><br><span class=\"line\">self.block = ^&#123;</span><br><span class=\"line\">    weakSelf;</span><br><span class=\"line\">    NSLog(@&quot;Within block：%ld&quot;, CFGetRetainCount((__bridge CFTypeRef)(weakSelf)));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">self.block();</span><br><span class=\"line\">NSLog(@&quot;After block：%ld&quot;, CFGetRetainCount((__bridge CFTypeRef)(self)));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 🌰3</span><br><span class=\"line\">__weak typeof(self) weakSelf = self;</span><br><span class=\"line\">NSLog(@&quot;Before block：%ld&quot;, CFGetRetainCount((__bridge CFTypeRef)(self)));</span><br><span class=\"line\">self.block = ^&#123;</span><br><span class=\"line\">    __strong typeof(self) strongSelf = weakSelf;</span><br><span class=\"line\">    NSLog(@&quot;Within block：%ld&quot;, CFGetRetainCount((__bridge CFTypeRef)(weakSelf)));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">self.block();</span><br><span class=\"line\">NSLog(@&quot;After block：%ld&quot;, CFGetRetainCount((__bridge CFTypeRef)(self)));</span><br></pre></td></tr></table></figure>\n<p>我们可以通过 Clang 对上面的三个例子做一下编译，通过编译后的 C 代码（接下来所展示代码都是经过简化），我们可以推导出 self 的引用计数变化。</p>\n<hr>\n<p>🌰1 的 C 代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Block 结构体。这个大家可以通过其他的资料去看看，我们今天主要是来探寻一下 self 的旅程，这里就不对 Block 本身做更详细的介绍</span><br><span class=\"line\">struct __block_impl &#123;</span><br><span class=\"line\">  void *isa;</span><br><span class=\"line\">  int Flags;</span><br><span class=\"line\">  int Reserved;</span><br><span class=\"line\">  void *FuncPtr;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// ^&#123;&#125; 的实现</span><br><span class=\"line\">struct __BlockTest__test_block_impl_0 &#123;</span><br><span class=\"line\">    struct __block_impl impl;</span><br><span class=\"line\">    struct __BlockTest__test_block_desc_0* Desc;</span><br><span class=\"line\">    BlockTest *const __strong self;</span><br><span class=\"line\">    __BlockTest__test_block_impl_0(void *fp, struct __BlockTest__test_block_desc_0 *desc, BlockTest *const __strong _self, int flags=0) : self(_self) &#123;</span><br><span class=\"line\">        impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class=\"line\">        impl.Flags = flags;</span><br><span class=\"line\">        impl.FuncPtr = fp;</span><br><span class=\"line\">        Desc = desc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// Block 方法</span><br><span class=\"line\">static void __BlockTest__test_block_func_0(struct __BlockTest__test_block_impl_0 *__cself) &#123;</span><br><span class=\"line\">    BlockTest *const __strong self = __cself-&gt;self; // bound by copy</span><br><span class=\"line\">    self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Block 的 copy 操作</span><br><span class=\"line\">static void __BlockTest__test_block_copy_0(struct __BlockTest__test_block_impl_0*dst, struct __BlockTest__test_block_impl_0*src) &#123;_Block_object_assign((void*)&amp;dst-&gt;self, (void*)src-&gt;self, 3/*BLOCK_FIELD_IS_OBJECT*/);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Block 的 dispose 操作</span><br><span class=\"line\">static void __BlockTest__test_block_dispose_0(struct __BlockTest__test_block_impl_0*src) &#123;_Block_object_dispose((void*)src-&gt;self, 3/*BLOCK_FIELD_IS_OBJECT*/);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 描述 Block 的 copy 和 dispose</span><br><span class=\"line\">static struct __BlockTest__test_block_desc_0 &#123;</span><br><span class=\"line\">    size_t reserved;</span><br><span class=\"line\">    size_t Block_size;</span><br><span class=\"line\">    void (*copy)(struct __BlockTest__test_block_impl_0*, struct __BlockTest__test_block_impl_0*);</span><br><span class=\"line\">    void (*dispose)(struct __BlockTest__test_block_impl_0*);</span><br><span class=\"line\">&#125; __BlockTest__test_block_desc_0_DATA = &#123; 0, sizeof(struct __BlockTest__test_block_impl_0), __BlockTest__test_block_copy_0, __BlockTest__test_block_dispose_0&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 方法主体</span><br><span class=\"line\">static void _I_BlockTest_test(BlockTest * self, SEL _cmd) &#123;</span><br><span class=\"line\">    ((void (*)(id, SEL, void (*)()))(void *)objc_msgSend)((id)self, sel_registerName(&quot;setBlock:&quot;), ((void (*)())&amp;__BlockTest__test_block_impl_0((void *)__BlockTest__test_block_func_0, &amp;__BlockTest__test_block_desc_0_DATA, self, 570425344)));</span><br><span class=\"line\">    ((void (*(*)(id, SEL))())(void *)objc_msgSend)((id)self, sel_registerName(&quot;block&quot;))();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>在方法主体里面首先会构造一个 <code>__BlockTest__test_block_impl_0</code> 的结构体，该结构体捕获了 self；</li>\n<li><code>__BlockTest__test_block_impl_0</code> 的构造函数中使用了 <code>__strong</code> 来捕获 self，所以我们知道在构造的时候默认是使用 <code>__strong</code> 来捕获外部的对象变量，此时 self 的引用计数应该要 +1；</li>\n<li>Block 被构造出来之后需要被赋值给 self，我们知道在 ARC 模式下此时的 Block 会执行 Copy 操作，从 <code>_NSConcreteStackBlock</code> 变成 <code>_NSMallocBlock</code>；</li>\n<li>Block 通过 <code>__BlockTest__test_block_desc_0_DATA</code> 找到 Copy 方法的具体实现 <code>__BlockTest__test_block_copy_0</code>，从上面的代码中我们知道该方法的实现是通过 <code>_Block_object_assign</code> 来实现的（对于这个方法的实现细节暂时还没有找到更相信的资料，有知道的可以麻烦告诉一下），通过名字我们可以猜测出该方法只是把捕获的变量地址直接拷贝一份到堆内存中，但是不会引起引用计数的变化；</li>\n<li>当 Block 被真正执行的时候会通过 <code>__block_impl</code> 的 <code>FuncPtr</code> 找到真正的实现代码 <code>__BlockTest__test_block_func_0</code>，我们观察到在这个方法里面有这样一句代码 <code>BlockTest *const __strong self = __cself-&gt;self</code>，很明显此时 self 的引用计数会 +1，当该 <code>__BlockTest__test_block_func_0</code> 执行完毕之后还是会释放 self 的，此时引用计数会 -1；</li>\n</ol>\n<p>从上面的分析过程中，我们知道由于 Block 在构造的时候默认就对捕获的 self 进行了强引用，导致 self 的引用计数 +1；而又由于 self 持有了 Block，所以这里就造成了循环引用的问题。</p>\n<p>我们来看 🌰2 能不能解决这个问题？</p>\n<hr>\n<p>🌰2 的 C 代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ^&#123;&#125; 结构体</span><br><span class=\"line\">struct __BlockTest__test_block_impl_0 &#123;</span><br><span class=\"line\">    struct __block_impl impl;</span><br><span class=\"line\">    struct __BlockTest__test_block_desc_0* Desc;</span><br><span class=\"line\">    BlockTest *const __weak weakSelf;</span><br><span class=\"line\">    __BlockTest__test_block_impl_0(void *fp, struct __BlockTest__test_block_desc_0 *desc, BlockTest *const __weak _weakSelf, int flags=0) : weakSelf(_weakSelf) &#123;</span><br><span class=\"line\">        impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class=\"line\">        impl.Flags = flags;</span><br><span class=\"line\">        impl.FuncPtr = fp;</span><br><span class=\"line\">        Desc = desc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// Block 方法</span><br><span class=\"line\">static void __BlockTest__test_block_func_0(struct __BlockTest__test_block_impl_0 *__cself) &#123;</span><br><span class=\"line\">    BlockTest *const __weak weakSelf = __cself-&gt;weakSelf; // bound by copy</span><br><span class=\"line\">    weakSelf;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Block 的 copy 操作</span><br><span class=\"line\">static void __BlockTest__test_block_copy_0(struct __BlockTest__test_block_impl_0*dst, struct __BlockTest__test_block_impl_0*src) &#123;_Block_object_assign((void*)&amp;dst-&gt;weakSelf, (void*)src-&gt;weakSelf, 3/*BLOCK_FIELD_IS_OBJECT*/);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Block 的 dispose 操作</span><br><span class=\"line\">static void __BlockTest__test_block_dispose_0(struct __BlockTest__test_block_impl_0*src) &#123;_Block_object_dispose((void*)src-&gt;weakSelf, 3/*BLOCK_FIELD_IS_OBJECT*/);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 描述 Block 的 copy 和 dispose</span><br><span class=\"line\">static struct __BlockTest__test_block_desc_0 &#123;</span><br><span class=\"line\">    size_t reserved;</span><br><span class=\"line\">    size_t Block_size;</span><br><span class=\"line\">    void (*copy)(struct __BlockTest__test_block_impl_0*, struct __BlockTest__test_block_impl_0*);</span><br><span class=\"line\">    void (*dispose)(struct __BlockTest__test_block_impl_0*);</span><br><span class=\"line\">&#125; __BlockTest__test_block_desc_0_DATA = &#123; 0, sizeof(struct __BlockTest__test_block_impl_0), __BlockTest__test_block_copy_0, __BlockTest__test_block_dispose_0&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 方法主体</span><br><span class=\"line\">static void _I_BlockTest_test(BlockTest * self, SEL _cmd) &#123;</span><br><span class=\"line\">    __attribute__((objc_ownership(weak))) typeof(self) weakSelf = self;</span><br><span class=\"line\">    ((void (*)(id, SEL, void (*)()))(void *)objc_msgSend)((id)self, sel_registerName(&quot;setBlock:&quot;), ((void (*)())&amp;__BlockTest__test_block_impl_0((void *)__BlockTest__test_block_func_0, &amp;__BlockTest__test_block_desc_0_DATA, weakSelf, 570425344)));</span><br><span class=\"line\">    ((void (*(*)(id, SEL))())(void *)objc_msgSend)((id)self, sel_registerName(&quot;block&quot;))();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>方法主体会先用 <code>__weak</code> 初始化一个 weakSelf，此时 self 的引用计数是不会发生变化的；之后会构造一个<code>__BlockTest__test_block_impl_0</code> 的结构体，该结构体捕获了 weakSelf；</li>\n<li><code>__BlockTest__test_block_impl_0</code> 的构造函数中使用了 <code>__weak</code> 来捕获 weakSelf，所以我们知道此时 self 的引用计数应该要也是不会发生变化的；</li>\n<li>然后把该结构体赋值给 self.block，block 结构体被从栈复制到堆的时候使用了 <code>_Block_object_assign</code>，所以此时 self 的引用计数不会发生变化</li>\n<li>然后 block 在被执行的时候做了一下 <code>__weak</code> 的操作 <code>BlockTest *const __weak weakSelf = __cself-&gt;weakSelf</code>，这时候 self 的引用计数也不会发生变化</li>\n<li>由于 block 对 weakSelf 没有强引用，所以在 block 执行完成之后也不需要做释放 weakSelf 的工作</li>\n</ol>\n<p>所以，在该例子中 block 无法强引用 weakSelf，weakSelf 的引用计数没有发生任何变化。由于 self 没有被 block 强应用，所以当 self 要被释放的时候，block 也会被释放，这就解决了我们 🌰1 中的循环引用的问题。但是在 block 方法执行的过程中，self 对象有可能已经被释放了，此时如果你还去使用 weakSelf 就有可能造成奔溃的情况。</p>\n<hr>\n<p>🌰3 的 C 代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct __BlockTest__test_block_impl_0 &#123;</span><br><span class=\"line\">    struct __block_impl impl;</span><br><span class=\"line\">    struct __BlockTest__test_block_desc_0* Desc;</span><br><span class=\"line\">    BlockTest *const __weak weakSelf;</span><br><span class=\"line\">    __BlockTest__test_block_impl_0(void *fp, struct __BlockTest__test_block_desc_0 *desc, BlockTest *const __weak _weakSelf, int flags=0) : weakSelf(_weakSelf) &#123;</span><br><span class=\"line\">        impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class=\"line\">        impl.Flags = flags;</span><br><span class=\"line\">        impl.FuncPtr = fp;</span><br><span class=\"line\">        Desc = desc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">static void __BlockTest__test_block_func_0(struct __BlockTest__test_block_impl_0 *__cself) &#123;</span><br><span class=\"line\">    BlockTest *const __weak weakSelf = __cself-&gt;weakSelf; // bound by copy</span><br><span class=\"line\">    __attribute__((objc_ownership(strong))) typeof(self) strongSelf = weakSelf;    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static void __BlockTest__test_block_copy_0(struct __BlockTest__test_block_impl_0*dst, struct __BlockTest__test_block_impl_0*src) &#123;_Block_object_assign((void*)&amp;dst-&gt;weakSelf, (void*)src-&gt;weakSelf, 3/*BLOCK_FIELD_IS_OBJECT*/);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static void __BlockTest__test_block_dispose_0(struct __BlockTest__test_block_impl_0*src) &#123;_Block_object_dispose((void*)src-&gt;weakSelf, 3/*BLOCK_FIELD_IS_OBJECT*/);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static struct __BlockTest__test_block_desc_0 &#123;</span><br><span class=\"line\">    size_t reserved;</span><br><span class=\"line\">    size_t Block_size;</span><br><span class=\"line\">    void (*copy)(struct __BlockTest__test_block_impl_0*, struct __BlockTest__test_block_impl_0*);</span><br><span class=\"line\">    void (*dispose)(struct __BlockTest__test_block_impl_0*);</span><br><span class=\"line\">&#125; __BlockTest__test_block_desc_0_DATA = &#123; 0, sizeof(struct __BlockTest__test_block_impl_0), __BlockTest__test_block_copy_0, __BlockTest__test_block_dispose_0&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">static void _I_BlockTest_test(BlockTest * self, SEL _cmd) &#123;</span><br><span class=\"line\">    __attribute__((objc_ownership(weak))) typeof(self) weakSelf = self;</span><br><span class=\"line\">    ((void (*)(id, SEL, void (*)()))(void *)objc_msgSend)((id)self, sel_registerName(&quot;setBlock:&quot;), ((void (*)())&amp;__BlockTest__test_block_impl_0((void *)__BlockTest__test_block_func_0, &amp;__BlockTest__test_block_desc_0_DATA, weakSelf, 570425344)));</span><br><span class=\"line\">    ((void (*(*)(id, SEL))())(void *)objc_msgSend)((id)self, sel_registerName(&quot;block&quot;))();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>前面的步骤都跟 🌰2 中的一样，关键是在 Block 的方法实现里面有点不一样。我们来看看 <code>__BlockTest__test_block_func_0</code>，它首先调用了 <code>BlockTest *const __weak weakSelf = __cself-&gt;weakSelf</code>， 所以它此时的引用计数不会发生变化；但是接下来又用 <code>objc_ownership(strong)</code> 来强引用 weakSelf，所以此时 self 的引用计数 +1。这就保证了在函数执行的过程中，Block 会一直持有 self，知道 Block 执行完毕之后会释放 weakSelf。</p>\n<p>所以 🌰3 完美的解决了循环应用和直接使用 <code>__weak</code> 可能导致奔溃的问题。</p>\n<hr>\n<p>最后，说一下关于 _Block_object_assign 的猜想：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_Block_object_assign((void*)&amp;dst-&gt;weakSelf, (void*)src-&gt;weakSelf, 3/*BLOCK_FIELD_IS_OBJECT*/);</span><br></pre></td></tr></table></figure>\n<p>通过上面的例子，我们知道 Block 在构造的时候就会对捕获的变量进行内存管理（强引用和弱引用），所以当 Block 在做 Copy 操作的时候其实没有必要对它捕获的变量再做一遍内存管理了。这也应该是 Block 的 Copy 操作使用了 <code>_Block_object_assign</code> 这种不会导致引用计数发生变化的方式来实现的原因。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>相信大家在 Objective-C 中都会通过 <code>__waek</code> 的修饰符来保证 block 和 self 不会互相引用，代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__weak typeof(self) weakSelf = self;</span><br><span class=\"line\">self.block = ^&#123;</span><br><span class=\"line\">    __strong typeof(self) strongSelf = self;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是你思考过 self 在这一段旅程中的引用计数变化么，接下来我会通过三个例子来展示这一段旅程是怎样的？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 🌰1</span><br><span class=\"line\">NSLog(@&quot;Before block：%ld&quot;, CFGetRetainCount((__bridge CFTypeRef)(self)));</span><br><span class=\"line\">self.block = ^&#123;</span><br><span class=\"line\">    self;</span><br><span class=\"line\">    NSLog(@&quot;Within block：%ld&quot;, CFGetRetainCount((__bridge CFTypeRef)(self)));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">self.block();</span><br><span class=\"line\">NSLog(@&quot;After block：%ld&quot;, CFGetRetainCount((__bridge CFTypeRef)(self)));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 🌰2</span><br><span class=\"line\">__weak typeof(self) weakSelf = self;</span><br><span class=\"line\">NSLog(@&quot;Before block：%ld&quot;, CFGetRetainCount((__bridge CFTypeRef)(self)));</span><br><span class=\"line\">self.block = ^&#123;</span><br><span class=\"line\">    weakSelf;</span><br><span class=\"line\">    NSLog(@&quot;Within block：%ld&quot;, CFGetRetainCount((__bridge CFTypeRef)(weakSelf)));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">self.block();</span><br><span class=\"line\">NSLog(@&quot;After block：%ld&quot;, CFGetRetainCount((__bridge CFTypeRef)(self)));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 🌰3</span><br><span class=\"line\">__weak typeof(self) weakSelf = self;</span><br><span class=\"line\">NSLog(@&quot;Before block：%ld&quot;, CFGetRetainCount((__bridge CFTypeRef)(self)));</span><br><span class=\"line\">self.block = ^&#123;</span><br><span class=\"line\">    __strong typeof(self) strongSelf = weakSelf;</span><br><span class=\"line\">    NSLog(@&quot;Within block：%ld&quot;, CFGetRetainCount((__bridge CFTypeRef)(weakSelf)));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">self.block();</span><br><span class=\"line\">NSLog(@&quot;After block：%ld&quot;, CFGetRetainCount((__bridge CFTypeRef)(self)));</span><br></pre></td></tr></table></figure>\n<p>我们可以通过 Clang 对上面的三个例子做一下编译，通过编译后的 C 代码（接下来所展示代码都是经过简化），我们可以推导出 self 的引用计数变化。</p>\n<hr>\n<p>🌰1 的 C 代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Block 结构体。这个大家可以通过其他的资料去看看，我们今天主要是来探寻一下 self 的旅程，这里就不对 Block 本身做更详细的介绍</span><br><span class=\"line\">struct __block_impl &#123;</span><br><span class=\"line\">  void *isa;</span><br><span class=\"line\">  int Flags;</span><br><span class=\"line\">  int Reserved;</span><br><span class=\"line\">  void *FuncPtr;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// ^&#123;&#125; 的实现</span><br><span class=\"line\">struct __BlockTest__test_block_impl_0 &#123;</span><br><span class=\"line\">    struct __block_impl impl;</span><br><span class=\"line\">    struct __BlockTest__test_block_desc_0* Desc;</span><br><span class=\"line\">    BlockTest *const __strong self;</span><br><span class=\"line\">    __BlockTest__test_block_impl_0(void *fp, struct __BlockTest__test_block_desc_0 *desc, BlockTest *const __strong _self, int flags=0) : self(_self) &#123;</span><br><span class=\"line\">        impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class=\"line\">        impl.Flags = flags;</span><br><span class=\"line\">        impl.FuncPtr = fp;</span><br><span class=\"line\">        Desc = desc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// Block 方法</span><br><span class=\"line\">static void __BlockTest__test_block_func_0(struct __BlockTest__test_block_impl_0 *__cself) &#123;</span><br><span class=\"line\">    BlockTest *const __strong self = __cself-&gt;self; // bound by copy</span><br><span class=\"line\">    self;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Block 的 copy 操作</span><br><span class=\"line\">static void __BlockTest__test_block_copy_0(struct __BlockTest__test_block_impl_0*dst, struct __BlockTest__test_block_impl_0*src) &#123;_Block_object_assign((void*)&amp;dst-&gt;self, (void*)src-&gt;self, 3/*BLOCK_FIELD_IS_OBJECT*/);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Block 的 dispose 操作</span><br><span class=\"line\">static void __BlockTest__test_block_dispose_0(struct __BlockTest__test_block_impl_0*src) &#123;_Block_object_dispose((void*)src-&gt;self, 3/*BLOCK_FIELD_IS_OBJECT*/);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 描述 Block 的 copy 和 dispose</span><br><span class=\"line\">static struct __BlockTest__test_block_desc_0 &#123;</span><br><span class=\"line\">    size_t reserved;</span><br><span class=\"line\">    size_t Block_size;</span><br><span class=\"line\">    void (*copy)(struct __BlockTest__test_block_impl_0*, struct __BlockTest__test_block_impl_0*);</span><br><span class=\"line\">    void (*dispose)(struct __BlockTest__test_block_impl_0*);</span><br><span class=\"line\">&#125; __BlockTest__test_block_desc_0_DATA = &#123; 0, sizeof(struct __BlockTest__test_block_impl_0), __BlockTest__test_block_copy_0, __BlockTest__test_block_dispose_0&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 方法主体</span><br><span class=\"line\">static void _I_BlockTest_test(BlockTest * self, SEL _cmd) &#123;</span><br><span class=\"line\">    ((void (*)(id, SEL, void (*)()))(void *)objc_msgSend)((id)self, sel_registerName(&quot;setBlock:&quot;), ((void (*)())&amp;__BlockTest__test_block_impl_0((void *)__BlockTest__test_block_func_0, &amp;__BlockTest__test_block_desc_0_DATA, self, 570425344)));</span><br><span class=\"line\">    ((void (*(*)(id, SEL))())(void *)objc_msgSend)((id)self, sel_registerName(&quot;block&quot;))();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>在方法主体里面首先会构造一个 <code>__BlockTest__test_block_impl_0</code> 的结构体，该结构体捕获了 self；</li>\n<li><code>__BlockTest__test_block_impl_0</code> 的构造函数中使用了 <code>__strong</code> 来捕获 self，所以我们知道在构造的时候默认是使用 <code>__strong</code> 来捕获外部的对象变量，此时 self 的引用计数应该要 +1；</li>\n<li>Block 被构造出来之后需要被赋值给 self，我们知道在 ARC 模式下此时的 Block 会执行 Copy 操作，从 <code>_NSConcreteStackBlock</code> 变成 <code>_NSMallocBlock</code>；</li>\n<li>Block 通过 <code>__BlockTest__test_block_desc_0_DATA</code> 找到 Copy 方法的具体实现 <code>__BlockTest__test_block_copy_0</code>，从上面的代码中我们知道该方法的实现是通过 <code>_Block_object_assign</code> 来实现的（对于这个方法的实现细节暂时还没有找到更相信的资料，有知道的可以麻烦告诉一下），通过名字我们可以猜测出该方法只是把捕获的变量地址直接拷贝一份到堆内存中，但是不会引起引用计数的变化；</li>\n<li>当 Block 被真正执行的时候会通过 <code>__block_impl</code> 的 <code>FuncPtr</code> 找到真正的实现代码 <code>__BlockTest__test_block_func_0</code>，我们观察到在这个方法里面有这样一句代码 <code>BlockTest *const __strong self = __cself-&gt;self</code>，很明显此时 self 的引用计数会 +1，当该 <code>__BlockTest__test_block_func_0</code> 执行完毕之后还是会释放 self 的，此时引用计数会 -1；</li>\n</ol>\n<p>从上面的分析过程中，我们知道由于 Block 在构造的时候默认就对捕获的 self 进行了强引用，导致 self 的引用计数 +1；而又由于 self 持有了 Block，所以这里就造成了循环引用的问题。</p>\n<p>我们来看 🌰2 能不能解决这个问题？</p>\n<hr>\n<p>🌰2 的 C 代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ^&#123;&#125; 结构体</span><br><span class=\"line\">struct __BlockTest__test_block_impl_0 &#123;</span><br><span class=\"line\">    struct __block_impl impl;</span><br><span class=\"line\">    struct __BlockTest__test_block_desc_0* Desc;</span><br><span class=\"line\">    BlockTest *const __weak weakSelf;</span><br><span class=\"line\">    __BlockTest__test_block_impl_0(void *fp, struct __BlockTest__test_block_desc_0 *desc, BlockTest *const __weak _weakSelf, int flags=0) : weakSelf(_weakSelf) &#123;</span><br><span class=\"line\">        impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class=\"line\">        impl.Flags = flags;</span><br><span class=\"line\">        impl.FuncPtr = fp;</span><br><span class=\"line\">        Desc = desc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// Block 方法</span><br><span class=\"line\">static void __BlockTest__test_block_func_0(struct __BlockTest__test_block_impl_0 *__cself) &#123;</span><br><span class=\"line\">    BlockTest *const __weak weakSelf = __cself-&gt;weakSelf; // bound by copy</span><br><span class=\"line\">    weakSelf;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Block 的 copy 操作</span><br><span class=\"line\">static void __BlockTest__test_block_copy_0(struct __BlockTest__test_block_impl_0*dst, struct __BlockTest__test_block_impl_0*src) &#123;_Block_object_assign((void*)&amp;dst-&gt;weakSelf, (void*)src-&gt;weakSelf, 3/*BLOCK_FIELD_IS_OBJECT*/);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Block 的 dispose 操作</span><br><span class=\"line\">static void __BlockTest__test_block_dispose_0(struct __BlockTest__test_block_impl_0*src) &#123;_Block_object_dispose((void*)src-&gt;weakSelf, 3/*BLOCK_FIELD_IS_OBJECT*/);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 描述 Block 的 copy 和 dispose</span><br><span class=\"line\">static struct __BlockTest__test_block_desc_0 &#123;</span><br><span class=\"line\">    size_t reserved;</span><br><span class=\"line\">    size_t Block_size;</span><br><span class=\"line\">    void (*copy)(struct __BlockTest__test_block_impl_0*, struct __BlockTest__test_block_impl_0*);</span><br><span class=\"line\">    void (*dispose)(struct __BlockTest__test_block_impl_0*);</span><br><span class=\"line\">&#125; __BlockTest__test_block_desc_0_DATA = &#123; 0, sizeof(struct __BlockTest__test_block_impl_0), __BlockTest__test_block_copy_0, __BlockTest__test_block_dispose_0&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 方法主体</span><br><span class=\"line\">static void _I_BlockTest_test(BlockTest * self, SEL _cmd) &#123;</span><br><span class=\"line\">    __attribute__((objc_ownership(weak))) typeof(self) weakSelf = self;</span><br><span class=\"line\">    ((void (*)(id, SEL, void (*)()))(void *)objc_msgSend)((id)self, sel_registerName(&quot;setBlock:&quot;), ((void (*)())&amp;__BlockTest__test_block_impl_0((void *)__BlockTest__test_block_func_0, &amp;__BlockTest__test_block_desc_0_DATA, weakSelf, 570425344)));</span><br><span class=\"line\">    ((void (*(*)(id, SEL))())(void *)objc_msgSend)((id)self, sel_registerName(&quot;block&quot;))();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>方法主体会先用 <code>__weak</code> 初始化一个 weakSelf，此时 self 的引用计数是不会发生变化的；之后会构造一个<code>__BlockTest__test_block_impl_0</code> 的结构体，该结构体捕获了 weakSelf；</li>\n<li><code>__BlockTest__test_block_impl_0</code> 的构造函数中使用了 <code>__weak</code> 来捕获 weakSelf，所以我们知道此时 self 的引用计数应该要也是不会发生变化的；</li>\n<li>然后把该结构体赋值给 self.block，block 结构体被从栈复制到堆的时候使用了 <code>_Block_object_assign</code>，所以此时 self 的引用计数不会发生变化</li>\n<li>然后 block 在被执行的时候做了一下 <code>__weak</code> 的操作 <code>BlockTest *const __weak weakSelf = __cself-&gt;weakSelf</code>，这时候 self 的引用计数也不会发生变化</li>\n<li>由于 block 对 weakSelf 没有强引用，所以在 block 执行完成之后也不需要做释放 weakSelf 的工作</li>\n</ol>\n<p>所以，在该例子中 block 无法强引用 weakSelf，weakSelf 的引用计数没有发生任何变化。由于 self 没有被 block 强应用，所以当 self 要被释放的时候，block 也会被释放，这就解决了我们 🌰1 中的循环引用的问题。但是在 block 方法执行的过程中，self 对象有可能已经被释放了，此时如果你还去使用 weakSelf 就有可能造成奔溃的情况。</p>\n<hr>\n<p>🌰3 的 C 代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct __BlockTest__test_block_impl_0 &#123;</span><br><span class=\"line\">    struct __block_impl impl;</span><br><span class=\"line\">    struct __BlockTest__test_block_desc_0* Desc;</span><br><span class=\"line\">    BlockTest *const __weak weakSelf;</span><br><span class=\"line\">    __BlockTest__test_block_impl_0(void *fp, struct __BlockTest__test_block_desc_0 *desc, BlockTest *const __weak _weakSelf, int flags=0) : weakSelf(_weakSelf) &#123;</span><br><span class=\"line\">        impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class=\"line\">        impl.Flags = flags;</span><br><span class=\"line\">        impl.FuncPtr = fp;</span><br><span class=\"line\">        Desc = desc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">static void __BlockTest__test_block_func_0(struct __BlockTest__test_block_impl_0 *__cself) &#123;</span><br><span class=\"line\">    BlockTest *const __weak weakSelf = __cself-&gt;weakSelf; // bound by copy</span><br><span class=\"line\">    __attribute__((objc_ownership(strong))) typeof(self) strongSelf = weakSelf;    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static void __BlockTest__test_block_copy_0(struct __BlockTest__test_block_impl_0*dst, struct __BlockTest__test_block_impl_0*src) &#123;_Block_object_assign((void*)&amp;dst-&gt;weakSelf, (void*)src-&gt;weakSelf, 3/*BLOCK_FIELD_IS_OBJECT*/);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static void __BlockTest__test_block_dispose_0(struct __BlockTest__test_block_impl_0*src) &#123;_Block_object_dispose((void*)src-&gt;weakSelf, 3/*BLOCK_FIELD_IS_OBJECT*/);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static struct __BlockTest__test_block_desc_0 &#123;</span><br><span class=\"line\">    size_t reserved;</span><br><span class=\"line\">    size_t Block_size;</span><br><span class=\"line\">    void (*copy)(struct __BlockTest__test_block_impl_0*, struct __BlockTest__test_block_impl_0*);</span><br><span class=\"line\">    void (*dispose)(struct __BlockTest__test_block_impl_0*);</span><br><span class=\"line\">&#125; __BlockTest__test_block_desc_0_DATA = &#123; 0, sizeof(struct __BlockTest__test_block_impl_0), __BlockTest__test_block_copy_0, __BlockTest__test_block_dispose_0&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">static void _I_BlockTest_test(BlockTest * self, SEL _cmd) &#123;</span><br><span class=\"line\">    __attribute__((objc_ownership(weak))) typeof(self) weakSelf = self;</span><br><span class=\"line\">    ((void (*)(id, SEL, void (*)()))(void *)objc_msgSend)((id)self, sel_registerName(&quot;setBlock:&quot;), ((void (*)())&amp;__BlockTest__test_block_impl_0((void *)__BlockTest__test_block_func_0, &amp;__BlockTest__test_block_desc_0_DATA, weakSelf, 570425344)));</span><br><span class=\"line\">    ((void (*(*)(id, SEL))())(void *)objc_msgSend)((id)self, sel_registerName(&quot;block&quot;))();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>前面的步骤都跟 🌰2 中的一样，关键是在 Block 的方法实现里面有点不一样。我们来看看 <code>__BlockTest__test_block_func_0</code>，它首先调用了 <code>BlockTest *const __weak weakSelf = __cself-&gt;weakSelf</code>， 所以它此时的引用计数不会发生变化；但是接下来又用 <code>objc_ownership(strong)</code> 来强引用 weakSelf，所以此时 self 的引用计数 +1。这就保证了在函数执行的过程中，Block 会一直持有 self，知道 Block 执行完毕之后会释放 weakSelf。</p>\n<p>所以 🌰3 完美的解决了循环应用和直接使用 <code>__weak</code> 可能导致奔溃的问题。</p>\n<hr>\n<p>最后，说一下关于 _Block_object_assign 的猜想：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_Block_object_assign((void*)&amp;dst-&gt;weakSelf, (void*)src-&gt;weakSelf, 3/*BLOCK_FIELD_IS_OBJECT*/);</span><br></pre></td></tr></table></figure>\n<p>通过上面的例子，我们知道 Block 在构造的时候就会对捕获的变量进行内存管理（强引用和弱引用），所以当 Block 在做 Copy 操作的时候其实没有必要对它捕获的变量再做一遍内存管理了。这也应该是 Block 的 Copy 操作使用了 <code>_Block_object_assign</code> 这种不会导致引用计数发生变化的方式来实现的原因。</p>\n"},{"title":"初步了解 GCD","author":"帕帕","date":"2017-09-05T15:30:56.000Z","_content":"\n## GCD 简介\n\nGCD(Grand Central Dispatch) 是苹果提供的一套多线程编程技术。想象一下，如果让你编写一个可以高效的跑在不同计算机、不同内核的应用程序，你会怎么做呢？你要看看硬件是什么，看看有有多少个内核，想想用什么算法，想想在什么时候去切换线程...总之，你要做的东西多了去了。而 GCD 帮我们屏蔽了这些技术细节，但是如果要用好 GCD 的话，还是要多了解一些知识点。\n\n## Dispatch 对象和内存管理\n\n在 Objective-C 里面，所有的 dispatch 对象都是 Objective-C 对象，所以他们同样适用引用技术的内存管理。如果你是使用 ARC 的话，dispatch 对象会向普通的 Objective-C 对象一样自动进行 retain 和 release 操作；如果你是使用 MRC，要记住使用 dispatch_retain 和 dispatch_release 来进行管理。\n\n## 常用 API\n\n### dispatch_queue_t（调度队列）\n\n```Swift\npublic func dispatch_queue_create(label: UnsafePointer<Int8>, _ attr: dispatch_queue_attr_t!) -> dispatch_queue_t!\n```\n\n在 GCD 中只能通过上面的 API 来创建调度队列，我们可以通过创建各种各样的 Block 形式的任务并由该调度队列来决定如何去执行这些 Block 任务。上面创建调度队列的函数需要两个参数：\n\n* label: 这个参数是用来给你创建的调度队列进行命名的，特别是在调试的时候你可以通过该参数来判断是哪个调度队列的任务在执行。\n* attr: 这个参数只有 DISPATCH_QUEUE_SERIAL 和 DISPATCH_QUEUE_CONCURRENT 两种值（在 Objective-C 中这个参数可以为 NULL，这个时候默认是 DISPATCH_QUEUE_SERIAL）。DISPATCH_QUEUE_SERIAL 是告诉调度队列以串行的方式去执行任务，DISPATCH_QUEUE_CONCURRENT 是告诉调度队列以并发的方式去执行任务。\n\n当然我们还可以通过下面的方法来获取系统已经创建好的调度队列：\n\n```Swift\n// 获取全局队列\npublic func dispatch_get_global_queue(identifier: Int, _ flags: UInt) -> dispatch_queue_t!\n```\n```Swift\n// 获取主线程的com.apple.main-thread (serial)队列\npublic func dispatch_get_main_queue() -> dispatch_queue_t!\n```\n\n注意，所有 pending 状态的 Block 任务都会持有该调度队列的引用，所以我们不需要显示的去持有调度队列，而调度队列会在所有的 Block 任务都从 pending 变为 finished 之后才会被释放。\n\n总之，现在大家要知道的是我们可以把不同的 Block任务提交到调度队列，具体的细节和实现看看后面内容。\n\n### dispatch_sync 和 dispatch_async（同步和异步）\n\n```Swift\nlet queue = dispatch_queue_create(\"com.PS.Queue\", DISPATCH_QUEUE_SERIAL)  // 创建调度队列\nprint(\"Begin Sync\")\n// 同步调用\ndispatch_sync(queue) {\n    // Block任务\n    print(\"Execute Block Task1\")   \n}\ndispatch_sync(queue) {\n    // Block任务\n    print(\"Execute Block Task2\")   \n}\nprint(\"After Sync\")\n```\n\n这段代码的输出结果如下：\n\n```Swift\nBegin Sync\nExecute Block Task1\nExecute Block Task2\nAfter Sync\n```\n\n上面的例子就是我们平常对 dispatch_sync 的用法，并且我们可以看到第一个 Block 任务执行之后才会执行第二个 Block 任务。dispatch_sync 需要等待 Block的任务执行完成之后，才能继续往后执行。但是使用 dispatch_sync 的时候，有几点是需要注意的：\n\n1. 当调用 dispatch_sync 方法的时候，系统默认情况下会在当前线程去执行调度队列里的任务，只有在一些特殊情况下才会把调度队列的任务分配到其他线程去执行。所以我们就知道，线程和调度队列并不是一对一的关系。至于为什么默认情况下会在当前线程去执行调度队列里的任务，我的猜测是为了性能。大家想一想，dispatch_sync 会同步执行 Block任务， Block任务没有结束的情况下，后面的代码是无法执行的。基于这样一个同步的机制，GCD 还有必要先把当前线程挂起，然后去创建新线程，然后切换到新的线程去执行调度队列里的任务，然后再把线程切换到当前线程，然后再让当前线程恢复么？结论是没有必要。\n\n2. 你不能够在当前的串行调度队列的任务里面去添加新的任务到当前的调度队列里面，否则会造成死锁。这句话怎么理解呢，我们来来看看下面的例子：\n    \n```Swift\n// 例1\nlet queue = dispatch_queue_create(\"com.PS.Queue\", DISPATCH_QUEUE_SERIAL)  // 创建串行的调度队列\n// 同步调用\ndispatch_sync(queue) {\n    // Block1\n    print(\"Begin Execute Block Task1\")\n    dispatch_sync(queue) {\n        // Block2\n        print(\"Execute Block Task2\")   \n    }\n    print(\"End Execute Block Task1\")\n}\n\n// 例1的结果\nBegin Execute Block Task1\n    \n```\n\n为什么 Block1 后面的 print 和 Block2 的 print 都不执行了呢？首先我们要知道被 DISPATCH_QUEUE_SERIAL 声明的调度队列是串行调度队列，串行调度队列里的任务是同时只能有一个任务在执行，并且当前任务没有执行完成，下一个任务也无法执行。上面的例子中会先输出 Block1 中的 *Begin Execute Block Task1*，然后这个时候再把 Block2 添加到同一个串行调度队列中去。这个时候的 Block1 还没有执行完成，它需要等 dispatch_sync 的 Block2 执行完成之后才能继续执行，而 Block2 又必须等待 Block1 执行完成之后才能执行，所以这个时候就造成 Block1 等着 Block2，Block2 等着 Block1 的死锁。\n\n我们再把调度队列属性改为 DISPAT_QUEUE_CONCURRENT，然后再看看执行结果是什么：\n\n\n```Swift\n// 例2\nlet queue = dispatch_queue_create(\"com.PS.Queue\", DISPATCH_QUEUE_SERIAL)  // 创建串行的调度队列\n// 同步调用\ndispatch_sync(queue) {\n    // Block1\n    print(\"Begin Execute Block Task1\")\n    dispatch_sync(queue) {\n        // Block2\n        print(\"Execute Block Task2\")   \n    }\n    print(\"End Execute Block Task1\")\n}\n```\n    \n```Swift\n// 例2的结果\nBegin Execute Block Task1\nExecute Block Task2\nEnd Execute Block Task1\n```\n\n被 DISPATCH_QUEUE_CONCURRENT 声明的并发调度队列就没有这种死锁的问题。并发调度队列里的任务是不会霸占资源不放的，每一个任务执行一个时间片段之后会把资源交出来给别的任务去执行。所以例2中的 Block1 虽然需要等待 Block2 执行完成之后才能继续执行，但是当 Block1 在等待的过程中，是可以把资源释放出来交给 Block2 去执行，Block2 执行完成之后 Block1 就可以继续执行了。所以，这个时候就不会造成死锁来。\n\n再来看看下面的例子会不会造成死锁：\n\n```Swift\noverride func viewDidLoad() {\n    dispatch_sync(dispatch_get_main_queue()) {\n        print(\"Excute Block Task\")\n    }\n}\n```\n    \n答案是会的。给大家一点提示，主线程的默认调度队列是串行（DISPATCH_QUEUE_SERIAL）的，viewDidLoad() 是在主线程的调度队列 com.apple.main-thread (serial) 执行的。\n\n上面的例子主要是希望大家理解串行和并发的概念，同时要明白造成死锁的原因。而要解决死锁一般可以用 DISPATCH_QUEUE_CONCURRENT 或接下来我们要讲的 dispatch_async 来解决。\n\n通过对 dispatch_sync 的了解，我们可以利用 dispatch_async 很快的写出异步代码：\n\n```Swift\nlet queue = dispatch_queue_create(\"com.PS.Queue\", DISPATCH_QUEUE_SERIAL)  // 创建调度队列\nprint(\"Begin Async\")\n// 异步调用\ndispatch_async(queue) {\n    // Block1\n    print(\"Execute Block Task1\")   \n}\ndispatch_async(queue) {\n    // Block2\n    print(\"Execute Block Task2\")   \n}\nprint(\"After Async\")\n```\n\n这个例子的结果有好几种：\n\n```Swift\n// 结果1\nBegin Async\nAfter Async\nExecute Block Task1\nExEcute Block Task2\n```\n```Swift\n// 结果2\nBegin Async\nExecute Block Task1\nExEcute Block Task2\nAfter Async\n```\n\n上面只是列出来两种可能，但实际上还有其他的可能。当我们调用 dispatch_async 的时候，它总是会在 Block 任务被提交之后马上返回，而不会傻傻的等待 Block 任务执行完成。由于上面创建的是串行调度队列，所以我们可以保证 Block1 要比 Block2 优先执行，但是 After Async 就无法确定是在 Block1 的前后还是 Block2 的前后。\n\n如果我们把上面的 DISPATCH_QUEUE_SERIAL 改成 DISPATCH_QUEUE_CONCURRENT，那我们就无法确定 After Async、Block1 和 Block2 这三者的执行顺序了。\n\n我们刚才说到用 dispatch_async 可以解决死锁的问题，那它是怎么解决的呢？\n\n```Swift\nlet queue = dispatch_queue_create(\"com.PS.Queue\", DISPATCH_QUEUE_SERIAL)  // 创建串行的调度队列\n// 异步调用\ndispatch_async(queue) {\n    // Block1\n    print(\"Begin Execute Block Task1\")\n    dispatch_async(queue) {\n        // Block2\n        print(\"Execute Block Task2\")   \n    }\n    print(\"End Execute Block Task1\")\n}\n```\n\n上面的例子会优先输出 Block1 的 *Begin Execute Block Task1* 之后，通过 dispatch_async 把 Block2 提交到串行队列里面，然后又马上返回到 Block1 去输出 *End Execute Block Task1*，这个时候的 Block1 就结束了，接下来就开始执行 Block2。所以上面的代码是不会造成死锁的，虽然上面的例子也是创建了一个串行调度队列，但是该调度队列只是保证了 Block1 要比 Block2 优先执行。\n\n### dispatch_once\n\n写过 Objective-C 的人都知道，dispatch_once 一般会被用来创建单例对象：\n\n```Swift\n@implementation Single\n+ (Single *)sharedInstance {\n    static Single * _single = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        _single = [[Single alloc] init];\n    });\n    return _single; \n}\n@end\n```\n\n这是由于 dispatch_once 是线程安全且只会执行一次，所以才会被用来作为单例的实现。这里需要注意的是 dispatch_once_t 必须是静态的或全局的才能保证 dispatch_once 的 Block 只会被执行一次，所以上面的代码用了 static 来修饰 dispatch_once_t。\n\n### dispatch_apply\n\n```Swift\npublic func dispatch_apply(iterations: Int, _ queue: dispatch_queue_t!, _ block: (Int) -> Void)\n```\n\n其中的 interations 是表明要执行多少次 block，block 中的 Int 是该 Block 被执行的序号。调用这个方法的时候要注意该方法跟 dispatch_sync 一样会阻塞当前线程，所以我们需要注意在主线程中调用该方法。\n\n### dispatch_after\n\n```Swift\npublic func dispatch_after(when: dispatch_time_t, _ queue: dispatch_queue_t, _ block: dispatch_block_t)\n```\n\n调用这个方法的时候需要注意的是 when 这个参数，你需要通过 dispatch_time 或 dispatch_walltime 来创建。并且该方法是异步执行的，并不会阻塞当前线程。\n\n一般的写法如下：\n\n```Swift\ndispatch_after(dispatch_time(DISPATCH_TIME_NOW, Int64(5 * NSEC_PER_SEC)), queue) {\n    print(\"5s \\(NSThread.currentThread())\")\n}\n```\n\n### dispatch_group_t\n\ndispatch_group_t 是用来做聚合同步的，它可以用来跟踪你提交的所有任务（即使是在不同的调度队列也可以）的完成状态。\n\n接下来我们来看看 dispatch group 的一些常见用法：\n\n```Swift\n// 创建 dispatch_group_t 对象\nlet group = dispatch_group_create()\n\n// 创建串行队列\nlet serialQueue = dispatch_queue_create(\"Serial Queue\", DISPATCH_QUEUE_SERIAL)\n\n// 提交两个 Block 任务到 serialQueue，同时关联 serialQueue 和 group 的关系\ndispatch_group_async(group, serialQueue) {\n    print(\"Execute Block1 within Serial Queue\")\n}\ndispatch_group_async(group, serialQueue) {\n    print(\"Execute Block2 within Serial Queue\")\n}\n\n// 创建并发队列，并提交 Block 任务，同时关联该并发队列和 group 的关系\ndispatch_group_async(group, dispatch_queue_create(\"Concurrent Queue\", DISPATCH_QUEUE_CONCURRENT)) {\n    print(\"Execute Block within Concurrent Queue\")\n}\n\n// 下面的代码只有当前面被关联到 group 的所有任务完成之后才会被触发\ndispatch_group_notify(group, dispatch_queue_create(\"Finished\")) {\n    print(\"Finished\")\n}\n```\n\n注意，关联到 group 的方法只有 dispatch_group_async 而没有 dispatch_group_sync。\n\n但是还有另外一种方法可以让我们关联一个普通的任务：\n\n```Swift\n// 创建 dispatch_group_t 对象\nlet group = dispatch_group_create()\n\n// 使用 dispatch_group_enter 和 dispatch_group_leave 的话，我们不需要调用\n// dispatch_group_async 也能关联一个任务到 group 上\ndispatch_group_enter(group)\nself.executeTask {\n    // 执行代码\n    \n    dispatch_group_leave(group)\n}\n\n// 下面的代码只有当前面被关联到 group 的所有任务完成之后才会被触发\ndispatch_group_notify(group, dispatch_queue_create(\"Finished\")) {\n    print(\"Finished\")\n}\n```\n\n使用 dispatch_group_enter 和 dispatch_group_leave 的时候，它们必须成双成对出现，否则 dispatch_group_notify 是不会被调用的。\n\n接下来我们还要了解一下 dispatch_group_wait：\n\n```Swift\npublic func dispatch_group_wait(group: dispatch_group_t, _ timeout: dispatch_time_t) -> Int\n```\n\ndispatch_group_wait 可以指定一个 timeout 的参数，当 group 的任务没有在规定的时间内完成，它会返回一个非零的值，当 group 的任务能够在规定的时间内完成就返回0。同时，大家要注意这个方法会挂起当前线程，所以在主线程的时候要慎重使用该方法。\n\n### dispatch_barrier_t\n\n我们先来试想一个场景，假如现在有多个线程要去读取一份文件的内容，同时又有其他线程想要去更新该文件的内容，那么就有可能会发生你读错文件内容的现象。这个时候我们可以把所有读写操作都放到我们之前学习的串行队列去执行，但是我们都知道同时有多个线程去读取一份文件内容是没有问题的。\n\n使用 dispatch barrier 可以解决上面的问题：\n\n```Swift\n// 创建操作文件的并发队列\nlet queue = dispatch_queue_create(\"File\", DISPATCH_QUEUE_CONCURRENT)\ndispatch_async(queue) {\n    // Read1\n}\ndispatch_async(queue) {\n    // Read2\n}\ndispatch_barrier_async(queue) {\n    // Write\n}\ndispatch_async(queue) {\n    // Read3\n}\n```\n\n通过 dispatch_barrier_async 或 dispatch_barrier_sync 提交的任务会等待当前队列里正在执行的任务执行完毕才会执行，并且其他还没有执行的任务都必须等待提交到 dispatch barrier 的任务执行完毕之后才会开始执行。所以上面的代码中，当 Write 任务被提交的时候，如果当前队列中只有 Read1 在执行，那么 Write 会等待 Read1 执行完成之后才会执行，Read2  和 Read3 都必须等待 Write 执行完之后才会执行。另外，上面的代码中创建的是并发队列，因为如果是串行队列的话就没有必要用 dispatch barrier 了。\n\n### dispatch_semaphore_t\n\ndispatch semaphore 是一个效率非常高的传统计数信号量，所以我们一般可以用这个来控制最大的并发数量。\n\n```Swift\n// 创建初始值为2的信号量，最大并发数量为2\nlet semaphore = dispatch_semaphore_create(2)\n// 创建并发队列\nlet queue = dispatch_queue_create(\"Semaphore\", DISPATCH_QUEUE_CONCURRENT)\n// 创建100个并发任务\nfor index in 1...100 {\n    // 这个方法会进行信号量减1的操作，并且如果信号量减1之后的结果小于0的话，该方法会造成线程的挂起直\n    // 到该信号量进行加1操作才会恢复，所以在主线程要注意该方法的使用。\n    // 注意：这个方法要放在 dispatch_async 外面，否则系统依旧会创建超过2个线程同时来处理该调度队列\n    // 的任务\n    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER)\n    dispatch_async(queue) {\n        \n        // 释放资源，信号量增加1\n        dispatch_semaphore_signal(semaphore)\n    }\n}\n```\n\n## 其他\n\nGCD 在 Swift3 的语法跟现在的语法不太一样了，有兴趣的可以自行去了解。在未来可能会考虑把本文章的代码都用 Swift3 的语法来重新写一下。\n\n\n\n\n","source":"_posts/初步了解GCD.md","raw":"---\ntitle: 初步了解 GCD\nauthor: 帕帕\ndate: 2017-09-05 15:30:56 +0800\ncategories: 技术 \ntags: [iOS, GCD]\n---\n\n## GCD 简介\n\nGCD(Grand Central Dispatch) 是苹果提供的一套多线程编程技术。想象一下，如果让你编写一个可以高效的跑在不同计算机、不同内核的应用程序，你会怎么做呢？你要看看硬件是什么，看看有有多少个内核，想想用什么算法，想想在什么时候去切换线程...总之，你要做的东西多了去了。而 GCD 帮我们屏蔽了这些技术细节，但是如果要用好 GCD 的话，还是要多了解一些知识点。\n\n## Dispatch 对象和内存管理\n\n在 Objective-C 里面，所有的 dispatch 对象都是 Objective-C 对象，所以他们同样适用引用技术的内存管理。如果你是使用 ARC 的话，dispatch 对象会向普通的 Objective-C 对象一样自动进行 retain 和 release 操作；如果你是使用 MRC，要记住使用 dispatch_retain 和 dispatch_release 来进行管理。\n\n## 常用 API\n\n### dispatch_queue_t（调度队列）\n\n```Swift\npublic func dispatch_queue_create(label: UnsafePointer<Int8>, _ attr: dispatch_queue_attr_t!) -> dispatch_queue_t!\n```\n\n在 GCD 中只能通过上面的 API 来创建调度队列，我们可以通过创建各种各样的 Block 形式的任务并由该调度队列来决定如何去执行这些 Block 任务。上面创建调度队列的函数需要两个参数：\n\n* label: 这个参数是用来给你创建的调度队列进行命名的，特别是在调试的时候你可以通过该参数来判断是哪个调度队列的任务在执行。\n* attr: 这个参数只有 DISPATCH_QUEUE_SERIAL 和 DISPATCH_QUEUE_CONCURRENT 两种值（在 Objective-C 中这个参数可以为 NULL，这个时候默认是 DISPATCH_QUEUE_SERIAL）。DISPATCH_QUEUE_SERIAL 是告诉调度队列以串行的方式去执行任务，DISPATCH_QUEUE_CONCURRENT 是告诉调度队列以并发的方式去执行任务。\n\n当然我们还可以通过下面的方法来获取系统已经创建好的调度队列：\n\n```Swift\n// 获取全局队列\npublic func dispatch_get_global_queue(identifier: Int, _ flags: UInt) -> dispatch_queue_t!\n```\n```Swift\n// 获取主线程的com.apple.main-thread (serial)队列\npublic func dispatch_get_main_queue() -> dispatch_queue_t!\n```\n\n注意，所有 pending 状态的 Block 任务都会持有该调度队列的引用，所以我们不需要显示的去持有调度队列，而调度队列会在所有的 Block 任务都从 pending 变为 finished 之后才会被释放。\n\n总之，现在大家要知道的是我们可以把不同的 Block任务提交到调度队列，具体的细节和实现看看后面内容。\n\n### dispatch_sync 和 dispatch_async（同步和异步）\n\n```Swift\nlet queue = dispatch_queue_create(\"com.PS.Queue\", DISPATCH_QUEUE_SERIAL)  // 创建调度队列\nprint(\"Begin Sync\")\n// 同步调用\ndispatch_sync(queue) {\n    // Block任务\n    print(\"Execute Block Task1\")   \n}\ndispatch_sync(queue) {\n    // Block任务\n    print(\"Execute Block Task2\")   \n}\nprint(\"After Sync\")\n```\n\n这段代码的输出结果如下：\n\n```Swift\nBegin Sync\nExecute Block Task1\nExecute Block Task2\nAfter Sync\n```\n\n上面的例子就是我们平常对 dispatch_sync 的用法，并且我们可以看到第一个 Block 任务执行之后才会执行第二个 Block 任务。dispatch_sync 需要等待 Block的任务执行完成之后，才能继续往后执行。但是使用 dispatch_sync 的时候，有几点是需要注意的：\n\n1. 当调用 dispatch_sync 方法的时候，系统默认情况下会在当前线程去执行调度队列里的任务，只有在一些特殊情况下才会把调度队列的任务分配到其他线程去执行。所以我们就知道，线程和调度队列并不是一对一的关系。至于为什么默认情况下会在当前线程去执行调度队列里的任务，我的猜测是为了性能。大家想一想，dispatch_sync 会同步执行 Block任务， Block任务没有结束的情况下，后面的代码是无法执行的。基于这样一个同步的机制，GCD 还有必要先把当前线程挂起，然后去创建新线程，然后切换到新的线程去执行调度队列里的任务，然后再把线程切换到当前线程，然后再让当前线程恢复么？结论是没有必要。\n\n2. 你不能够在当前的串行调度队列的任务里面去添加新的任务到当前的调度队列里面，否则会造成死锁。这句话怎么理解呢，我们来来看看下面的例子：\n    \n```Swift\n// 例1\nlet queue = dispatch_queue_create(\"com.PS.Queue\", DISPATCH_QUEUE_SERIAL)  // 创建串行的调度队列\n// 同步调用\ndispatch_sync(queue) {\n    // Block1\n    print(\"Begin Execute Block Task1\")\n    dispatch_sync(queue) {\n        // Block2\n        print(\"Execute Block Task2\")   \n    }\n    print(\"End Execute Block Task1\")\n}\n\n// 例1的结果\nBegin Execute Block Task1\n    \n```\n\n为什么 Block1 后面的 print 和 Block2 的 print 都不执行了呢？首先我们要知道被 DISPATCH_QUEUE_SERIAL 声明的调度队列是串行调度队列，串行调度队列里的任务是同时只能有一个任务在执行，并且当前任务没有执行完成，下一个任务也无法执行。上面的例子中会先输出 Block1 中的 *Begin Execute Block Task1*，然后这个时候再把 Block2 添加到同一个串行调度队列中去。这个时候的 Block1 还没有执行完成，它需要等 dispatch_sync 的 Block2 执行完成之后才能继续执行，而 Block2 又必须等待 Block1 执行完成之后才能执行，所以这个时候就造成 Block1 等着 Block2，Block2 等着 Block1 的死锁。\n\n我们再把调度队列属性改为 DISPAT_QUEUE_CONCURRENT，然后再看看执行结果是什么：\n\n\n```Swift\n// 例2\nlet queue = dispatch_queue_create(\"com.PS.Queue\", DISPATCH_QUEUE_SERIAL)  // 创建串行的调度队列\n// 同步调用\ndispatch_sync(queue) {\n    // Block1\n    print(\"Begin Execute Block Task1\")\n    dispatch_sync(queue) {\n        // Block2\n        print(\"Execute Block Task2\")   \n    }\n    print(\"End Execute Block Task1\")\n}\n```\n    \n```Swift\n// 例2的结果\nBegin Execute Block Task1\nExecute Block Task2\nEnd Execute Block Task1\n```\n\n被 DISPATCH_QUEUE_CONCURRENT 声明的并发调度队列就没有这种死锁的问题。并发调度队列里的任务是不会霸占资源不放的，每一个任务执行一个时间片段之后会把资源交出来给别的任务去执行。所以例2中的 Block1 虽然需要等待 Block2 执行完成之后才能继续执行，但是当 Block1 在等待的过程中，是可以把资源释放出来交给 Block2 去执行，Block2 执行完成之后 Block1 就可以继续执行了。所以，这个时候就不会造成死锁来。\n\n再来看看下面的例子会不会造成死锁：\n\n```Swift\noverride func viewDidLoad() {\n    dispatch_sync(dispatch_get_main_queue()) {\n        print(\"Excute Block Task\")\n    }\n}\n```\n    \n答案是会的。给大家一点提示，主线程的默认调度队列是串行（DISPATCH_QUEUE_SERIAL）的，viewDidLoad() 是在主线程的调度队列 com.apple.main-thread (serial) 执行的。\n\n上面的例子主要是希望大家理解串行和并发的概念，同时要明白造成死锁的原因。而要解决死锁一般可以用 DISPATCH_QUEUE_CONCURRENT 或接下来我们要讲的 dispatch_async 来解决。\n\n通过对 dispatch_sync 的了解，我们可以利用 dispatch_async 很快的写出异步代码：\n\n```Swift\nlet queue = dispatch_queue_create(\"com.PS.Queue\", DISPATCH_QUEUE_SERIAL)  // 创建调度队列\nprint(\"Begin Async\")\n// 异步调用\ndispatch_async(queue) {\n    // Block1\n    print(\"Execute Block Task1\")   \n}\ndispatch_async(queue) {\n    // Block2\n    print(\"Execute Block Task2\")   \n}\nprint(\"After Async\")\n```\n\n这个例子的结果有好几种：\n\n```Swift\n// 结果1\nBegin Async\nAfter Async\nExecute Block Task1\nExEcute Block Task2\n```\n```Swift\n// 结果2\nBegin Async\nExecute Block Task1\nExEcute Block Task2\nAfter Async\n```\n\n上面只是列出来两种可能，但实际上还有其他的可能。当我们调用 dispatch_async 的时候，它总是会在 Block 任务被提交之后马上返回，而不会傻傻的等待 Block 任务执行完成。由于上面创建的是串行调度队列，所以我们可以保证 Block1 要比 Block2 优先执行，但是 After Async 就无法确定是在 Block1 的前后还是 Block2 的前后。\n\n如果我们把上面的 DISPATCH_QUEUE_SERIAL 改成 DISPATCH_QUEUE_CONCURRENT，那我们就无法确定 After Async、Block1 和 Block2 这三者的执行顺序了。\n\n我们刚才说到用 dispatch_async 可以解决死锁的问题，那它是怎么解决的呢？\n\n```Swift\nlet queue = dispatch_queue_create(\"com.PS.Queue\", DISPATCH_QUEUE_SERIAL)  // 创建串行的调度队列\n// 异步调用\ndispatch_async(queue) {\n    // Block1\n    print(\"Begin Execute Block Task1\")\n    dispatch_async(queue) {\n        // Block2\n        print(\"Execute Block Task2\")   \n    }\n    print(\"End Execute Block Task1\")\n}\n```\n\n上面的例子会优先输出 Block1 的 *Begin Execute Block Task1* 之后，通过 dispatch_async 把 Block2 提交到串行队列里面，然后又马上返回到 Block1 去输出 *End Execute Block Task1*，这个时候的 Block1 就结束了，接下来就开始执行 Block2。所以上面的代码是不会造成死锁的，虽然上面的例子也是创建了一个串行调度队列，但是该调度队列只是保证了 Block1 要比 Block2 优先执行。\n\n### dispatch_once\n\n写过 Objective-C 的人都知道，dispatch_once 一般会被用来创建单例对象：\n\n```Swift\n@implementation Single\n+ (Single *)sharedInstance {\n    static Single * _single = nil;\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        _single = [[Single alloc] init];\n    });\n    return _single; \n}\n@end\n```\n\n这是由于 dispatch_once 是线程安全且只会执行一次，所以才会被用来作为单例的实现。这里需要注意的是 dispatch_once_t 必须是静态的或全局的才能保证 dispatch_once 的 Block 只会被执行一次，所以上面的代码用了 static 来修饰 dispatch_once_t。\n\n### dispatch_apply\n\n```Swift\npublic func dispatch_apply(iterations: Int, _ queue: dispatch_queue_t!, _ block: (Int) -> Void)\n```\n\n其中的 interations 是表明要执行多少次 block，block 中的 Int 是该 Block 被执行的序号。调用这个方法的时候要注意该方法跟 dispatch_sync 一样会阻塞当前线程，所以我们需要注意在主线程中调用该方法。\n\n### dispatch_after\n\n```Swift\npublic func dispatch_after(when: dispatch_time_t, _ queue: dispatch_queue_t, _ block: dispatch_block_t)\n```\n\n调用这个方法的时候需要注意的是 when 这个参数，你需要通过 dispatch_time 或 dispatch_walltime 来创建。并且该方法是异步执行的，并不会阻塞当前线程。\n\n一般的写法如下：\n\n```Swift\ndispatch_after(dispatch_time(DISPATCH_TIME_NOW, Int64(5 * NSEC_PER_SEC)), queue) {\n    print(\"5s \\(NSThread.currentThread())\")\n}\n```\n\n### dispatch_group_t\n\ndispatch_group_t 是用来做聚合同步的，它可以用来跟踪你提交的所有任务（即使是在不同的调度队列也可以）的完成状态。\n\n接下来我们来看看 dispatch group 的一些常见用法：\n\n```Swift\n// 创建 dispatch_group_t 对象\nlet group = dispatch_group_create()\n\n// 创建串行队列\nlet serialQueue = dispatch_queue_create(\"Serial Queue\", DISPATCH_QUEUE_SERIAL)\n\n// 提交两个 Block 任务到 serialQueue，同时关联 serialQueue 和 group 的关系\ndispatch_group_async(group, serialQueue) {\n    print(\"Execute Block1 within Serial Queue\")\n}\ndispatch_group_async(group, serialQueue) {\n    print(\"Execute Block2 within Serial Queue\")\n}\n\n// 创建并发队列，并提交 Block 任务，同时关联该并发队列和 group 的关系\ndispatch_group_async(group, dispatch_queue_create(\"Concurrent Queue\", DISPATCH_QUEUE_CONCURRENT)) {\n    print(\"Execute Block within Concurrent Queue\")\n}\n\n// 下面的代码只有当前面被关联到 group 的所有任务完成之后才会被触发\ndispatch_group_notify(group, dispatch_queue_create(\"Finished\")) {\n    print(\"Finished\")\n}\n```\n\n注意，关联到 group 的方法只有 dispatch_group_async 而没有 dispatch_group_sync。\n\n但是还有另外一种方法可以让我们关联一个普通的任务：\n\n```Swift\n// 创建 dispatch_group_t 对象\nlet group = dispatch_group_create()\n\n// 使用 dispatch_group_enter 和 dispatch_group_leave 的话，我们不需要调用\n// dispatch_group_async 也能关联一个任务到 group 上\ndispatch_group_enter(group)\nself.executeTask {\n    // 执行代码\n    \n    dispatch_group_leave(group)\n}\n\n// 下面的代码只有当前面被关联到 group 的所有任务完成之后才会被触发\ndispatch_group_notify(group, dispatch_queue_create(\"Finished\")) {\n    print(\"Finished\")\n}\n```\n\n使用 dispatch_group_enter 和 dispatch_group_leave 的时候，它们必须成双成对出现，否则 dispatch_group_notify 是不会被调用的。\n\n接下来我们还要了解一下 dispatch_group_wait：\n\n```Swift\npublic func dispatch_group_wait(group: dispatch_group_t, _ timeout: dispatch_time_t) -> Int\n```\n\ndispatch_group_wait 可以指定一个 timeout 的参数，当 group 的任务没有在规定的时间内完成，它会返回一个非零的值，当 group 的任务能够在规定的时间内完成就返回0。同时，大家要注意这个方法会挂起当前线程，所以在主线程的时候要慎重使用该方法。\n\n### dispatch_barrier_t\n\n我们先来试想一个场景，假如现在有多个线程要去读取一份文件的内容，同时又有其他线程想要去更新该文件的内容，那么就有可能会发生你读错文件内容的现象。这个时候我们可以把所有读写操作都放到我们之前学习的串行队列去执行，但是我们都知道同时有多个线程去读取一份文件内容是没有问题的。\n\n使用 dispatch barrier 可以解决上面的问题：\n\n```Swift\n// 创建操作文件的并发队列\nlet queue = dispatch_queue_create(\"File\", DISPATCH_QUEUE_CONCURRENT)\ndispatch_async(queue) {\n    // Read1\n}\ndispatch_async(queue) {\n    // Read2\n}\ndispatch_barrier_async(queue) {\n    // Write\n}\ndispatch_async(queue) {\n    // Read3\n}\n```\n\n通过 dispatch_barrier_async 或 dispatch_barrier_sync 提交的任务会等待当前队列里正在执行的任务执行完毕才会执行，并且其他还没有执行的任务都必须等待提交到 dispatch barrier 的任务执行完毕之后才会开始执行。所以上面的代码中，当 Write 任务被提交的时候，如果当前队列中只有 Read1 在执行，那么 Write 会等待 Read1 执行完成之后才会执行，Read2  和 Read3 都必须等待 Write 执行完之后才会执行。另外，上面的代码中创建的是并发队列，因为如果是串行队列的话就没有必要用 dispatch barrier 了。\n\n### dispatch_semaphore_t\n\ndispatch semaphore 是一个效率非常高的传统计数信号量，所以我们一般可以用这个来控制最大的并发数量。\n\n```Swift\n// 创建初始值为2的信号量，最大并发数量为2\nlet semaphore = dispatch_semaphore_create(2)\n// 创建并发队列\nlet queue = dispatch_queue_create(\"Semaphore\", DISPATCH_QUEUE_CONCURRENT)\n// 创建100个并发任务\nfor index in 1...100 {\n    // 这个方法会进行信号量减1的操作，并且如果信号量减1之后的结果小于0的话，该方法会造成线程的挂起直\n    // 到该信号量进行加1操作才会恢复，所以在主线程要注意该方法的使用。\n    // 注意：这个方法要放在 dispatch_async 外面，否则系统依旧会创建超过2个线程同时来处理该调度队列\n    // 的任务\n    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER)\n    dispatch_async(queue) {\n        \n        // 释放资源，信号量增加1\n        dispatch_semaphore_signal(semaphore)\n    }\n}\n```\n\n## 其他\n\nGCD 在 Swift3 的语法跟现在的语法不太一样了，有兴趣的可以自行去了解。在未来可能会考虑把本文章的代码都用 Swift3 的语法来重新写一下。\n\n\n\n\n","slug":"初步了解GCD","published":1,"updated":"2018-04-16T08:00:54.841Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo44p6vq0011arvb1gy9gm84","content":"<h2 id=\"GCD-简介\"><a href=\"#GCD-简介\" class=\"headerlink\" title=\"GCD 简介\"></a>GCD 简介</h2><p>GCD(Grand Central Dispatch) 是苹果提供的一套多线程编程技术。想象一下，如果让你编写一个可以高效的跑在不同计算机、不同内核的应用程序，你会怎么做呢？你要看看硬件是什么，看看有有多少个内核，想想用什么算法，想想在什么时候去切换线程…总之，你要做的东西多了去了。而 GCD 帮我们屏蔽了这些技术细节，但是如果要用好 GCD 的话，还是要多了解一些知识点。</p>\n<h2 id=\"Dispatch-对象和内存管理\"><a href=\"#Dispatch-对象和内存管理\" class=\"headerlink\" title=\"Dispatch 对象和内存管理\"></a>Dispatch 对象和内存管理</h2><p>在 Objective-C 里面，所有的 dispatch 对象都是 Objective-C 对象，所以他们同样适用引用技术的内存管理。如果你是使用 ARC 的话，dispatch 对象会向普通的 Objective-C 对象一样自动进行 retain 和 release 操作；如果你是使用 MRC，要记住使用 dispatch_retain 和 dispatch_release 来进行管理。</p>\n<h2 id=\"常用-API\"><a href=\"#常用-API\" class=\"headerlink\" title=\"常用 API\"></a>常用 API</h2><h3 id=\"dispatch-queue-t（调度队列）\"><a href=\"#dispatch-queue-t（调度队列）\" class=\"headerlink\" title=\"dispatch_queue_t（调度队列）\"></a>dispatch_queue_t（调度队列）</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dispatch_queue_create</span><span class=\"params\">(label: UnsafePointer&lt;Int8&gt;, <span class=\"number\">_</span> attr: dispatch_queue_attr_t!)</span></span> -&gt; dispatch_queue_t!</span><br></pre></td></tr></table></figure>\n<p>在 GCD 中只能通过上面的 API 来创建调度队列，我们可以通过创建各种各样的 Block 形式的任务并由该调度队列来决定如何去执行这些 Block 任务。上面创建调度队列的函数需要两个参数：</p>\n<ul>\n<li>label: 这个参数是用来给你创建的调度队列进行命名的，特别是在调试的时候你可以通过该参数来判断是哪个调度队列的任务在执行。</li>\n<li>attr: 这个参数只有 DISPATCH_QUEUE_SERIAL 和 DISPATCH_QUEUE_CONCURRENT 两种值（在 Objective-C 中这个参数可以为 NULL，这个时候默认是 DISPATCH_QUEUE_SERIAL）。DISPATCH_QUEUE_SERIAL 是告诉调度队列以串行的方式去执行任务，DISPATCH_QUEUE_CONCURRENT 是告诉调度队列以并发的方式去执行任务。</li>\n</ul>\n<p>当然我们还可以通过下面的方法来获取系统已经创建好的调度队列：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取全局队列</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dispatch_get_global_queue</span><span class=\"params\">(identifier: Int, <span class=\"number\">_</span> flags: UInt)</span></span> -&gt; dispatch_queue_t!</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取主线程的com.apple.main-thread (serial)队列</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dispatch_get_main_queue</span><span class=\"params\">()</span></span> -&gt; dispatch_queue_t!</span><br></pre></td></tr></table></figure>\n<p>注意，所有 pending 状态的 Block 任务都会持有该调度队列的引用，所以我们不需要显示的去持有调度队列，而调度队列会在所有的 Block 任务都从 pending 变为 finished 之后才会被释放。</p>\n<p>总之，现在大家要知道的是我们可以把不同的 Block任务提交到调度队列，具体的细节和实现看看后面内容。</p>\n<h3 id=\"dispatch-sync-和-dispatch-async（同步和异步）\"><a href=\"#dispatch-sync-和-dispatch-async（同步和异步）\" class=\"headerlink\" title=\"dispatch_sync 和 dispatch_async（同步和异步）\"></a>dispatch_sync 和 dispatch_async（同步和异步）</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> queue = dispatch_queue_create(<span class=\"string\">\"com.PS.Queue\"</span>, <span class=\"type\">DISPATCH_QUEUE_SERIAL</span>)  <span class=\"comment\">// 创建调度队列</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Begin Sync\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 同步调用</span></span><br><span class=\"line\">dispatch_sync(queue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Block任务</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Execute Block Task1\"</span>)   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dispatch_sync(queue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Block任务</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Execute Block Task2\"</span>)   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"After Sync\"</span>)</span><br></pre></td></tr></table></figure>\n<p>这段代码的输出结果如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Begin</span> <span class=\"type\">Sync</span></span><br><span class=\"line\"><span class=\"type\">Execute</span> <span class=\"type\">Block</span> <span class=\"type\">Task1</span></span><br><span class=\"line\"><span class=\"type\">Execute</span> <span class=\"type\">Block</span> <span class=\"type\">Task2</span></span><br><span class=\"line\"><span class=\"type\">After</span> <span class=\"type\">Sync</span></span><br></pre></td></tr></table></figure>\n<p>上面的例子就是我们平常对 dispatch_sync 的用法，并且我们可以看到第一个 Block 任务执行之后才会执行第二个 Block 任务。dispatch_sync 需要等待 Block的任务执行完成之后，才能继续往后执行。但是使用 dispatch_sync 的时候，有几点是需要注意的：</p>\n<ol>\n<li><p>当调用 dispatch_sync 方法的时候，系统默认情况下会在当前线程去执行调度队列里的任务，只有在一些特殊情况下才会把调度队列的任务分配到其他线程去执行。所以我们就知道，线程和调度队列并不是一对一的关系。至于为什么默认情况下会在当前线程去执行调度队列里的任务，我的猜测是为了性能。大家想一想，dispatch_sync 会同步执行 Block任务， Block任务没有结束的情况下，后面的代码是无法执行的。基于这样一个同步的机制，GCD 还有必要先把当前线程挂起，然后去创建新线程，然后切换到新的线程去执行调度队列里的任务，然后再把线程切换到当前线程，然后再让当前线程恢复么？结论是没有必要。</p>\n</li>\n<li><p>你不能够在当前的串行调度队列的任务里面去添加新的任务到当前的调度队列里面，否则会造成死锁。这句话怎么理解呢，我们来来看看下面的例子：</p>\n</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> queue = dispatch_queue_create(<span class=\"string\">\"com.PS.Queue\"</span>, <span class=\"type\">DISPATCH_QUEUE_SERIAL</span>)  <span class=\"comment\">// 创建串行的调度队列</span></span><br><span class=\"line\"><span class=\"comment\">// 同步调用</span></span><br><span class=\"line\">dispatch_sync(queue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Block1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Begin Execute Block Task1\"</span>)</span><br><span class=\"line\">    dispatch_sync(queue) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Block2</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Execute Block Task2\"</span>)   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"End Execute Block Task1\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 例1的结果</span></span><br><span class=\"line\"><span class=\"type\">Begin</span> <span class=\"type\">Execute</span> <span class=\"type\">Block</span> <span class=\"type\">Task1</span></span><br></pre></td></tr></table></figure>\n<p>为什么 Block1 后面的 print 和 Block2 的 print 都不执行了呢？首先我们要知道被 DISPATCH_QUEUE_SERIAL 声明的调度队列是串行调度队列，串行调度队列里的任务是同时只能有一个任务在执行，并且当前任务没有执行完成，下一个任务也无法执行。上面的例子中会先输出 Block1 中的 <em>Begin Execute Block Task1</em>，然后这个时候再把 Block2 添加到同一个串行调度队列中去。这个时候的 Block1 还没有执行完成，它需要等 dispatch_sync 的 Block2 执行完成之后才能继续执行，而 Block2 又必须等待 Block1 执行完成之后才能执行，所以这个时候就造成 Block1 等着 Block2，Block2 等着 Block1 的死锁。</p>\n<p>我们再把调度队列属性改为 DISPAT_QUEUE_CONCURRENT，然后再看看执行结果是什么：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> queue = dispatch_queue_create(<span class=\"string\">\"com.PS.Queue\"</span>, <span class=\"type\">DISPATCH_QUEUE_SERIAL</span>)  <span class=\"comment\">// 创建串行的调度队列</span></span><br><span class=\"line\"><span class=\"comment\">// 同步调用</span></span><br><span class=\"line\">dispatch_sync(queue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Block1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Begin Execute Block Task1\"</span>)</span><br><span class=\"line\">    dispatch_sync(queue) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Block2</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Execute Block Task2\"</span>)   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"End Execute Block Task1\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例2的结果</span></span><br><span class=\"line\"><span class=\"type\">Begin</span> <span class=\"type\">Execute</span> <span class=\"type\">Block</span> <span class=\"type\">Task1</span></span><br><span class=\"line\"><span class=\"type\">Execute</span> <span class=\"type\">Block</span> <span class=\"type\">Task2</span></span><br><span class=\"line\"><span class=\"type\">End</span> <span class=\"type\">Execute</span> <span class=\"type\">Block</span> <span class=\"type\">Task1</span></span><br></pre></td></tr></table></figure>\n<p>被 DISPATCH_QUEUE_CONCURRENT 声明的并发调度队列就没有这种死锁的问题。并发调度队列里的任务是不会霸占资源不放的，每一个任务执行一个时间片段之后会把资源交出来给别的任务去执行。所以例2中的 Block1 虽然需要等待 Block2 执行完成之后才能继续执行，但是当 Block1 在等待的过程中，是可以把资源释放出来交给 Block2 去执行，Block2 执行完成之后 Block1 就可以继续执行了。所以，这个时候就不会造成死锁来。</p>\n<p>再来看看下面的例子会不会造成死锁：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    dispatch_sync(dispatch_get_main_queue()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Excute Block Task\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>答案是会的。给大家一点提示，主线程的默认调度队列是串行（DISPATCH_QUEUE_SERIAL）的，viewDidLoad() 是在主线程的调度队列 com.apple.main-thread (serial) 执行的。</p>\n<p>上面的例子主要是希望大家理解串行和并发的概念，同时要明白造成死锁的原因。而要解决死锁一般可以用 DISPATCH_QUEUE_CONCURRENT 或接下来我们要讲的 dispatch_async 来解决。</p>\n<p>通过对 dispatch_sync 的了解，我们可以利用 dispatch_async 很快的写出异步代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> queue = dispatch_queue_create(<span class=\"string\">\"com.PS.Queue\"</span>, <span class=\"type\">DISPATCH_QUEUE_SERIAL</span>)  <span class=\"comment\">// 创建调度队列</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Begin Async\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 异步调用</span></span><br><span class=\"line\">dispatch_async(queue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Block1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Execute Block Task1\"</span>)   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dispatch_async(queue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Block2</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Execute Block Task2\"</span>)   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"After Async\"</span>)</span><br></pre></td></tr></table></figure>\n<p>这个例子的结果有好几种：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 结果1</span></span><br><span class=\"line\"><span class=\"type\">Begin</span> <span class=\"type\">Async</span></span><br><span class=\"line\"><span class=\"type\">After</span> <span class=\"type\">Async</span></span><br><span class=\"line\"><span class=\"type\">Execute</span> <span class=\"type\">Block</span> <span class=\"type\">Task1</span></span><br><span class=\"line\"><span class=\"type\">ExEcute</span> <span class=\"type\">Block</span> <span class=\"type\">Task2</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 结果2</span></span><br><span class=\"line\"><span class=\"type\">Begin</span> <span class=\"type\">Async</span></span><br><span class=\"line\"><span class=\"type\">Execute</span> <span class=\"type\">Block</span> <span class=\"type\">Task1</span></span><br><span class=\"line\"><span class=\"type\">ExEcute</span> <span class=\"type\">Block</span> <span class=\"type\">Task2</span></span><br><span class=\"line\"><span class=\"type\">After</span> <span class=\"type\">Async</span></span><br></pre></td></tr></table></figure>\n<p>上面只是列出来两种可能，但实际上还有其他的可能。当我们调用 dispatch_async 的时候，它总是会在 Block 任务被提交之后马上返回，而不会傻傻的等待 Block 任务执行完成。由于上面创建的是串行调度队列，所以我们可以保证 Block1 要比 Block2 优先执行，但是 After Async 就无法确定是在 Block1 的前后还是 Block2 的前后。</p>\n<p>如果我们把上面的 DISPATCH_QUEUE_SERIAL 改成 DISPATCH_QUEUE_CONCURRENT，那我们就无法确定 After Async、Block1 和 Block2 这三者的执行顺序了。</p>\n<p>我们刚才说到用 dispatch_async 可以解决死锁的问题，那它是怎么解决的呢？</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> queue = dispatch_queue_create(<span class=\"string\">\"com.PS.Queue\"</span>, <span class=\"type\">DISPATCH_QUEUE_SERIAL</span>)  <span class=\"comment\">// 创建串行的调度队列</span></span><br><span class=\"line\"><span class=\"comment\">// 异步调用</span></span><br><span class=\"line\">dispatch_async(queue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Block1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Begin Execute Block Task1\"</span>)</span><br><span class=\"line\">    dispatch_async(queue) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Block2</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Execute Block Task2\"</span>)   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"End Execute Block Task1\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的例子会优先输出 Block1 的 <em>Begin Execute Block Task1</em> 之后，通过 dispatch_async 把 Block2 提交到串行队列里面，然后又马上返回到 Block1 去输出 <em>End Execute Block Task1</em>，这个时候的 Block1 就结束了，接下来就开始执行 Block2。所以上面的代码是不会造成死锁的，虽然上面的例子也是创建了一个串行调度队列，但是该调度队列只是保证了 Block1 要比 Block2 优先执行。</p>\n<h3 id=\"dispatch-once\"><a href=\"#dispatch-once\" class=\"headerlink\" title=\"dispatch_once\"></a>dispatch_once</h3><p>写过 Objective-C 的人都知道，dispatch_once 一般会被用来创建单例对象：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@implementation <span class=\"type\">Single</span></span><br><span class=\"line\">+ (<span class=\"type\">Single</span> *)sharedInstance &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">Single</span> * _single = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> dispatch_once_t onceToken;</span><br><span class=\"line\">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class=\"line\">        _single = [[<span class=\"type\">Single</span> alloc] <span class=\"keyword\">init</span>];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _single; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p>这是由于 dispatch_once 是线程安全且只会执行一次，所以才会被用来作为单例的实现。这里需要注意的是 dispatch_once_t 必须是静态的或全局的才能保证 dispatch_once 的 Block 只会被执行一次，所以上面的代码用了 static 来修饰 dispatch_once_t。</p>\n<h3 id=\"dispatch-apply\"><a href=\"#dispatch-apply\" class=\"headerlink\" title=\"dispatch_apply\"></a>dispatch_apply</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dispatch_apply</span><span class=\"params\">(iterations: Int, <span class=\"number\">_</span> queue: dispatch_queue_t!, <span class=\"number\">_</span> block: <span class=\"params\">(Int)</span></span></span> -&gt; <span class=\"type\">Void</span>)</span><br></pre></td></tr></table></figure>\n<p>其中的 interations 是表明要执行多少次 block，block 中的 Int 是该 Block 被执行的序号。调用这个方法的时候要注意该方法跟 dispatch_sync 一样会阻塞当前线程，所以我们需要注意在主线程中调用该方法。</p>\n<h3 id=\"dispatch-after\"><a href=\"#dispatch-after\" class=\"headerlink\" title=\"dispatch_after\"></a>dispatch_after</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dispatch_after</span><span class=\"params\">(when: dispatch_time_t, <span class=\"number\">_</span> queue: dispatch_queue_t, <span class=\"number\">_</span> block: dispatch_block_t)</span></span></span><br></pre></td></tr></table></figure>\n<p>调用这个方法的时候需要注意的是 when 这个参数，你需要通过 dispatch_time 或 dispatch_walltime 来创建。并且该方法是异步执行的，并不会阻塞当前线程。</p>\n<p>一般的写法如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch_after(dispatch_time(<span class=\"type\">DISPATCH_TIME_NOW</span>, <span class=\"type\">Int64</span>(<span class=\"number\">5</span> * <span class=\"type\">NSEC_PER_SEC</span>)), queue) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"5s <span class=\"subst\">\\(NSThread.currentThread()</span>)\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"dispatch-group-t\"><a href=\"#dispatch-group-t\" class=\"headerlink\" title=\"dispatch_group_t\"></a>dispatch_group_t</h3><p>dispatch_group_t 是用来做聚合同步的，它可以用来跟踪你提交的所有任务（即使是在不同的调度队列也可以）的完成状态。</p>\n<p>接下来我们来看看 dispatch group 的一些常见用法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建 dispatch_group_t 对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> group = dispatch_group_create()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建串行队列</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> serialQueue = dispatch_queue_create(<span class=\"string\">\"Serial Queue\"</span>, <span class=\"type\">DISPATCH_QUEUE_SERIAL</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提交两个 Block 任务到 serialQueue，同时关联 serialQueue 和 group 的关系</span></span><br><span class=\"line\">dispatch_group_async(group, serialQueue) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Execute Block1 within Serial Queue\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dispatch_group_async(group, serialQueue) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Execute Block2 within Serial Queue\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建并发队列，并提交 Block 任务，同时关联该并发队列和 group 的关系</span></span><br><span class=\"line\">dispatch_group_async(group, dispatch_queue_create(<span class=\"string\">\"Concurrent Queue\"</span>, <span class=\"type\">DISPATCH_QUEUE_CONCURRENT</span>)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Execute Block within Concurrent Queue\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面的代码只有当前面被关联到 group 的所有任务完成之后才会被触发</span></span><br><span class=\"line\">dispatch_group_notify(group, dispatch_queue_create(<span class=\"string\">\"Finished\"</span>)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Finished\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，关联到 group 的方法只有 dispatch_group_async 而没有 dispatch_group_sync。</p>\n<p>但是还有另外一种方法可以让我们关联一个普通的任务：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建 dispatch_group_t 对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> group = dispatch_group_create()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 dispatch_group_enter 和 dispatch_group_leave 的话，我们不需要调用</span></span><br><span class=\"line\"><span class=\"comment\">// dispatch_group_async 也能关联一个任务到 group 上</span></span><br><span class=\"line\">dispatch_group_enter(group)</span><br><span class=\"line\"><span class=\"keyword\">self</span>.executeTask &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行代码</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    dispatch_group_leave(group)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面的代码只有当前面被关联到 group 的所有任务完成之后才会被触发</span></span><br><span class=\"line\">dispatch_group_notify(group, dispatch_queue_create(<span class=\"string\">\"Finished\"</span>)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Finished\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 dispatch_group_enter 和 dispatch_group_leave 的时候，它们必须成双成对出现，否则 dispatch_group_notify 是不会被调用的。</p>\n<p>接下来我们还要了解一下 dispatch_group_wait：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dispatch_group_wait</span><span class=\"params\">(group: dispatch_group_t, <span class=\"number\">_</span> timeout: dispatch_time_t)</span></span> -&gt; <span class=\"type\">Int</span></span><br></pre></td></tr></table></figure>\n<p>dispatch_group_wait 可以指定一个 timeout 的参数，当 group 的任务没有在规定的时间内完成，它会返回一个非零的值，当 group 的任务能够在规定的时间内完成就返回0。同时，大家要注意这个方法会挂起当前线程，所以在主线程的时候要慎重使用该方法。</p>\n<h3 id=\"dispatch-barrier-t\"><a href=\"#dispatch-barrier-t\" class=\"headerlink\" title=\"dispatch_barrier_t\"></a>dispatch_barrier_t</h3><p>我们先来试想一个场景，假如现在有多个线程要去读取一份文件的内容，同时又有其他线程想要去更新该文件的内容，那么就有可能会发生你读错文件内容的现象。这个时候我们可以把所有读写操作都放到我们之前学习的串行队列去执行，但是我们都知道同时有多个线程去读取一份文件内容是没有问题的。</p>\n<p>使用 dispatch barrier 可以解决上面的问题：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建操作文件的并发队列</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> queue = dispatch_queue_create(<span class=\"string\">\"File\"</span>, <span class=\"type\">DISPATCH_QUEUE_CONCURRENT</span>)</span><br><span class=\"line\">dispatch_async(queue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Read1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dispatch_async(queue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Read2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dispatch_barrier_async(queue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Write</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dispatch_async(queue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Read3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过 dispatch_barrier_async 或 dispatch_barrier_sync 提交的任务会等待当前队列里正在执行的任务执行完毕才会执行，并且其他还没有执行的任务都必须等待提交到 dispatch barrier 的任务执行完毕之后才会开始执行。所以上面的代码中，当 Write 任务被提交的时候，如果当前队列中只有 Read1 在执行，那么 Write 会等待 Read1 执行完成之后才会执行，Read2  和 Read3 都必须等待 Write 执行完之后才会执行。另外，上面的代码中创建的是并发队列，因为如果是串行队列的话就没有必要用 dispatch barrier 了。</p>\n<h3 id=\"dispatch-semaphore-t\"><a href=\"#dispatch-semaphore-t\" class=\"headerlink\" title=\"dispatch_semaphore_t\"></a>dispatch_semaphore_t</h3><p>dispatch semaphore 是一个效率非常高的传统计数信号量，所以我们一般可以用这个来控制最大的并发数量。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建初始值为2的信号量，最大并发数量为2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> semaphore = dispatch_semaphore_create(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// 创建并发队列</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> queue = dispatch_queue_create(<span class=\"string\">\"Semaphore\"</span>, <span class=\"type\">DISPATCH_QUEUE_CONCURRENT</span>)</span><br><span class=\"line\"><span class=\"comment\">// 创建100个并发任务</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"number\">1</span>...<span class=\"number\">100</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这个方法会进行信号量减1的操作，并且如果信号量减1之后的结果小于0的话，该方法会造成线程的挂起直</span></span><br><span class=\"line\">    <span class=\"comment\">// 到该信号量进行加1操作才会恢复，所以在主线程要注意该方法的使用。</span></span><br><span class=\"line\">    <span class=\"comment\">// 注意：这个方法要放在 dispatch_async 外面，否则系统依旧会创建超过2个线程同时来处理该调度队列</span></span><br><span class=\"line\">    <span class=\"comment\">// 的任务</span></span><br><span class=\"line\">    dispatch_semaphore_wait(semaphore, <span class=\"type\">DISPATCH_TIME_FOREVER</span>)</span><br><span class=\"line\">    dispatch_async(queue) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 释放资源，信号量增加1</span></span><br><span class=\"line\">        dispatch_semaphore_signal(semaphore)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>GCD 在 Swift3 的语法跟现在的语法不太一样了，有兴趣的可以自行去了解。在未来可能会考虑把本文章的代码都用 Swift3 的语法来重新写一下。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"GCD-简介\"><a href=\"#GCD-简介\" class=\"headerlink\" title=\"GCD 简介\"></a>GCD 简介</h2><p>GCD(Grand Central Dispatch) 是苹果提供的一套多线程编程技术。想象一下，如果让你编写一个可以高效的跑在不同计算机、不同内核的应用程序，你会怎么做呢？你要看看硬件是什么，看看有有多少个内核，想想用什么算法，想想在什么时候去切换线程…总之，你要做的东西多了去了。而 GCD 帮我们屏蔽了这些技术细节，但是如果要用好 GCD 的话，还是要多了解一些知识点。</p>\n<h2 id=\"Dispatch-对象和内存管理\"><a href=\"#Dispatch-对象和内存管理\" class=\"headerlink\" title=\"Dispatch 对象和内存管理\"></a>Dispatch 对象和内存管理</h2><p>在 Objective-C 里面，所有的 dispatch 对象都是 Objective-C 对象，所以他们同样适用引用技术的内存管理。如果你是使用 ARC 的话，dispatch 对象会向普通的 Objective-C 对象一样自动进行 retain 和 release 操作；如果你是使用 MRC，要记住使用 dispatch_retain 和 dispatch_release 来进行管理。</p>\n<h2 id=\"常用-API\"><a href=\"#常用-API\" class=\"headerlink\" title=\"常用 API\"></a>常用 API</h2><h3 id=\"dispatch-queue-t（调度队列）\"><a href=\"#dispatch-queue-t（调度队列）\" class=\"headerlink\" title=\"dispatch_queue_t（调度队列）\"></a>dispatch_queue_t（调度队列）</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dispatch_queue_create</span><span class=\"params\">(label: UnsafePointer&lt;Int8&gt;, <span class=\"number\">_</span> attr: dispatch_queue_attr_t!)</span></span> -&gt; dispatch_queue_t!</span><br></pre></td></tr></table></figure>\n<p>在 GCD 中只能通过上面的 API 来创建调度队列，我们可以通过创建各种各样的 Block 形式的任务并由该调度队列来决定如何去执行这些 Block 任务。上面创建调度队列的函数需要两个参数：</p>\n<ul>\n<li>label: 这个参数是用来给你创建的调度队列进行命名的，特别是在调试的时候你可以通过该参数来判断是哪个调度队列的任务在执行。</li>\n<li>attr: 这个参数只有 DISPATCH_QUEUE_SERIAL 和 DISPATCH_QUEUE_CONCURRENT 两种值（在 Objective-C 中这个参数可以为 NULL，这个时候默认是 DISPATCH_QUEUE_SERIAL）。DISPATCH_QUEUE_SERIAL 是告诉调度队列以串行的方式去执行任务，DISPATCH_QUEUE_CONCURRENT 是告诉调度队列以并发的方式去执行任务。</li>\n</ul>\n<p>当然我们还可以通过下面的方法来获取系统已经创建好的调度队列：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取全局队列</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dispatch_get_global_queue</span><span class=\"params\">(identifier: Int, <span class=\"number\">_</span> flags: UInt)</span></span> -&gt; dispatch_queue_t!</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取主线程的com.apple.main-thread (serial)队列</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dispatch_get_main_queue</span><span class=\"params\">()</span></span> -&gt; dispatch_queue_t!</span><br></pre></td></tr></table></figure>\n<p>注意，所有 pending 状态的 Block 任务都会持有该调度队列的引用，所以我们不需要显示的去持有调度队列，而调度队列会在所有的 Block 任务都从 pending 变为 finished 之后才会被释放。</p>\n<p>总之，现在大家要知道的是我们可以把不同的 Block任务提交到调度队列，具体的细节和实现看看后面内容。</p>\n<h3 id=\"dispatch-sync-和-dispatch-async（同步和异步）\"><a href=\"#dispatch-sync-和-dispatch-async（同步和异步）\" class=\"headerlink\" title=\"dispatch_sync 和 dispatch_async（同步和异步）\"></a>dispatch_sync 和 dispatch_async（同步和异步）</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> queue = dispatch_queue_create(<span class=\"string\">\"com.PS.Queue\"</span>, <span class=\"type\">DISPATCH_QUEUE_SERIAL</span>)  <span class=\"comment\">// 创建调度队列</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Begin Sync\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 同步调用</span></span><br><span class=\"line\">dispatch_sync(queue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Block任务</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Execute Block Task1\"</span>)   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dispatch_sync(queue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Block任务</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Execute Block Task2\"</span>)   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"After Sync\"</span>)</span><br></pre></td></tr></table></figure>\n<p>这段代码的输出结果如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Begin</span> <span class=\"type\">Sync</span></span><br><span class=\"line\"><span class=\"type\">Execute</span> <span class=\"type\">Block</span> <span class=\"type\">Task1</span></span><br><span class=\"line\"><span class=\"type\">Execute</span> <span class=\"type\">Block</span> <span class=\"type\">Task2</span></span><br><span class=\"line\"><span class=\"type\">After</span> <span class=\"type\">Sync</span></span><br></pre></td></tr></table></figure>\n<p>上面的例子就是我们平常对 dispatch_sync 的用法，并且我们可以看到第一个 Block 任务执行之后才会执行第二个 Block 任务。dispatch_sync 需要等待 Block的任务执行完成之后，才能继续往后执行。但是使用 dispatch_sync 的时候，有几点是需要注意的：</p>\n<ol>\n<li><p>当调用 dispatch_sync 方法的时候，系统默认情况下会在当前线程去执行调度队列里的任务，只有在一些特殊情况下才会把调度队列的任务分配到其他线程去执行。所以我们就知道，线程和调度队列并不是一对一的关系。至于为什么默认情况下会在当前线程去执行调度队列里的任务，我的猜测是为了性能。大家想一想，dispatch_sync 会同步执行 Block任务， Block任务没有结束的情况下，后面的代码是无法执行的。基于这样一个同步的机制，GCD 还有必要先把当前线程挂起，然后去创建新线程，然后切换到新的线程去执行调度队列里的任务，然后再把线程切换到当前线程，然后再让当前线程恢复么？结论是没有必要。</p>\n</li>\n<li><p>你不能够在当前的串行调度队列的任务里面去添加新的任务到当前的调度队列里面，否则会造成死锁。这句话怎么理解呢，我们来来看看下面的例子：</p>\n</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> queue = dispatch_queue_create(<span class=\"string\">\"com.PS.Queue\"</span>, <span class=\"type\">DISPATCH_QUEUE_SERIAL</span>)  <span class=\"comment\">// 创建串行的调度队列</span></span><br><span class=\"line\"><span class=\"comment\">// 同步调用</span></span><br><span class=\"line\">dispatch_sync(queue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Block1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Begin Execute Block Task1\"</span>)</span><br><span class=\"line\">    dispatch_sync(queue) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Block2</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Execute Block Task2\"</span>)   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"End Execute Block Task1\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 例1的结果</span></span><br><span class=\"line\"><span class=\"type\">Begin</span> <span class=\"type\">Execute</span> <span class=\"type\">Block</span> <span class=\"type\">Task1</span></span><br></pre></td></tr></table></figure>\n<p>为什么 Block1 后面的 print 和 Block2 的 print 都不执行了呢？首先我们要知道被 DISPATCH_QUEUE_SERIAL 声明的调度队列是串行调度队列，串行调度队列里的任务是同时只能有一个任务在执行，并且当前任务没有执行完成，下一个任务也无法执行。上面的例子中会先输出 Block1 中的 <em>Begin Execute Block Task1</em>，然后这个时候再把 Block2 添加到同一个串行调度队列中去。这个时候的 Block1 还没有执行完成，它需要等 dispatch_sync 的 Block2 执行完成之后才能继续执行，而 Block2 又必须等待 Block1 执行完成之后才能执行，所以这个时候就造成 Block1 等着 Block2，Block2 等着 Block1 的死锁。</p>\n<p>我们再把调度队列属性改为 DISPAT_QUEUE_CONCURRENT，然后再看看执行结果是什么：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> queue = dispatch_queue_create(<span class=\"string\">\"com.PS.Queue\"</span>, <span class=\"type\">DISPATCH_QUEUE_SERIAL</span>)  <span class=\"comment\">// 创建串行的调度队列</span></span><br><span class=\"line\"><span class=\"comment\">// 同步调用</span></span><br><span class=\"line\">dispatch_sync(queue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Block1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Begin Execute Block Task1\"</span>)</span><br><span class=\"line\">    dispatch_sync(queue) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Block2</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Execute Block Task2\"</span>)   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"End Execute Block Task1\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 例2的结果</span></span><br><span class=\"line\"><span class=\"type\">Begin</span> <span class=\"type\">Execute</span> <span class=\"type\">Block</span> <span class=\"type\">Task1</span></span><br><span class=\"line\"><span class=\"type\">Execute</span> <span class=\"type\">Block</span> <span class=\"type\">Task2</span></span><br><span class=\"line\"><span class=\"type\">End</span> <span class=\"type\">Execute</span> <span class=\"type\">Block</span> <span class=\"type\">Task1</span></span><br></pre></td></tr></table></figure>\n<p>被 DISPATCH_QUEUE_CONCURRENT 声明的并发调度队列就没有这种死锁的问题。并发调度队列里的任务是不会霸占资源不放的，每一个任务执行一个时间片段之后会把资源交出来给别的任务去执行。所以例2中的 Block1 虽然需要等待 Block2 执行完成之后才能继续执行，但是当 Block1 在等待的过程中，是可以把资源释放出来交给 Block2 去执行，Block2 执行完成之后 Block1 就可以继续执行了。所以，这个时候就不会造成死锁来。</p>\n<p>再来看看下面的例子会不会造成死锁：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">viewDidLoad</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    dispatch_sync(dispatch_get_main_queue()) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Excute Block Task\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>答案是会的。给大家一点提示，主线程的默认调度队列是串行（DISPATCH_QUEUE_SERIAL）的，viewDidLoad() 是在主线程的调度队列 com.apple.main-thread (serial) 执行的。</p>\n<p>上面的例子主要是希望大家理解串行和并发的概念，同时要明白造成死锁的原因。而要解决死锁一般可以用 DISPATCH_QUEUE_CONCURRENT 或接下来我们要讲的 dispatch_async 来解决。</p>\n<p>通过对 dispatch_sync 的了解，我们可以利用 dispatch_async 很快的写出异步代码：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> queue = dispatch_queue_create(<span class=\"string\">\"com.PS.Queue\"</span>, <span class=\"type\">DISPATCH_QUEUE_SERIAL</span>)  <span class=\"comment\">// 创建调度队列</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Begin Async\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 异步调用</span></span><br><span class=\"line\">dispatch_async(queue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Block1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Execute Block Task1\"</span>)   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dispatch_async(queue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Block2</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Execute Block Task2\"</span>)   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"After Async\"</span>)</span><br></pre></td></tr></table></figure>\n<p>这个例子的结果有好几种：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 结果1</span></span><br><span class=\"line\"><span class=\"type\">Begin</span> <span class=\"type\">Async</span></span><br><span class=\"line\"><span class=\"type\">After</span> <span class=\"type\">Async</span></span><br><span class=\"line\"><span class=\"type\">Execute</span> <span class=\"type\">Block</span> <span class=\"type\">Task1</span></span><br><span class=\"line\"><span class=\"type\">ExEcute</span> <span class=\"type\">Block</span> <span class=\"type\">Task2</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 结果2</span></span><br><span class=\"line\"><span class=\"type\">Begin</span> <span class=\"type\">Async</span></span><br><span class=\"line\"><span class=\"type\">Execute</span> <span class=\"type\">Block</span> <span class=\"type\">Task1</span></span><br><span class=\"line\"><span class=\"type\">ExEcute</span> <span class=\"type\">Block</span> <span class=\"type\">Task2</span></span><br><span class=\"line\"><span class=\"type\">After</span> <span class=\"type\">Async</span></span><br></pre></td></tr></table></figure>\n<p>上面只是列出来两种可能，但实际上还有其他的可能。当我们调用 dispatch_async 的时候，它总是会在 Block 任务被提交之后马上返回，而不会傻傻的等待 Block 任务执行完成。由于上面创建的是串行调度队列，所以我们可以保证 Block1 要比 Block2 优先执行，但是 After Async 就无法确定是在 Block1 的前后还是 Block2 的前后。</p>\n<p>如果我们把上面的 DISPATCH_QUEUE_SERIAL 改成 DISPATCH_QUEUE_CONCURRENT，那我们就无法确定 After Async、Block1 和 Block2 这三者的执行顺序了。</p>\n<p>我们刚才说到用 dispatch_async 可以解决死锁的问题，那它是怎么解决的呢？</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> queue = dispatch_queue_create(<span class=\"string\">\"com.PS.Queue\"</span>, <span class=\"type\">DISPATCH_QUEUE_SERIAL</span>)  <span class=\"comment\">// 创建串行的调度队列</span></span><br><span class=\"line\"><span class=\"comment\">// 异步调用</span></span><br><span class=\"line\">dispatch_async(queue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Block1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Begin Execute Block Task1\"</span>)</span><br><span class=\"line\">    dispatch_async(queue) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Block2</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"Execute Block Task2\"</span>)   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"End Execute Block Task1\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的例子会优先输出 Block1 的 <em>Begin Execute Block Task1</em> 之后，通过 dispatch_async 把 Block2 提交到串行队列里面，然后又马上返回到 Block1 去输出 <em>End Execute Block Task1</em>，这个时候的 Block1 就结束了，接下来就开始执行 Block2。所以上面的代码是不会造成死锁的，虽然上面的例子也是创建了一个串行调度队列，但是该调度队列只是保证了 Block1 要比 Block2 优先执行。</p>\n<h3 id=\"dispatch-once\"><a href=\"#dispatch-once\" class=\"headerlink\" title=\"dispatch_once\"></a>dispatch_once</h3><p>写过 Objective-C 的人都知道，dispatch_once 一般会被用来创建单例对象：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@implementation <span class=\"type\">Single</span></span><br><span class=\"line\">+ (<span class=\"type\">Single</span> *)sharedInstance &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">Single</span> * _single = <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> dispatch_once_t onceToken;</span><br><span class=\"line\">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class=\"line\">        _single = [[<span class=\"type\">Single</span> alloc] <span class=\"keyword\">init</span>];</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _single; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p>这是由于 dispatch_once 是线程安全且只会执行一次，所以才会被用来作为单例的实现。这里需要注意的是 dispatch_once_t 必须是静态的或全局的才能保证 dispatch_once 的 Block 只会被执行一次，所以上面的代码用了 static 来修饰 dispatch_once_t。</p>\n<h3 id=\"dispatch-apply\"><a href=\"#dispatch-apply\" class=\"headerlink\" title=\"dispatch_apply\"></a>dispatch_apply</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dispatch_apply</span><span class=\"params\">(iterations: Int, <span class=\"number\">_</span> queue: dispatch_queue_t!, <span class=\"number\">_</span> block: <span class=\"params\">(Int)</span></span></span> -&gt; <span class=\"type\">Void</span>)</span><br></pre></td></tr></table></figure>\n<p>其中的 interations 是表明要执行多少次 block，block 中的 Int 是该 Block 被执行的序号。调用这个方法的时候要注意该方法跟 dispatch_sync 一样会阻塞当前线程，所以我们需要注意在主线程中调用该方法。</p>\n<h3 id=\"dispatch-after\"><a href=\"#dispatch-after\" class=\"headerlink\" title=\"dispatch_after\"></a>dispatch_after</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dispatch_after</span><span class=\"params\">(when: dispatch_time_t, <span class=\"number\">_</span> queue: dispatch_queue_t, <span class=\"number\">_</span> block: dispatch_block_t)</span></span></span><br></pre></td></tr></table></figure>\n<p>调用这个方法的时候需要注意的是 when 这个参数，你需要通过 dispatch_time 或 dispatch_walltime 来创建。并且该方法是异步执行的，并不会阻塞当前线程。</p>\n<p>一般的写法如下：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dispatch_after(dispatch_time(<span class=\"type\">DISPATCH_TIME_NOW</span>, <span class=\"type\">Int64</span>(<span class=\"number\">5</span> * <span class=\"type\">NSEC_PER_SEC</span>)), queue) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"5s <span class=\"subst\">\\(NSThread.currentThread()</span>)\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"dispatch-group-t\"><a href=\"#dispatch-group-t\" class=\"headerlink\" title=\"dispatch_group_t\"></a>dispatch_group_t</h3><p>dispatch_group_t 是用来做聚合同步的，它可以用来跟踪你提交的所有任务（即使是在不同的调度队列也可以）的完成状态。</p>\n<p>接下来我们来看看 dispatch group 的一些常见用法：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建 dispatch_group_t 对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> group = dispatch_group_create()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建串行队列</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> serialQueue = dispatch_queue_create(<span class=\"string\">\"Serial Queue\"</span>, <span class=\"type\">DISPATCH_QUEUE_SERIAL</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提交两个 Block 任务到 serialQueue，同时关联 serialQueue 和 group 的关系</span></span><br><span class=\"line\">dispatch_group_async(group, serialQueue) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Execute Block1 within Serial Queue\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dispatch_group_async(group, serialQueue) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Execute Block2 within Serial Queue\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建并发队列，并提交 Block 任务，同时关联该并发队列和 group 的关系</span></span><br><span class=\"line\">dispatch_group_async(group, dispatch_queue_create(<span class=\"string\">\"Concurrent Queue\"</span>, <span class=\"type\">DISPATCH_QUEUE_CONCURRENT</span>)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Execute Block within Concurrent Queue\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面的代码只有当前面被关联到 group 的所有任务完成之后才会被触发</span></span><br><span class=\"line\">dispatch_group_notify(group, dispatch_queue_create(<span class=\"string\">\"Finished\"</span>)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Finished\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，关联到 group 的方法只有 dispatch_group_async 而没有 dispatch_group_sync。</p>\n<p>但是还有另外一种方法可以让我们关联一个普通的任务：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建 dispatch_group_t 对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> group = dispatch_group_create()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 dispatch_group_enter 和 dispatch_group_leave 的话，我们不需要调用</span></span><br><span class=\"line\"><span class=\"comment\">// dispatch_group_async 也能关联一个任务到 group 上</span></span><br><span class=\"line\">dispatch_group_enter(group)</span><br><span class=\"line\"><span class=\"keyword\">self</span>.executeTask &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行代码</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    dispatch_group_leave(group)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面的代码只有当前面被关联到 group 的所有任务完成之后才会被触发</span></span><br><span class=\"line\">dispatch_group_notify(group, dispatch_queue_create(<span class=\"string\">\"Finished\"</span>)) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Finished\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 dispatch_group_enter 和 dispatch_group_leave 的时候，它们必须成双成对出现，否则 dispatch_group_notify 是不会被调用的。</p>\n<p>接下来我们还要了解一下 dispatch_group_wait：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dispatch_group_wait</span><span class=\"params\">(group: dispatch_group_t, <span class=\"number\">_</span> timeout: dispatch_time_t)</span></span> -&gt; <span class=\"type\">Int</span></span><br></pre></td></tr></table></figure>\n<p>dispatch_group_wait 可以指定一个 timeout 的参数，当 group 的任务没有在规定的时间内完成，它会返回一个非零的值，当 group 的任务能够在规定的时间内完成就返回0。同时，大家要注意这个方法会挂起当前线程，所以在主线程的时候要慎重使用该方法。</p>\n<h3 id=\"dispatch-barrier-t\"><a href=\"#dispatch-barrier-t\" class=\"headerlink\" title=\"dispatch_barrier_t\"></a>dispatch_barrier_t</h3><p>我们先来试想一个场景，假如现在有多个线程要去读取一份文件的内容，同时又有其他线程想要去更新该文件的内容，那么就有可能会发生你读错文件内容的现象。这个时候我们可以把所有读写操作都放到我们之前学习的串行队列去执行，但是我们都知道同时有多个线程去读取一份文件内容是没有问题的。</p>\n<p>使用 dispatch barrier 可以解决上面的问题：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建操作文件的并发队列</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> queue = dispatch_queue_create(<span class=\"string\">\"File\"</span>, <span class=\"type\">DISPATCH_QUEUE_CONCURRENT</span>)</span><br><span class=\"line\">dispatch_async(queue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Read1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dispatch_async(queue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Read2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dispatch_barrier_async(queue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Write</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">dispatch_async(queue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Read3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过 dispatch_barrier_async 或 dispatch_barrier_sync 提交的任务会等待当前队列里正在执行的任务执行完毕才会执行，并且其他还没有执行的任务都必须等待提交到 dispatch barrier 的任务执行完毕之后才会开始执行。所以上面的代码中，当 Write 任务被提交的时候，如果当前队列中只有 Read1 在执行，那么 Write 会等待 Read1 执行完成之后才会执行，Read2  和 Read3 都必须等待 Write 执行完之后才会执行。另外，上面的代码中创建的是并发队列，因为如果是串行队列的话就没有必要用 dispatch barrier 了。</p>\n<h3 id=\"dispatch-semaphore-t\"><a href=\"#dispatch-semaphore-t\" class=\"headerlink\" title=\"dispatch_semaphore_t\"></a>dispatch_semaphore_t</h3><p>dispatch semaphore 是一个效率非常高的传统计数信号量，所以我们一般可以用这个来控制最大的并发数量。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建初始值为2的信号量，最大并发数量为2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> semaphore = dispatch_semaphore_create(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">// 创建并发队列</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> queue = dispatch_queue_create(<span class=\"string\">\"Semaphore\"</span>, <span class=\"type\">DISPATCH_QUEUE_CONCURRENT</span>)</span><br><span class=\"line\"><span class=\"comment\">// 创建100个并发任务</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"number\">1</span>...<span class=\"number\">100</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这个方法会进行信号量减1的操作，并且如果信号量减1之后的结果小于0的话，该方法会造成线程的挂起直</span></span><br><span class=\"line\">    <span class=\"comment\">// 到该信号量进行加1操作才会恢复，所以在主线程要注意该方法的使用。</span></span><br><span class=\"line\">    <span class=\"comment\">// 注意：这个方法要放在 dispatch_async 外面，否则系统依旧会创建超过2个线程同时来处理该调度队列</span></span><br><span class=\"line\">    <span class=\"comment\">// 的任务</span></span><br><span class=\"line\">    dispatch_semaphore_wait(semaphore, <span class=\"type\">DISPATCH_TIME_FOREVER</span>)</span><br><span class=\"line\">    dispatch_async(queue) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 释放资源，信号量增加1</span></span><br><span class=\"line\">        dispatch_semaphore_signal(semaphore)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>GCD 在 Swift3 的语法跟现在的语法不太一样了，有兴趣的可以自行去了解。在未来可能会考虑把本文章的代码都用 Swift3 的语法来重新写一下。</p>\n"},{"title":"如何用 Objective-C 实现一个死锁","date":"2018-04-01T20:29:42.000Z","author":"帕帕","thumbnail":"https://images.unsplash.com/photo-1509655172625-03265ba919a1?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=24b01fba0d86b9fa95814c692429379f&auto=format&fit=crop&w=160&q=100","_content":"\n> 当系统存在两个线程及以上的时候，双方都在等待对方停止执行，以获得系统资源，但是没有一方提前退出的时候就叫做死锁。\n\n\n那在 Objective-C 里面如何实现死锁呢：\n\n```Objective-C \nself.lock1 = [NSLock new];\nself.lock2 = [NSLock new];\n    \ndispatch_async(dispatch_queue_create(\"com.papa.task1\", DISPATCH_QUEUE_SERIAL), ^{\n    [self.lock1 lock];\n    NSLog(@\"task1 获得 lock1\");\n    sleep(2);\n    [self.lock2 lock];\n    NSLog(@\"task1 获得 lock2\");\n    [self.lock2 unlock];\n    [self.lock1 unlock];\n});\n\ndispatch_async(dispatch_queue_create(\"com.papa.task2\", DISPATCH_QUEUE_SERIAL), ^{\n    [self.lock2 lock];\n    NSLog(@\"task2 获得 lock2\");\n    sleep(2);\n    [self.lock1 lock];\n    NSLog(@\"task2 获得 lock1\");\n    [self.lock1 unlock];\n    [self.lock2 unlock];\n});\n```\n我们可以看到最后控制台输出的结果是：\n\n```\ntask2 获得 lock2\ntask1 获得 lock1\n```\n\n或\n\n```\ntask2 获得 lock2\ntask1 获得 lock1\n```\n\n为什么是两种结果呢，可以参考我的[「初步了解 GCD」](https://hparis.github.io/blog/2017/09/05/%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3GCD/)。\n\n但是不管如何，这两种结果都没有输出 `task1 获得 lock2` 或 `task2 获得 lock1`。我们来分析一下：\n\n* task1 获得 lock1，然后沉睡 2s\n* task2 获得 lock2，然后沉睡 2s\n* task1 经过 2s 的沉睡之后想要去获取 lock2，此时发现 lock2 已经被使用，那就继续等待\n* task2 经过 2s 的沉睡之后想要去获取 lock1，此时发现 lock1 已经被使用，那就继续等待\n* task1 又被唤醒想要去获取 lock2，此时 lock2 依旧没有被 task2 释放，只能继续等待\n* task2 又被唤醒想要去获取 lock1，此时 lock1 依旧没有被 task1 释放，只能继续等待\n* ...\n* ...\n    \n于是 task1 和 task2 都在等待对方释放资源，但是自己也不退出也不释放资源，最终导致死锁的产生。\n\n\n接下来，我们来讨论另外一个例子是不是死锁：\n\n```Objective-C\n// 某个按钮的点击事件\n- (void)onClick:(UIEvent *)event {\n    dispatch_sync(dispatch_get_main_queue(), ^{\n        ...    \n    });\n}\n```\n\n相信大家都知道上面这个例子会导致主线程发生阻塞的现象，但是这是因为死锁造成的么？\n\n> Submits a block to a dispatch queue for synchronous execution. Unlike dispatch_async, this function does not return until the block has finished. Calling this function and targeting the current queue results in deadlock.\n\n在官方文档里面明确的说了，这就是死锁。我们可以把上面的例子“翻译”一下：\n\n```Objective-C\n// 首先进入 onClick 的时候，我们可以认为此时是需要加锁的\n// 某个按钮的点击事件\n- (void)onClick:(UIEvent *)event {\n    [self.lock1 lock];\n    \n    // 此时我们可以认为 dispatch_sync 是在获取 block 里面的 lock2 \n    {\n        [self.lock2 lock];\n        \n        // 放在主线程执行，那么它也需要获得 lock1 \n        [self.lock1 lock];\n        [self.lock1 unlock];\n        \n        [self.lock2 unlock];\n    }\n    \n    [self.lock1 unlock];\n}\n```\n\n我们可以看到其实上面的情况就是两个任务都在同时竞争主线程的资源，并且谁都没有退出最终导致死锁的产生。但是这两个任务并不是普通的两个线程在竞争资源，而是都在主线程上，一个嵌套另外一个。而且这种特殊的情况，在运行的时候会直接导致奔溃，而不像我们一开始的例子一样只是在互相等待。但是既然苹果把这种情况也称为死锁，那我们就当做死锁来看待，毕竟他们都是在竞争系统资源。\n\n","source":"_posts/如何用-Objective-C-实现一个死锁.md","raw":"---\ntitle: 如何用 Objective-C 实现一个死锁\ndate: 2018-04-01 20:29:42 +0800\nauthor: 帕帕\ncategories: 技术\ntags: [iOS, Objective-C, GCD]\nthumbnail: https://images.unsplash.com/photo-1509655172625-03265ba919a1?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=24b01fba0d86b9fa95814c692429379f&auto=format&fit=crop&w=160&q=100\n---\n\n> 当系统存在两个线程及以上的时候，双方都在等待对方停止执行，以获得系统资源，但是没有一方提前退出的时候就叫做死锁。\n\n\n那在 Objective-C 里面如何实现死锁呢：\n\n```Objective-C \nself.lock1 = [NSLock new];\nself.lock2 = [NSLock new];\n    \ndispatch_async(dispatch_queue_create(\"com.papa.task1\", DISPATCH_QUEUE_SERIAL), ^{\n    [self.lock1 lock];\n    NSLog(@\"task1 获得 lock1\");\n    sleep(2);\n    [self.lock2 lock];\n    NSLog(@\"task1 获得 lock2\");\n    [self.lock2 unlock];\n    [self.lock1 unlock];\n});\n\ndispatch_async(dispatch_queue_create(\"com.papa.task2\", DISPATCH_QUEUE_SERIAL), ^{\n    [self.lock2 lock];\n    NSLog(@\"task2 获得 lock2\");\n    sleep(2);\n    [self.lock1 lock];\n    NSLog(@\"task2 获得 lock1\");\n    [self.lock1 unlock];\n    [self.lock2 unlock];\n});\n```\n我们可以看到最后控制台输出的结果是：\n\n```\ntask2 获得 lock2\ntask1 获得 lock1\n```\n\n或\n\n```\ntask2 获得 lock2\ntask1 获得 lock1\n```\n\n为什么是两种结果呢，可以参考我的[「初步了解 GCD」](https://hparis.github.io/blog/2017/09/05/%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3GCD/)。\n\n但是不管如何，这两种结果都没有输出 `task1 获得 lock2` 或 `task2 获得 lock1`。我们来分析一下：\n\n* task1 获得 lock1，然后沉睡 2s\n* task2 获得 lock2，然后沉睡 2s\n* task1 经过 2s 的沉睡之后想要去获取 lock2，此时发现 lock2 已经被使用，那就继续等待\n* task2 经过 2s 的沉睡之后想要去获取 lock1，此时发现 lock1 已经被使用，那就继续等待\n* task1 又被唤醒想要去获取 lock2，此时 lock2 依旧没有被 task2 释放，只能继续等待\n* task2 又被唤醒想要去获取 lock1，此时 lock1 依旧没有被 task1 释放，只能继续等待\n* ...\n* ...\n    \n于是 task1 和 task2 都在等待对方释放资源，但是自己也不退出也不释放资源，最终导致死锁的产生。\n\n\n接下来，我们来讨论另外一个例子是不是死锁：\n\n```Objective-C\n// 某个按钮的点击事件\n- (void)onClick:(UIEvent *)event {\n    dispatch_sync(dispatch_get_main_queue(), ^{\n        ...    \n    });\n}\n```\n\n相信大家都知道上面这个例子会导致主线程发生阻塞的现象，但是这是因为死锁造成的么？\n\n> Submits a block to a dispatch queue for synchronous execution. Unlike dispatch_async, this function does not return until the block has finished. Calling this function and targeting the current queue results in deadlock.\n\n在官方文档里面明确的说了，这就是死锁。我们可以把上面的例子“翻译”一下：\n\n```Objective-C\n// 首先进入 onClick 的时候，我们可以认为此时是需要加锁的\n// 某个按钮的点击事件\n- (void)onClick:(UIEvent *)event {\n    [self.lock1 lock];\n    \n    // 此时我们可以认为 dispatch_sync 是在获取 block 里面的 lock2 \n    {\n        [self.lock2 lock];\n        \n        // 放在主线程执行，那么它也需要获得 lock1 \n        [self.lock1 lock];\n        [self.lock1 unlock];\n        \n        [self.lock2 unlock];\n    }\n    \n    [self.lock1 unlock];\n}\n```\n\n我们可以看到其实上面的情况就是两个任务都在同时竞争主线程的资源，并且谁都没有退出最终导致死锁的产生。但是这两个任务并不是普通的两个线程在竞争资源，而是都在主线程上，一个嵌套另外一个。而且这种特殊的情况，在运行的时候会直接导致奔溃，而不像我们一开始的例子一样只是在互相等待。但是既然苹果把这种情况也称为死锁，那我们就当做死锁来看待，毕竟他们都是在竞争系统资源。\n\n","slug":"如何用-Objective-C-实现一个死锁","published":1,"updated":"2018-04-01T14:16:27.166Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo44p6vs0014arvbhqy3hfam","content":"<blockquote>\n<p>当系统存在两个线程及以上的时候，双方都在等待对方停止执行，以获得系统资源，但是没有一方提前退出的时候就叫做死锁。</p>\n</blockquote>\n<p>那在 Objective-C 里面如何实现死锁呢：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.lock1 = [NSLock new];</span><br><span class=\"line\">self.lock2 = [NSLock new];</span><br><span class=\"line\">    </span><br><span class=\"line\">dispatch_async(dispatch_queue_create(&quot;com.papa.task1&quot;, DISPATCH_QUEUE_SERIAL), ^&#123;</span><br><span class=\"line\">    [self.lock1 lock];</span><br><span class=\"line\">    NSLog(@&quot;task1 获得 lock1&quot;);</span><br><span class=\"line\">    sleep(2);</span><br><span class=\"line\">    [self.lock2 lock];</span><br><span class=\"line\">    NSLog(@&quot;task1 获得 lock2&quot;);</span><br><span class=\"line\">    [self.lock2 unlock];</span><br><span class=\"line\">    [self.lock1 unlock];</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">dispatch_async(dispatch_queue_create(&quot;com.papa.task2&quot;, DISPATCH_QUEUE_SERIAL), ^&#123;</span><br><span class=\"line\">    [self.lock2 lock];</span><br><span class=\"line\">    NSLog(@&quot;task2 获得 lock2&quot;);</span><br><span class=\"line\">    sleep(2);</span><br><span class=\"line\">    [self.lock1 lock];</span><br><span class=\"line\">    NSLog(@&quot;task2 获得 lock1&quot;);</span><br><span class=\"line\">    [self.lock1 unlock];</span><br><span class=\"line\">    [self.lock2 unlock];</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>我们可以看到最后控制台输出的结果是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task2 获得 lock2</span><br><span class=\"line\">task1 获得 lock1</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task2 获得 lock2</span><br><span class=\"line\">task1 获得 lock1</span><br></pre></td></tr></table></figure>\n<p>为什么是两种结果呢，可以参考我的<a href=\"https://hparis.github.io/blog/2017/09/05/%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3GCD/\">「初步了解 GCD」</a>。</p>\n<p>但是不管如何，这两种结果都没有输出 <code>task1 获得 lock2</code> 或 <code>task2 获得 lock1</code>。我们来分析一下：</p>\n<ul>\n<li>task1 获得 lock1，然后沉睡 2s</li>\n<li>task2 获得 lock2，然后沉睡 2s</li>\n<li>task1 经过 2s 的沉睡之后想要去获取 lock2，此时发现 lock2 已经被使用，那就继续等待</li>\n<li>task2 经过 2s 的沉睡之后想要去获取 lock1，此时发现 lock1 已经被使用，那就继续等待</li>\n<li>task1 又被唤醒想要去获取 lock2，此时 lock2 依旧没有被 task2 释放，只能继续等待</li>\n<li>task2 又被唤醒想要去获取 lock1，此时 lock1 依旧没有被 task1 释放，只能继续等待</li>\n<li>…</li>\n<li>…</li>\n</ul>\n<p>于是 task1 和 task2 都在等待对方释放资源，但是自己也不退出也不释放资源，最终导致死锁的产生。</p>\n<p>接下来，我们来讨论另外一个例子是不是死锁：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 某个按钮的点击事件</span><br><span class=\"line\">- (void)onClick:(UIEvent *)event &#123;</span><br><span class=\"line\">    dispatch_sync(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">        ...    </span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相信大家都知道上面这个例子会导致主线程发生阻塞的现象，但是这是因为死锁造成的么？</p>\n<blockquote>\n<p>Submits a block to a dispatch queue for synchronous execution. Unlike dispatch_async, this function does not return until the block has finished. Calling this function and targeting the current queue results in deadlock.</p>\n</blockquote>\n<p>在官方文档里面明确的说了，这就是死锁。我们可以把上面的例子“翻译”一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 首先进入 onClick 的时候，我们可以认为此时是需要加锁的</span><br><span class=\"line\">// 某个按钮的点击事件</span><br><span class=\"line\">- (void)onClick:(UIEvent *)event &#123;</span><br><span class=\"line\">    [self.lock1 lock];</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 此时我们可以认为 dispatch_sync 是在获取 block 里面的 lock2 </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [self.lock2 lock];</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 放在主线程执行，那么它也需要获得 lock1 </span><br><span class=\"line\">        [self.lock1 lock];</span><br><span class=\"line\">        [self.lock1 unlock];</span><br><span class=\"line\">        </span><br><span class=\"line\">        [self.lock2 unlock];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [self.lock1 unlock];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以看到其实上面的情况就是两个任务都在同时竞争主线程的资源，并且谁都没有退出最终导致死锁的产生。但是这两个任务并不是普通的两个线程在竞争资源，而是都在主线程上，一个嵌套另外一个。而且这种特殊的情况，在运行的时候会直接导致奔溃，而不像我们一开始的例子一样只是在互相等待。但是既然苹果把这种情况也称为死锁，那我们就当做死锁来看待，毕竟他们都是在竞争系统资源。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>当系统存在两个线程及以上的时候，双方都在等待对方停止执行，以获得系统资源，但是没有一方提前退出的时候就叫做死锁。</p>\n</blockquote>\n<p>那在 Objective-C 里面如何实现死锁呢：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.lock1 = [NSLock new];</span><br><span class=\"line\">self.lock2 = [NSLock new];</span><br><span class=\"line\">    </span><br><span class=\"line\">dispatch_async(dispatch_queue_create(&quot;com.papa.task1&quot;, DISPATCH_QUEUE_SERIAL), ^&#123;</span><br><span class=\"line\">    [self.lock1 lock];</span><br><span class=\"line\">    NSLog(@&quot;task1 获得 lock1&quot;);</span><br><span class=\"line\">    sleep(2);</span><br><span class=\"line\">    [self.lock2 lock];</span><br><span class=\"line\">    NSLog(@&quot;task1 获得 lock2&quot;);</span><br><span class=\"line\">    [self.lock2 unlock];</span><br><span class=\"line\">    [self.lock1 unlock];</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">dispatch_async(dispatch_queue_create(&quot;com.papa.task2&quot;, DISPATCH_QUEUE_SERIAL), ^&#123;</span><br><span class=\"line\">    [self.lock2 lock];</span><br><span class=\"line\">    NSLog(@&quot;task2 获得 lock2&quot;);</span><br><span class=\"line\">    sleep(2);</span><br><span class=\"line\">    [self.lock1 lock];</span><br><span class=\"line\">    NSLog(@&quot;task2 获得 lock1&quot;);</span><br><span class=\"line\">    [self.lock1 unlock];</span><br><span class=\"line\">    [self.lock2 unlock];</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>我们可以看到最后控制台输出的结果是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task2 获得 lock2</span><br><span class=\"line\">task1 获得 lock1</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task2 获得 lock2</span><br><span class=\"line\">task1 获得 lock1</span><br></pre></td></tr></table></figure>\n<p>为什么是两种结果呢，可以参考我的<a href=\"https://hparis.github.io/blog/2017/09/05/%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3GCD/\">「初步了解 GCD」</a>。</p>\n<p>但是不管如何，这两种结果都没有输出 <code>task1 获得 lock2</code> 或 <code>task2 获得 lock1</code>。我们来分析一下：</p>\n<ul>\n<li>task1 获得 lock1，然后沉睡 2s</li>\n<li>task2 获得 lock2，然后沉睡 2s</li>\n<li>task1 经过 2s 的沉睡之后想要去获取 lock2，此时发现 lock2 已经被使用，那就继续等待</li>\n<li>task2 经过 2s 的沉睡之后想要去获取 lock1，此时发现 lock1 已经被使用，那就继续等待</li>\n<li>task1 又被唤醒想要去获取 lock2，此时 lock2 依旧没有被 task2 释放，只能继续等待</li>\n<li>task2 又被唤醒想要去获取 lock1，此时 lock1 依旧没有被 task1 释放，只能继续等待</li>\n<li>…</li>\n<li>…</li>\n</ul>\n<p>于是 task1 和 task2 都在等待对方释放资源，但是自己也不退出也不释放资源，最终导致死锁的产生。</p>\n<p>接下来，我们来讨论另外一个例子是不是死锁：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 某个按钮的点击事件</span><br><span class=\"line\">- (void)onClick:(UIEvent *)event &#123;</span><br><span class=\"line\">    dispatch_sync(dispatch_get_main_queue(), ^&#123;</span><br><span class=\"line\">        ...    </span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相信大家都知道上面这个例子会导致主线程发生阻塞的现象，但是这是因为死锁造成的么？</p>\n<blockquote>\n<p>Submits a block to a dispatch queue for synchronous execution. Unlike dispatch_async, this function does not return until the block has finished. Calling this function and targeting the current queue results in deadlock.</p>\n</blockquote>\n<p>在官方文档里面明确的说了，这就是死锁。我们可以把上面的例子“翻译”一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 首先进入 onClick 的时候，我们可以认为此时是需要加锁的</span><br><span class=\"line\">// 某个按钮的点击事件</span><br><span class=\"line\">- (void)onClick:(UIEvent *)event &#123;</span><br><span class=\"line\">    [self.lock1 lock];</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 此时我们可以认为 dispatch_sync 是在获取 block 里面的 lock2 </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        [self.lock2 lock];</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 放在主线程执行，那么它也需要获得 lock1 </span><br><span class=\"line\">        [self.lock1 lock];</span><br><span class=\"line\">        [self.lock1 unlock];</span><br><span class=\"line\">        </span><br><span class=\"line\">        [self.lock2 unlock];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [self.lock1 unlock];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以看到其实上面的情况就是两个任务都在同时竞争主线程的资源，并且谁都没有退出最终导致死锁的产生。但是这两个任务并不是普通的两个线程在竞争资源，而是都在主线程上，一个嵌套另外一个。而且这种特殊的情况，在运行的时候会直接导致奔溃，而不像我们一开始的例子一样只是在互相等待。但是既然苹果把这种情况也称为死锁，那我们就当做死锁来看待，毕竟他们都是在竞争系统资源。</p>\n"},{"title":"说说 Objective-C 中的 Copy 操作","date":"2018-03-23T16:35:55.000Z","author":"帕帕","thumbnail":"https://i.imgur.com/svn3AbQs.png","_content":"\n## 浅拷贝（Shallow copies）和深拷贝（Deep copies）\n\n我们都知道 Objective-C 中把 Copy 操作分成两种：`浅拷贝（Shallow copies）`和`深拷贝（Deep copies）`。学过 C 语言的同学应该知道区分这两种操作的区别其实很简单：\n\n> 浅拷贝（Shallow copies）: 指针拷贝，指向的还是同一块内容的地址\n> 深拷贝（Deep copies）: 内容拷贝\n\n\n但是在 Objective-C 里面对于 Copy 的实现还是跟 C 语言的有点差别。我们先来看看 Apple 的官方文档给出的一张图：\n\n![Collections Programming Topics](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Collections/Art/CopyingCollections_2x.png)\n\n通过上图可以看出`浅拷贝`过后，Array 1 和 Array 2 的元素都是相同的指针地址，指向相同的内容；`深拷贝`过后，内容被拷贝一份新的出来，Array 2 的元素的指针地址都和 Array 1 不一样，因为 Array2 的元素的指针地址都指向新的内容。\n\n## immutable 和 mutable 对象的拷贝\n\n在 Objective-C 中一般会用 copy 或 mutableCopy 进行拷贝操作，我们可以通过观察指针变化来确定这两种拷贝操作是`浅复制`还是`深复制`。\n    \n* immutable 对象的复制操作\n\n    ```Objective-C\n    NSString * aName = @\"帕帕\";\n    NSString * bName = [aName copy];\n    NSMutableString * cName = [aName mutableCopy];\n    \n    NSLog(@\"aName 的指针：%p\", aName);\n    NSLog(@\"bName 的指针：%p\", bName);\n    NSLog(@\"cName 的指针：%p\", cName);\n    \n    ```\n\n    输出的结果：\n    \n    ```\n    aName 的指针：0x103d34070\n    bName 的指针：0x103d34070\n    cName 的指针：0x600000250dd0\n    ```\n\n* mutable 对象的复制操作\n\n    ```Objective-C\n    NSMutableString * aName = [NSMutableString stringWithString:@\"帕帕\"];\n    NSString * bName = [aName copy];\n    NSMutableString * cName = [aName mutableCopy];\n    \n    NSLog(@\"aName 的指针：%p\", aName);\n    NSLog(@\"bName 的指针：%p\", bName);\n    NSLog(@\"cName 的指针：%p\", cName);\n    \n    ```\n\n    输出的结果：\n    \n    ```\n    aName 的指针：0x60000025e150\n    bName 的指针：0x600000222900\n    cName 的指针：0x60000025e450\n    ```\n\n通过上面两个例子以及它们的输出结果，我们可以得出下面这个表格：\n\n|  | imutable 对象 | mutable 对象 |\n| :---: | :---: | :---: |\n| copy | 浅复制 | 深复制 |\n| mutableCopy | 深复制| 深复制 |\n\n上面的规则对集合对象也是一样的：NSArray 和 NSMutableArray，NSDictionary 和 NSMutableDictionary，NSSet 和 NSMutableSet\n\n\n## 单层深复制（one-level-deep）\n\n```Objective-C\nNSMutableString * aString = [NSMutableString stringWithString:@\"\bHello\"]\n\nNSMutableArray * aArray = [NSMutableArray arrayWithObjects:aString, nil];\nNSArray * bArray = [aArray copy];\n\nNSMutableString * bString = bArray[0];\n[bString appendString:@\" \b帕帕\"];\n    \nNSLog(@\"aArray 的指针：%p\", aName);\nNSLog(@\"bArray 的指针：%p\", bName);\nNSLog(@\"aArray \b\u001d\b第一个元素的指针: %p，\b\b内容：%@\", aArray[0], aArray[0]);\nNSLog(@\"bArray 第一个元素的指针: %p，\b\b内容：%@\", bArray[0], bArray[0]);\n```\n\n输出结果：\n\n```\naArray 的指针：0x60000025d9a0\nbArray 的指针：0x60000002cf60\naArray \b\u001d\b第一个元素的指针: 0x60000025d880，\b\b内容：\bHello \b帕帕\nbArray 第一个元素的指针: 0x60000025d880，\b\b内容：\bHello \b帕帕\n```\n\n从 aArray 到 bArray 的 copy 操作之后，它们的指针地址发生了变化，按照我们之前的理解这是`深拷贝`。`深拷贝`会把 aArray 的元素都拷贝一份，那为什么改变 bArray 的元素的值会导致 aArray 的元素的值也发生了变化呢？\n\n![集合对象的深拷贝](https://i.imgur.com/svn3AbQ.png)\n\n## 完全深复制\n\n那我们要如何做到真正的深复制呢？我们可以简单的把上面的代码改一下：\n\n```Objective-C\nNSMutableString * aString = [NSMutableString stringWithString:@\"\bHello\"]\n\nNSMutableArray * aArray = [NSMutableArray arrayWithObjects:aString, nil];\n\n// 只需要改动这一行代码\nNSArray *bArray = [NSKeyedUnarchiver unarchiveObjectWithData:[NSKeyedArchiver archivedDataWithRootObject:aArray]];\n\nNSMutableString * bString = bArray[0];\n[bString appendString:@\" \b帕帕\"];\n    \nNSLog(@\"aArray 的指针：%p\", aName);\nNSLog(@\"bArray 的指针：%p\", bName);\nNSLog(@\"aArray \b\u001d\b第一个元素的指针: %p，\b\b内容：%@\", aArray[0], aArray[0]);\nNSLog(@\"bArray 第一个元素的指针: %p，\b\b内容：%@\", bArray[0], bArray[0]);\n```\n\n输出结果：\n\n```\naArray 的指针：0x600000259cb0\nbArray 的指针：0x600000030ac0\naArray \b\u001d\b第一个元素的指针: 0x604000452120，\b\b内容：\bHello\nbArray 第一个元素的指针: 0x604000452780，\b\b内容：\bHello \b帕帕\n```\n\n只要先对集合对象分别用 NSKeyedArchiver 和 NSKeyedUnarchiver 就可以真正完成对一个集合对象的深复制。\n\n## Copy 和 内存管理\n\n之前我们说过 Objective-C 里面对于 Copy 的实现还是跟 C 语言的有点差别，那差别在什么地方呢？\n内存中做复制操作是很耗费资源的，而我们都知道 Objective-C 高效的一个原因在于它的内存管理机制是`引用计数`。我们前面分析的`深拷贝`是对内容的拷贝，这一点跟 C 语言的一样。C 语言的`浅拷贝`是指针的拷贝，它依旧做了一次复制操作。而在 Objective-C 中，`浅拷贝`其实只是引用计数的增加，不信的话，我们可以看看下面的例子：\n\n```Objective-C\nNSArray * aArray = [NSArray arrayWithObjects:@\"帕帕\", nil];\nNSLog(@\"aArray 的指针：%p，\b\b引用计数：%ld\", aArray, CFGetRetainCount((__bridge CFTypeRef)(aArray)));\nNSArray * bArray = [aArray copy];\nNSLog(@\"aArray 的指针：%p，\b\b引用计数：%ld\", aArray, CFGetRetainCount((__bridge CFTypeRef)(aArray)));\nNSMutableArray * cArray = [aArray mutableCopy];\nNSLog(@\"aArray 的指针：%p，\b\b引用计数：%ld\", aArray, CFGetRetainCount((__bridge CFTypeRef)(aArray)));\n```\n\n输出结果：\n\n```\naArray 的指针：0x604000443ba0，\b\b引用计数：2\naArray 的指针：0x604000443ba0，\b\b引用计数：3\naArray 的指针：0x604000443ba0，\b\b引用计数：3\n```\n\n为什么 aArray 刚出来的时候的引用计数是 2？因为 `[NSArray arrayWithObjects:@\"帕帕\", nil]` 本身就是一个对象，它的引用计数就是 1；然后我们又定义了 aArray 来引用这个对象，此时它的引用计数就增加了 1，变成了 2；之后我们对 aArray 进行了 copy 操作，发现它的引用计数变成了 3，所以这里的 copy 操作其实相当于 retaion；最有我们对 aArray 进行了 mutableCopy 操作，此时它的引用计数还是 3，没有发生变化，因为这个时候进行了内容复制。\n\n所以在 Objective-C 中对一个 imutable 对象进行的 copy（浅复制）操作，其实都只会引起引用计数的变化，而不会在内存中做出任何拷贝操作，包括指针拷贝。\n\n## NSCopying 和 NSMutableCopying\n\n如果我们有一个自定义的对象，并且对其进行 copy 操作的话，会发生什么：\n\n```Objective-C\n// Person\n@interface Person: NSObject\n@property (nonatomic, copy) NSString * name;\n@end\n@implementation Person\n@end\n\nPerson * aPerson = [Person new];\nPerson * bPerson = [aPerson copy];\n```\n\nXcode 直接奔溃了：\n\n```\n// 崩溃\n*** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '-[Person copyWithZone:]: unrecognized selector sent to instance 0x60000000d5f0'\n```\n\n为什么我们对一个 Person 对象使用了 copy，Xcode 确报的是找不到 `copyWithZone:` 这个 selector 的错误。\n\n这是因为 Objective-C 中规定，一个对象如果想要使用 copy 或 mutableCopy 的操作，必须要实现 `NSCopying` 或 `NSMutableCopying` 这两个协议。这两个协议规定了对象需要实现 `copyWithZone:` 或 `mutableCopyWithZone:` 这两个方法，因为对一个对象做 copy 或 mutableCopy 最后都会去调用这两个方法来做最终的实现。\n上面例子中的集合对象能够使用 copy 和 mutableCopy 操作是也因为它们都实现了 NSCopying 和 NSMutableCopying 协议。\n\n我们来看看如何对一个普通的对象实现 NSCopying 协议：\n\n```Objective-C\n@interface Person: NSObject <NSCopying>\n@property (nonatomic, copy) NSString * name;\n@property (nonatomic, strong) NSMutableArray * mArray;\n@end\n\n@implementation Person\n- (instancetype)copyWithZone:(NSZone *)zone {\n    Person * person = [[self class] new];\n    person.name = [self.name copy];\n    person.mArray = [self.mArray mutableCopy];\n    return person;\n}\n@end\n```\n \n这样，我们就可以愉快的使用 `[Person copy]` 了。当然，这里 Person 的 mArray 也只是`单层深复制`，如果想要实现`完全深复制`的话，我们可以用 NSKeyedArchiver 和 NSKeyedUnarchiver 来完成对 mArray 的`完全深复制`。\n\n## Block 和 Copy\n\n简单说一下，在 Objective-C 中，Block 的 copy 是一种特殊的操作。因为 Block 是一种结构体，它无法实现 NSCopying 或 NSMutableCopying 协议，但是它却可以调用 copy 方法。这是由 Block 的结构体决定的：\n\n![](http://www.devtalking.com/postImages/block-struct.jpg)\n\nBlock 里面的 descriptor 有 copy 的函数指针，当对 Block 执行 copy 操作最后都会通过该函数指针进行真正的操作。这也是 Bloc看不需要实现 NSCopying 和 NSMutableCopying 就能调用 copy 方法的原因。\n\n\n\n参考资料：\n1. https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Collections/Articles/Copying.html\n2. https://www.zybuluo.com/MicroCai/note/50592\n\n","source":"_posts/说说-Objective-C-中的-Copy-操作.md","raw":"---\ntitle: 说说 Objective-C 中的 Copy 操作\ndate: 2018-03-23 16:35:55 +0800\nauthor: 帕帕\ncategories: 技术 \ntags: [iOS, Objective-C]\nthumbnail: https://i.imgur.com/svn3AbQs.png\n---\n\n## 浅拷贝（Shallow copies）和深拷贝（Deep copies）\n\n我们都知道 Objective-C 中把 Copy 操作分成两种：`浅拷贝（Shallow copies）`和`深拷贝（Deep copies）`。学过 C 语言的同学应该知道区分这两种操作的区别其实很简单：\n\n> 浅拷贝（Shallow copies）: 指针拷贝，指向的还是同一块内容的地址\n> 深拷贝（Deep copies）: 内容拷贝\n\n\n但是在 Objective-C 里面对于 Copy 的实现还是跟 C 语言的有点差别。我们先来看看 Apple 的官方文档给出的一张图：\n\n![Collections Programming Topics](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Collections/Art/CopyingCollections_2x.png)\n\n通过上图可以看出`浅拷贝`过后，Array 1 和 Array 2 的元素都是相同的指针地址，指向相同的内容；`深拷贝`过后，内容被拷贝一份新的出来，Array 2 的元素的指针地址都和 Array 1 不一样，因为 Array2 的元素的指针地址都指向新的内容。\n\n## immutable 和 mutable 对象的拷贝\n\n在 Objective-C 中一般会用 copy 或 mutableCopy 进行拷贝操作，我们可以通过观察指针变化来确定这两种拷贝操作是`浅复制`还是`深复制`。\n    \n* immutable 对象的复制操作\n\n    ```Objective-C\n    NSString * aName = @\"帕帕\";\n    NSString * bName = [aName copy];\n    NSMutableString * cName = [aName mutableCopy];\n    \n    NSLog(@\"aName 的指针：%p\", aName);\n    NSLog(@\"bName 的指针：%p\", bName);\n    NSLog(@\"cName 的指针：%p\", cName);\n    \n    ```\n\n    输出的结果：\n    \n    ```\n    aName 的指针：0x103d34070\n    bName 的指针：0x103d34070\n    cName 的指针：0x600000250dd0\n    ```\n\n* mutable 对象的复制操作\n\n    ```Objective-C\n    NSMutableString * aName = [NSMutableString stringWithString:@\"帕帕\"];\n    NSString * bName = [aName copy];\n    NSMutableString * cName = [aName mutableCopy];\n    \n    NSLog(@\"aName 的指针：%p\", aName);\n    NSLog(@\"bName 的指针：%p\", bName);\n    NSLog(@\"cName 的指针：%p\", cName);\n    \n    ```\n\n    输出的结果：\n    \n    ```\n    aName 的指针：0x60000025e150\n    bName 的指针：0x600000222900\n    cName 的指针：0x60000025e450\n    ```\n\n通过上面两个例子以及它们的输出结果，我们可以得出下面这个表格：\n\n|  | imutable 对象 | mutable 对象 |\n| :---: | :---: | :---: |\n| copy | 浅复制 | 深复制 |\n| mutableCopy | 深复制| 深复制 |\n\n上面的规则对集合对象也是一样的：NSArray 和 NSMutableArray，NSDictionary 和 NSMutableDictionary，NSSet 和 NSMutableSet\n\n\n## 单层深复制（one-level-deep）\n\n```Objective-C\nNSMutableString * aString = [NSMutableString stringWithString:@\"\bHello\"]\n\nNSMutableArray * aArray = [NSMutableArray arrayWithObjects:aString, nil];\nNSArray * bArray = [aArray copy];\n\nNSMutableString * bString = bArray[0];\n[bString appendString:@\" \b帕帕\"];\n    \nNSLog(@\"aArray 的指针：%p\", aName);\nNSLog(@\"bArray 的指针：%p\", bName);\nNSLog(@\"aArray \b\u001d\b第一个元素的指针: %p，\b\b内容：%@\", aArray[0], aArray[0]);\nNSLog(@\"bArray 第一个元素的指针: %p，\b\b内容：%@\", bArray[0], bArray[0]);\n```\n\n输出结果：\n\n```\naArray 的指针：0x60000025d9a0\nbArray 的指针：0x60000002cf60\naArray \b\u001d\b第一个元素的指针: 0x60000025d880，\b\b内容：\bHello \b帕帕\nbArray 第一个元素的指针: 0x60000025d880，\b\b内容：\bHello \b帕帕\n```\n\n从 aArray 到 bArray 的 copy 操作之后，它们的指针地址发生了变化，按照我们之前的理解这是`深拷贝`。`深拷贝`会把 aArray 的元素都拷贝一份，那为什么改变 bArray 的元素的值会导致 aArray 的元素的值也发生了变化呢？\n\n![集合对象的深拷贝](https://i.imgur.com/svn3AbQ.png)\n\n## 完全深复制\n\n那我们要如何做到真正的深复制呢？我们可以简单的把上面的代码改一下：\n\n```Objective-C\nNSMutableString * aString = [NSMutableString stringWithString:@\"\bHello\"]\n\nNSMutableArray * aArray = [NSMutableArray arrayWithObjects:aString, nil];\n\n// 只需要改动这一行代码\nNSArray *bArray = [NSKeyedUnarchiver unarchiveObjectWithData:[NSKeyedArchiver archivedDataWithRootObject:aArray]];\n\nNSMutableString * bString = bArray[0];\n[bString appendString:@\" \b帕帕\"];\n    \nNSLog(@\"aArray 的指针：%p\", aName);\nNSLog(@\"bArray 的指针：%p\", bName);\nNSLog(@\"aArray \b\u001d\b第一个元素的指针: %p，\b\b内容：%@\", aArray[0], aArray[0]);\nNSLog(@\"bArray 第一个元素的指针: %p，\b\b内容：%@\", bArray[0], bArray[0]);\n```\n\n输出结果：\n\n```\naArray 的指针：0x600000259cb0\nbArray 的指针：0x600000030ac0\naArray \b\u001d\b第一个元素的指针: 0x604000452120，\b\b内容：\bHello\nbArray 第一个元素的指针: 0x604000452780，\b\b内容：\bHello \b帕帕\n```\n\n只要先对集合对象分别用 NSKeyedArchiver 和 NSKeyedUnarchiver 就可以真正完成对一个集合对象的深复制。\n\n## Copy 和 内存管理\n\n之前我们说过 Objective-C 里面对于 Copy 的实现还是跟 C 语言的有点差别，那差别在什么地方呢？\n内存中做复制操作是很耗费资源的，而我们都知道 Objective-C 高效的一个原因在于它的内存管理机制是`引用计数`。我们前面分析的`深拷贝`是对内容的拷贝，这一点跟 C 语言的一样。C 语言的`浅拷贝`是指针的拷贝，它依旧做了一次复制操作。而在 Objective-C 中，`浅拷贝`其实只是引用计数的增加，不信的话，我们可以看看下面的例子：\n\n```Objective-C\nNSArray * aArray = [NSArray arrayWithObjects:@\"帕帕\", nil];\nNSLog(@\"aArray 的指针：%p，\b\b引用计数：%ld\", aArray, CFGetRetainCount((__bridge CFTypeRef)(aArray)));\nNSArray * bArray = [aArray copy];\nNSLog(@\"aArray 的指针：%p，\b\b引用计数：%ld\", aArray, CFGetRetainCount((__bridge CFTypeRef)(aArray)));\nNSMutableArray * cArray = [aArray mutableCopy];\nNSLog(@\"aArray 的指针：%p，\b\b引用计数：%ld\", aArray, CFGetRetainCount((__bridge CFTypeRef)(aArray)));\n```\n\n输出结果：\n\n```\naArray 的指针：0x604000443ba0，\b\b引用计数：2\naArray 的指针：0x604000443ba0，\b\b引用计数：3\naArray 的指针：0x604000443ba0，\b\b引用计数：3\n```\n\n为什么 aArray 刚出来的时候的引用计数是 2？因为 `[NSArray arrayWithObjects:@\"帕帕\", nil]` 本身就是一个对象，它的引用计数就是 1；然后我们又定义了 aArray 来引用这个对象，此时它的引用计数就增加了 1，变成了 2；之后我们对 aArray 进行了 copy 操作，发现它的引用计数变成了 3，所以这里的 copy 操作其实相当于 retaion；最有我们对 aArray 进行了 mutableCopy 操作，此时它的引用计数还是 3，没有发生变化，因为这个时候进行了内容复制。\n\n所以在 Objective-C 中对一个 imutable 对象进行的 copy（浅复制）操作，其实都只会引起引用计数的变化，而不会在内存中做出任何拷贝操作，包括指针拷贝。\n\n## NSCopying 和 NSMutableCopying\n\n如果我们有一个自定义的对象，并且对其进行 copy 操作的话，会发生什么：\n\n```Objective-C\n// Person\n@interface Person: NSObject\n@property (nonatomic, copy) NSString * name;\n@end\n@implementation Person\n@end\n\nPerson * aPerson = [Person new];\nPerson * bPerson = [aPerson copy];\n```\n\nXcode 直接奔溃了：\n\n```\n// 崩溃\n*** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '-[Person copyWithZone:]: unrecognized selector sent to instance 0x60000000d5f0'\n```\n\n为什么我们对一个 Person 对象使用了 copy，Xcode 确报的是找不到 `copyWithZone:` 这个 selector 的错误。\n\n这是因为 Objective-C 中规定，一个对象如果想要使用 copy 或 mutableCopy 的操作，必须要实现 `NSCopying` 或 `NSMutableCopying` 这两个协议。这两个协议规定了对象需要实现 `copyWithZone:` 或 `mutableCopyWithZone:` 这两个方法，因为对一个对象做 copy 或 mutableCopy 最后都会去调用这两个方法来做最终的实现。\n上面例子中的集合对象能够使用 copy 和 mutableCopy 操作是也因为它们都实现了 NSCopying 和 NSMutableCopying 协议。\n\n我们来看看如何对一个普通的对象实现 NSCopying 协议：\n\n```Objective-C\n@interface Person: NSObject <NSCopying>\n@property (nonatomic, copy) NSString * name;\n@property (nonatomic, strong) NSMutableArray * mArray;\n@end\n\n@implementation Person\n- (instancetype)copyWithZone:(NSZone *)zone {\n    Person * person = [[self class] new];\n    person.name = [self.name copy];\n    person.mArray = [self.mArray mutableCopy];\n    return person;\n}\n@end\n```\n \n这样，我们就可以愉快的使用 `[Person copy]` 了。当然，这里 Person 的 mArray 也只是`单层深复制`，如果想要实现`完全深复制`的话，我们可以用 NSKeyedArchiver 和 NSKeyedUnarchiver 来完成对 mArray 的`完全深复制`。\n\n## Block 和 Copy\n\n简单说一下，在 Objective-C 中，Block 的 copy 是一种特殊的操作。因为 Block 是一种结构体，它无法实现 NSCopying 或 NSMutableCopying 协议，但是它却可以调用 copy 方法。这是由 Block 的结构体决定的：\n\n![](http://www.devtalking.com/postImages/block-struct.jpg)\n\nBlock 里面的 descriptor 有 copy 的函数指针，当对 Block 执行 copy 操作最后都会通过该函数指针进行真正的操作。这也是 Bloc看不需要实现 NSCopying 和 NSMutableCopying 就能调用 copy 方法的原因。\n\n\n\n参考资料：\n1. https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Collections/Articles/Copying.html\n2. https://www.zybuluo.com/MicroCai/note/50592\n\n","slug":"说说-Objective-C-中的-Copy-操作","published":1,"updated":"2018-04-18T09:42:48.943Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo44p6vt0016arvbb2wdh1iy","content":"<h2 id=\"浅拷贝（Shallow-copies）和深拷贝（Deep-copies）\"><a href=\"#浅拷贝（Shallow-copies）和深拷贝（Deep-copies）\" class=\"headerlink\" title=\"浅拷贝（Shallow copies）和深拷贝（Deep copies）\"></a>浅拷贝（Shallow copies）和深拷贝（Deep copies）</h2><p>我们都知道 Objective-C 中把 Copy 操作分成两种：<code>浅拷贝（Shallow copies）</code>和<code>深拷贝（Deep copies）</code>。学过 C 语言的同学应该知道区分这两种操作的区别其实很简单：</p>\n<blockquote>\n<p>浅拷贝（Shallow copies）: 指针拷贝，指向的还是同一块内容的地址<br>深拷贝（Deep copies）: 内容拷贝</p>\n</blockquote>\n<p>但是在 Objective-C 里面对于 Copy 的实现还是跟 C 语言的有点差别。我们先来看看 Apple 的官方文档给出的一张图：</p>\n<p><img src=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Collections/Art/CopyingCollections_2x.png\" alt=\"Collections Programming Topics\"></p>\n<p>通过上图可以看出<code>浅拷贝</code>过后，Array 1 和 Array 2 的元素都是相同的指针地址，指向相同的内容；<code>深拷贝</code>过后，内容被拷贝一份新的出来，Array 2 的元素的指针地址都和 Array 1 不一样，因为 Array2 的元素的指针地址都指向新的内容。</p>\n<h2 id=\"immutable-和-mutable-对象的拷贝\"><a href=\"#immutable-和-mutable-对象的拷贝\" class=\"headerlink\" title=\"immutable 和 mutable 对象的拷贝\"></a>immutable 和 mutable 对象的拷贝</h2><p>在 Objective-C 中一般会用 copy 或 mutableCopy 进行拷贝操作，我们可以通过观察指针变化来确定这两种拷贝操作是<code>浅复制</code>还是<code>深复制</code>。</p>\n<ul>\n<li><p>immutable 对象的复制操作</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString * aName = @&quot;帕帕&quot;;</span><br><span class=\"line\">NSString * bName = [aName copy];</span><br><span class=\"line\">NSMutableString * cName = [aName mutableCopy];</span><br><span class=\"line\"></span><br><span class=\"line\">NSLog(@&quot;aName 的指针：%p&quot;, aName);</span><br><span class=\"line\">NSLog(@&quot;bName 的指针：%p&quot;, bName);</span><br><span class=\"line\">NSLog(@&quot;cName 的指针：%p&quot;, cName);</span><br></pre></td></tr></table></figure>\n<p>  输出的结果：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aName 的指针：0x103d34070</span><br><span class=\"line\">bName 的指针：0x103d34070</span><br><span class=\"line\">cName 的指针：0x600000250dd0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>mutable 对象的复制操作</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableString * aName = [NSMutableString stringWithString:@&quot;帕帕&quot;];</span><br><span class=\"line\">NSString * bName = [aName copy];</span><br><span class=\"line\">NSMutableString * cName = [aName mutableCopy];</span><br><span class=\"line\"></span><br><span class=\"line\">NSLog(@&quot;aName 的指针：%p&quot;, aName);</span><br><span class=\"line\">NSLog(@&quot;bName 的指针：%p&quot;, bName);</span><br><span class=\"line\">NSLog(@&quot;cName 的指针：%p&quot;, cName);</span><br></pre></td></tr></table></figure>\n<p>  输出的结果：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aName 的指针：0x60000025e150</span><br><span class=\"line\">bName 的指针：0x600000222900</span><br><span class=\"line\">cName 的指针：0x60000025e450</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>通过上面两个例子以及它们的输出结果，我们可以得出下面这个表格：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">imutable 对象</th>\n<th style=\"text-align:center\">mutable 对象</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">copy</td>\n<td style=\"text-align:center\">浅复制</td>\n<td style=\"text-align:center\">深复制</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mutableCopy</td>\n<td style=\"text-align:center\">深复制</td>\n<td style=\"text-align:center\">深复制</td>\n</tr>\n</tbody>\n</table>\n<p>上面的规则对集合对象也是一样的：NSArray 和 NSMutableArray，NSDictionary 和 NSMutableDictionary，NSSet 和 NSMutableSet</p>\n<h2 id=\"单层深复制（one-level-deep）\"><a href=\"#单层深复制（one-level-deep）\" class=\"headerlink\" title=\"单层深复制（one-level-deep）\"></a>单层深复制（one-level-deep）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableString * aString = [NSMutableString stringWithString:@&quot;\bHello&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">NSMutableArray * aArray = [NSMutableArray arrayWithObjects:aString, nil];</span><br><span class=\"line\">NSArray * bArray = [aArray copy];</span><br><span class=\"line\"></span><br><span class=\"line\">NSMutableString * bString = bArray[0];</span><br><span class=\"line\">[bString appendString:@&quot; \b帕帕&quot;];</span><br><span class=\"line\">    </span><br><span class=\"line\">NSLog(@&quot;aArray 的指针：%p&quot;, aName);</span><br><span class=\"line\">NSLog(@&quot;bArray 的指针：%p&quot;, bName);</span><br><span class=\"line\">NSLog(@&quot;aArray \b\u001d\b第一个元素的指针: %p，\b\b内容：%@&quot;, aArray[0], aArray[0]);</span><br><span class=\"line\">NSLog(@&quot;bArray 第一个元素的指针: %p，\b\b内容：%@&quot;, bArray[0], bArray[0]);</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aArray 的指针：0x60000025d9a0</span><br><span class=\"line\">bArray 的指针：0x60000002cf60</span><br><span class=\"line\">aArray \b\u001d\b第一个元素的指针: 0x60000025d880，\b\b内容：\bHello \b帕帕</span><br><span class=\"line\">bArray 第一个元素的指针: 0x60000025d880，\b\b内容：\bHello \b帕帕</span><br></pre></td></tr></table></figure>\n<p>从 aArray 到 bArray 的 copy 操作之后，它们的指针地址发生了变化，按照我们之前的理解这是<code>深拷贝</code>。<code>深拷贝</code>会把 aArray 的元素都拷贝一份，那为什么改变 bArray 的元素的值会导致 aArray 的元素的值也发生了变化呢？</p>\n<p><img src=\"https://i.imgur.com/svn3AbQ.png\" alt=\"集合对象的深拷贝\"></p>\n<h2 id=\"完全深复制\"><a href=\"#完全深复制\" class=\"headerlink\" title=\"完全深复制\"></a>完全深复制</h2><p>那我们要如何做到真正的深复制呢？我们可以简单的把上面的代码改一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableString * aString = [NSMutableString stringWithString:@&quot;\bHello&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">NSMutableArray * aArray = [NSMutableArray arrayWithObjects:aString, nil];</span><br><span class=\"line\"></span><br><span class=\"line\">// 只需要改动这一行代码</span><br><span class=\"line\">NSArray *bArray = [NSKeyedUnarchiver unarchiveObjectWithData:[NSKeyedArchiver archivedDataWithRootObject:aArray]];</span><br><span class=\"line\"></span><br><span class=\"line\">NSMutableString * bString = bArray[0];</span><br><span class=\"line\">[bString appendString:@&quot; \b帕帕&quot;];</span><br><span class=\"line\">    </span><br><span class=\"line\">NSLog(@&quot;aArray 的指针：%p&quot;, aName);</span><br><span class=\"line\">NSLog(@&quot;bArray 的指针：%p&quot;, bName);</span><br><span class=\"line\">NSLog(@&quot;aArray \b\u001d\b第一个元素的指针: %p，\b\b内容：%@&quot;, aArray[0], aArray[0]);</span><br><span class=\"line\">NSLog(@&quot;bArray 第一个元素的指针: %p，\b\b内容：%@&quot;, bArray[0], bArray[0]);</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aArray 的指针：0x600000259cb0</span><br><span class=\"line\">bArray 的指针：0x600000030ac0</span><br><span class=\"line\">aArray \b\u001d\b第一个元素的指针: 0x604000452120，\b\b内容：\bHello</span><br><span class=\"line\">bArray 第一个元素的指针: 0x604000452780，\b\b内容：\bHello \b帕帕</span><br></pre></td></tr></table></figure>\n<p>只要先对集合对象分别用 NSKeyedArchiver 和 NSKeyedUnarchiver 就可以真正完成对一个集合对象的深复制。</p>\n<h2 id=\"Copy-和-内存管理\"><a href=\"#Copy-和-内存管理\" class=\"headerlink\" title=\"Copy 和 内存管理\"></a>Copy 和 内存管理</h2><p>之前我们说过 Objective-C 里面对于 Copy 的实现还是跟 C 语言的有点差别，那差别在什么地方呢？<br>内存中做复制操作是很耗费资源的，而我们都知道 Objective-C 高效的一个原因在于它的内存管理机制是<code>引用计数</code>。我们前面分析的<code>深拷贝</code>是对内容的拷贝，这一点跟 C 语言的一样。C 语言的<code>浅拷贝</code>是指针的拷贝，它依旧做了一次复制操作。而在 Objective-C 中，<code>浅拷贝</code>其实只是引用计数的增加，不信的话，我们可以看看下面的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray * aArray = [NSArray arrayWithObjects:@&quot;帕帕&quot;, nil];</span><br><span class=\"line\">NSLog(@&quot;aArray 的指针：%p，\b\b引用计数：%ld&quot;, aArray, CFGetRetainCount((__bridge CFTypeRef)(aArray)));</span><br><span class=\"line\">NSArray * bArray = [aArray copy];</span><br><span class=\"line\">NSLog(@&quot;aArray 的指针：%p，\b\b引用计数：%ld&quot;, aArray, CFGetRetainCount((__bridge CFTypeRef)(aArray)));</span><br><span class=\"line\">NSMutableArray * cArray = [aArray mutableCopy];</span><br><span class=\"line\">NSLog(@&quot;aArray 的指针：%p，\b\b引用计数：%ld&quot;, aArray, CFGetRetainCount((__bridge CFTypeRef)(aArray)));</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aArray 的指针：0x604000443ba0，\b\b引用计数：2</span><br><span class=\"line\">aArray 的指针：0x604000443ba0，\b\b引用计数：3</span><br><span class=\"line\">aArray 的指针：0x604000443ba0，\b\b引用计数：3</span><br></pre></td></tr></table></figure>\n<p>为什么 aArray 刚出来的时候的引用计数是 2？因为 <code>[NSArray arrayWithObjects:@&quot;帕帕&quot;, nil]</code> 本身就是一个对象，它的引用计数就是 1；然后我们又定义了 aArray 来引用这个对象，此时它的引用计数就增加了 1，变成了 2；之后我们对 aArray 进行了 copy 操作，发现它的引用计数变成了 3，所以这里的 copy 操作其实相当于 retaion；最有我们对 aArray 进行了 mutableCopy 操作，此时它的引用计数还是 3，没有发生变化，因为这个时候进行了内容复制。</p>\n<p>所以在 Objective-C 中对一个 imutable 对象进行的 copy（浅复制）操作，其实都只会引起引用计数的变化，而不会在内存中做出任何拷贝操作，包括指针拷贝。</p>\n<h2 id=\"NSCopying-和-NSMutableCopying\"><a href=\"#NSCopying-和-NSMutableCopying\" class=\"headerlink\" title=\"NSCopying 和 NSMutableCopying\"></a>NSCopying 和 NSMutableCopying</h2><p>如果我们有一个自定义的对象，并且对其进行 copy 操作的话，会发生什么：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Person</span><br><span class=\"line\">@interface Person: NSObject</span><br><span class=\"line\">@property (nonatomic, copy) NSString * name;</span><br><span class=\"line\">@end</span><br><span class=\"line\">@implementation Person</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">Person * aPerson = [Person new];</span><br><span class=\"line\">Person * bPerson = [aPerson copy];</span><br></pre></td></tr></table></figure>\n<p>Xcode 直接奔溃了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 崩溃</span><br><span class=\"line\">*** Terminating app due to uncaught exception &apos;NSInvalidArgumentException&apos;, reason: &apos;-[Person copyWithZone:]: unrecognized selector sent to instance 0x60000000d5f0&apos;</span><br></pre></td></tr></table></figure>\n<p>为什么我们对一个 Person 对象使用了 copy，Xcode 确报的是找不到 <code>copyWithZone:</code> 这个 selector 的错误。</p>\n<p>这是因为 Objective-C 中规定，一个对象如果想要使用 copy 或 mutableCopy 的操作，必须要实现 <code>NSCopying</code> 或 <code>NSMutableCopying</code> 这两个协议。这两个协议规定了对象需要实现 <code>copyWithZone:</code> 或 <code>mutableCopyWithZone:</code> 这两个方法，因为对一个对象做 copy 或 mutableCopy 最后都会去调用这两个方法来做最终的实现。<br>上面例子中的集合对象能够使用 copy 和 mutableCopy 操作是也因为它们都实现了 NSCopying 和 NSMutableCopying 协议。</p>\n<p>我们来看看如何对一个普通的对象实现 NSCopying 协议：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface Person: NSObject &lt;NSCopying&gt;</span><br><span class=\"line\">@property (nonatomic, copy) NSString * name;</span><br><span class=\"line\">@property (nonatomic, strong) NSMutableArray * mArray;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation Person</span><br><span class=\"line\">- (instancetype)copyWithZone:(NSZone *)zone &#123;</span><br><span class=\"line\">    Person * person = [[self class] new];</span><br><span class=\"line\">    person.name = [self.name copy];</span><br><span class=\"line\">    person.mArray = [self.mArray mutableCopy];</span><br><span class=\"line\">    return person;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p>这样，我们就可以愉快的使用 <code>[Person copy]</code> 了。当然，这里 Person 的 mArray 也只是<code>单层深复制</code>，如果想要实现<code>完全深复制</code>的话，我们可以用 NSKeyedArchiver 和 NSKeyedUnarchiver 来完成对 mArray 的<code>完全深复制</code>。</p>\n<h2 id=\"Block-和-Copy\"><a href=\"#Block-和-Copy\" class=\"headerlink\" title=\"Block 和 Copy\"></a>Block 和 Copy</h2><p>简单说一下，在 Objective-C 中，Block 的 copy 是一种特殊的操作。因为 Block 是一种结构体，它无法实现 NSCopying 或 NSMutableCopying 协议，但是它却可以调用 copy 方法。这是由 Block 的结构体决定的：</p>\n<p><img src=\"http://www.devtalking.com/postImages/block-struct.jpg\" alt=\"\"></p>\n<p>Block 里面的 descriptor 有 copy 的函数指针，当对 Block 执行 copy 操作最后都会通过该函数指针进行真正的操作。这也是 Bloc看不需要实现 NSCopying 和 NSMutableCopying 就能调用 copy 方法的原因。</p>\n<p>参考资料：</p>\n<ol>\n<li><a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Collections/Articles/Copying.html\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Collections/Articles/Copying.html</a></li>\n<li><a href=\"https://www.zybuluo.com/MicroCai/note/50592\" target=\"_blank\" rel=\"noopener\">https://www.zybuluo.com/MicroCai/note/50592</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"浅拷贝（Shallow-copies）和深拷贝（Deep-copies）\"><a href=\"#浅拷贝（Shallow-copies）和深拷贝（Deep-copies）\" class=\"headerlink\" title=\"浅拷贝（Shallow copies）和深拷贝（Deep copies）\"></a>浅拷贝（Shallow copies）和深拷贝（Deep copies）</h2><p>我们都知道 Objective-C 中把 Copy 操作分成两种：<code>浅拷贝（Shallow copies）</code>和<code>深拷贝（Deep copies）</code>。学过 C 语言的同学应该知道区分这两种操作的区别其实很简单：</p>\n<blockquote>\n<p>浅拷贝（Shallow copies）: 指针拷贝，指向的还是同一块内容的地址<br>深拷贝（Deep copies）: 内容拷贝</p>\n</blockquote>\n<p>但是在 Objective-C 里面对于 Copy 的实现还是跟 C 语言的有点差别。我们先来看看 Apple 的官方文档给出的一张图：</p>\n<p><img src=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Collections/Art/CopyingCollections_2x.png\" alt=\"Collections Programming Topics\"></p>\n<p>通过上图可以看出<code>浅拷贝</code>过后，Array 1 和 Array 2 的元素都是相同的指针地址，指向相同的内容；<code>深拷贝</code>过后，内容被拷贝一份新的出来，Array 2 的元素的指针地址都和 Array 1 不一样，因为 Array2 的元素的指针地址都指向新的内容。</p>\n<h2 id=\"immutable-和-mutable-对象的拷贝\"><a href=\"#immutable-和-mutable-对象的拷贝\" class=\"headerlink\" title=\"immutable 和 mutable 对象的拷贝\"></a>immutable 和 mutable 对象的拷贝</h2><p>在 Objective-C 中一般会用 copy 或 mutableCopy 进行拷贝操作，我们可以通过观察指针变化来确定这两种拷贝操作是<code>浅复制</code>还是<code>深复制</code>。</p>\n<ul>\n<li><p>immutable 对象的复制操作</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSString * aName = @&quot;帕帕&quot;;</span><br><span class=\"line\">NSString * bName = [aName copy];</span><br><span class=\"line\">NSMutableString * cName = [aName mutableCopy];</span><br><span class=\"line\"></span><br><span class=\"line\">NSLog(@&quot;aName 的指针：%p&quot;, aName);</span><br><span class=\"line\">NSLog(@&quot;bName 的指针：%p&quot;, bName);</span><br><span class=\"line\">NSLog(@&quot;cName 的指针：%p&quot;, cName);</span><br></pre></td></tr></table></figure>\n<p>  输出的结果：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aName 的指针：0x103d34070</span><br><span class=\"line\">bName 的指针：0x103d34070</span><br><span class=\"line\">cName 的指针：0x600000250dd0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>mutable 对象的复制操作</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableString * aName = [NSMutableString stringWithString:@&quot;帕帕&quot;];</span><br><span class=\"line\">NSString * bName = [aName copy];</span><br><span class=\"line\">NSMutableString * cName = [aName mutableCopy];</span><br><span class=\"line\"></span><br><span class=\"line\">NSLog(@&quot;aName 的指针：%p&quot;, aName);</span><br><span class=\"line\">NSLog(@&quot;bName 的指针：%p&quot;, bName);</span><br><span class=\"line\">NSLog(@&quot;cName 的指针：%p&quot;, cName);</span><br></pre></td></tr></table></figure>\n<p>  输出的结果：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aName 的指针：0x60000025e150</span><br><span class=\"line\">bName 的指针：0x600000222900</span><br><span class=\"line\">cName 的指针：0x60000025e450</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>通过上面两个例子以及它们的输出结果，我们可以得出下面这个表格：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">imutable 对象</th>\n<th style=\"text-align:center\">mutable 对象</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">copy</td>\n<td style=\"text-align:center\">浅复制</td>\n<td style=\"text-align:center\">深复制</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mutableCopy</td>\n<td style=\"text-align:center\">深复制</td>\n<td style=\"text-align:center\">深复制</td>\n</tr>\n</tbody>\n</table>\n<p>上面的规则对集合对象也是一样的：NSArray 和 NSMutableArray，NSDictionary 和 NSMutableDictionary，NSSet 和 NSMutableSet</p>\n<h2 id=\"单层深复制（one-level-deep）\"><a href=\"#单层深复制（one-level-deep）\" class=\"headerlink\" title=\"单层深复制（one-level-deep）\"></a>单层深复制（one-level-deep）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableString * aString = [NSMutableString stringWithString:@&quot;\bHello&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">NSMutableArray * aArray = [NSMutableArray arrayWithObjects:aString, nil];</span><br><span class=\"line\">NSArray * bArray = [aArray copy];</span><br><span class=\"line\"></span><br><span class=\"line\">NSMutableString * bString = bArray[0];</span><br><span class=\"line\">[bString appendString:@&quot; \b帕帕&quot;];</span><br><span class=\"line\">    </span><br><span class=\"line\">NSLog(@&quot;aArray 的指针：%p&quot;, aName);</span><br><span class=\"line\">NSLog(@&quot;bArray 的指针：%p&quot;, bName);</span><br><span class=\"line\">NSLog(@&quot;aArray \b\u001d\b第一个元素的指针: %p，\b\b内容：%@&quot;, aArray[0], aArray[0]);</span><br><span class=\"line\">NSLog(@&quot;bArray 第一个元素的指针: %p，\b\b内容：%@&quot;, bArray[0], bArray[0]);</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aArray 的指针：0x60000025d9a0</span><br><span class=\"line\">bArray 的指针：0x60000002cf60</span><br><span class=\"line\">aArray \b\u001d\b第一个元素的指针: 0x60000025d880，\b\b内容：\bHello \b帕帕</span><br><span class=\"line\">bArray 第一个元素的指针: 0x60000025d880，\b\b内容：\bHello \b帕帕</span><br></pre></td></tr></table></figure>\n<p>从 aArray 到 bArray 的 copy 操作之后，它们的指针地址发生了变化，按照我们之前的理解这是<code>深拷贝</code>。<code>深拷贝</code>会把 aArray 的元素都拷贝一份，那为什么改变 bArray 的元素的值会导致 aArray 的元素的值也发生了变化呢？</p>\n<p><img src=\"https://i.imgur.com/svn3AbQ.png\" alt=\"集合对象的深拷贝\"></p>\n<h2 id=\"完全深复制\"><a href=\"#完全深复制\" class=\"headerlink\" title=\"完全深复制\"></a>完全深复制</h2><p>那我们要如何做到真正的深复制呢？我们可以简单的把上面的代码改一下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSMutableString * aString = [NSMutableString stringWithString:@&quot;\bHello&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">NSMutableArray * aArray = [NSMutableArray arrayWithObjects:aString, nil];</span><br><span class=\"line\"></span><br><span class=\"line\">// 只需要改动这一行代码</span><br><span class=\"line\">NSArray *bArray = [NSKeyedUnarchiver unarchiveObjectWithData:[NSKeyedArchiver archivedDataWithRootObject:aArray]];</span><br><span class=\"line\"></span><br><span class=\"line\">NSMutableString * bString = bArray[0];</span><br><span class=\"line\">[bString appendString:@&quot; \b帕帕&quot;];</span><br><span class=\"line\">    </span><br><span class=\"line\">NSLog(@&quot;aArray 的指针：%p&quot;, aName);</span><br><span class=\"line\">NSLog(@&quot;bArray 的指针：%p&quot;, bName);</span><br><span class=\"line\">NSLog(@&quot;aArray \b\u001d\b第一个元素的指针: %p，\b\b内容：%@&quot;, aArray[0], aArray[0]);</span><br><span class=\"line\">NSLog(@&quot;bArray 第一个元素的指针: %p，\b\b内容：%@&quot;, bArray[0], bArray[0]);</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aArray 的指针：0x600000259cb0</span><br><span class=\"line\">bArray 的指针：0x600000030ac0</span><br><span class=\"line\">aArray \b\u001d\b第一个元素的指针: 0x604000452120，\b\b内容：\bHello</span><br><span class=\"line\">bArray 第一个元素的指针: 0x604000452780，\b\b内容：\bHello \b帕帕</span><br></pre></td></tr></table></figure>\n<p>只要先对集合对象分别用 NSKeyedArchiver 和 NSKeyedUnarchiver 就可以真正完成对一个集合对象的深复制。</p>\n<h2 id=\"Copy-和-内存管理\"><a href=\"#Copy-和-内存管理\" class=\"headerlink\" title=\"Copy 和 内存管理\"></a>Copy 和 内存管理</h2><p>之前我们说过 Objective-C 里面对于 Copy 的实现还是跟 C 语言的有点差别，那差别在什么地方呢？<br>内存中做复制操作是很耗费资源的，而我们都知道 Objective-C 高效的一个原因在于它的内存管理机制是<code>引用计数</code>。我们前面分析的<code>深拷贝</code>是对内容的拷贝，这一点跟 C 语言的一样。C 语言的<code>浅拷贝</code>是指针的拷贝，它依旧做了一次复制操作。而在 Objective-C 中，<code>浅拷贝</code>其实只是引用计数的增加，不信的话，我们可以看看下面的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NSArray * aArray = [NSArray arrayWithObjects:@&quot;帕帕&quot;, nil];</span><br><span class=\"line\">NSLog(@&quot;aArray 的指针：%p，\b\b引用计数：%ld&quot;, aArray, CFGetRetainCount((__bridge CFTypeRef)(aArray)));</span><br><span class=\"line\">NSArray * bArray = [aArray copy];</span><br><span class=\"line\">NSLog(@&quot;aArray 的指针：%p，\b\b引用计数：%ld&quot;, aArray, CFGetRetainCount((__bridge CFTypeRef)(aArray)));</span><br><span class=\"line\">NSMutableArray * cArray = [aArray mutableCopy];</span><br><span class=\"line\">NSLog(@&quot;aArray 的指针：%p，\b\b引用计数：%ld&quot;, aArray, CFGetRetainCount((__bridge CFTypeRef)(aArray)));</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aArray 的指针：0x604000443ba0，\b\b引用计数：2</span><br><span class=\"line\">aArray 的指针：0x604000443ba0，\b\b引用计数：3</span><br><span class=\"line\">aArray 的指针：0x604000443ba0，\b\b引用计数：3</span><br></pre></td></tr></table></figure>\n<p>为什么 aArray 刚出来的时候的引用计数是 2？因为 <code>[NSArray arrayWithObjects:@&quot;帕帕&quot;, nil]</code> 本身就是一个对象，它的引用计数就是 1；然后我们又定义了 aArray 来引用这个对象，此时它的引用计数就增加了 1，变成了 2；之后我们对 aArray 进行了 copy 操作，发现它的引用计数变成了 3，所以这里的 copy 操作其实相当于 retaion；最有我们对 aArray 进行了 mutableCopy 操作，此时它的引用计数还是 3，没有发生变化，因为这个时候进行了内容复制。</p>\n<p>所以在 Objective-C 中对一个 imutable 对象进行的 copy（浅复制）操作，其实都只会引起引用计数的变化，而不会在内存中做出任何拷贝操作，包括指针拷贝。</p>\n<h2 id=\"NSCopying-和-NSMutableCopying\"><a href=\"#NSCopying-和-NSMutableCopying\" class=\"headerlink\" title=\"NSCopying 和 NSMutableCopying\"></a>NSCopying 和 NSMutableCopying</h2><p>如果我们有一个自定义的对象，并且对其进行 copy 操作的话，会发生什么：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Person</span><br><span class=\"line\">@interface Person: NSObject</span><br><span class=\"line\">@property (nonatomic, copy) NSString * name;</span><br><span class=\"line\">@end</span><br><span class=\"line\">@implementation Person</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">Person * aPerson = [Person new];</span><br><span class=\"line\">Person * bPerson = [aPerson copy];</span><br></pre></td></tr></table></figure>\n<p>Xcode 直接奔溃了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 崩溃</span><br><span class=\"line\">*** Terminating app due to uncaught exception &apos;NSInvalidArgumentException&apos;, reason: &apos;-[Person copyWithZone:]: unrecognized selector sent to instance 0x60000000d5f0&apos;</span><br></pre></td></tr></table></figure>\n<p>为什么我们对一个 Person 对象使用了 copy，Xcode 确报的是找不到 <code>copyWithZone:</code> 这个 selector 的错误。</p>\n<p>这是因为 Objective-C 中规定，一个对象如果想要使用 copy 或 mutableCopy 的操作，必须要实现 <code>NSCopying</code> 或 <code>NSMutableCopying</code> 这两个协议。这两个协议规定了对象需要实现 <code>copyWithZone:</code> 或 <code>mutableCopyWithZone:</code> 这两个方法，因为对一个对象做 copy 或 mutableCopy 最后都会去调用这两个方法来做最终的实现。<br>上面例子中的集合对象能够使用 copy 和 mutableCopy 操作是也因为它们都实现了 NSCopying 和 NSMutableCopying 协议。</p>\n<p>我们来看看如何对一个普通的对象实现 NSCopying 协议：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@interface Person: NSObject &lt;NSCopying&gt;</span><br><span class=\"line\">@property (nonatomic, copy) NSString * name;</span><br><span class=\"line\">@property (nonatomic, strong) NSMutableArray * mArray;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation Person</span><br><span class=\"line\">- (instancetype)copyWithZone:(NSZone *)zone &#123;</span><br><span class=\"line\">    Person * person = [[self class] new];</span><br><span class=\"line\">    person.name = [self.name copy];</span><br><span class=\"line\">    person.mArray = [self.mArray mutableCopy];</span><br><span class=\"line\">    return person;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p>这样，我们就可以愉快的使用 <code>[Person copy]</code> 了。当然，这里 Person 的 mArray 也只是<code>单层深复制</code>，如果想要实现<code>完全深复制</code>的话，我们可以用 NSKeyedArchiver 和 NSKeyedUnarchiver 来完成对 mArray 的<code>完全深复制</code>。</p>\n<h2 id=\"Block-和-Copy\"><a href=\"#Block-和-Copy\" class=\"headerlink\" title=\"Block 和 Copy\"></a>Block 和 Copy</h2><p>简单说一下，在 Objective-C 中，Block 的 copy 是一种特殊的操作。因为 Block 是一种结构体，它无法实现 NSCopying 或 NSMutableCopying 协议，但是它却可以调用 copy 方法。这是由 Block 的结构体决定的：</p>\n<p><img src=\"http://www.devtalking.com/postImages/block-struct.jpg\" alt=\"\"></p>\n<p>Block 里面的 descriptor 有 copy 的函数指针，当对 Block 执行 copy 操作最后都会通过该函数指针进行真正的操作。这也是 Bloc看不需要实现 NSCopying 和 NSMutableCopying 就能调用 copy 方法的原因。</p>\n<p>参考资料：</p>\n<ol>\n<li><a href=\"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Collections/Articles/Copying.html\" target=\"_blank\" rel=\"noopener\">https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Collections/Articles/Copying.html</a></li>\n<li><a href=\"https://www.zybuluo.com/MicroCai/note/50592\" target=\"_blank\" rel=\"noopener\">https://www.zybuluo.com/MicroCai/note/50592</a></li>\n</ol>\n"},{"title":"如何在 iOS 上自定义 React Native Component","author":"帕帕","date":"2018-03-19T17:22:09.000Z","thumbnail":"https://images.unsplash.com/photo-1508921234172-b68ed335b3e6?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=92e40b3819e4c173debf1500f27c9b60&auto=format&fit=crop&w=160&q=60","_content":"\n当我们要在 iOS 端实现一个 React Native 可用的 Component，比如：\n\n```ReactNative\n<MapView onRegionChange={(event) => {}} zoomLevel={2} />\n```\n\n那么我们基本上就是要解决下面这三个问题：\n\n* 如何把 iOS 上的 UI 暴露给 React Native 端？\n* 如何在 React Native 给 iOS 的 UI 传值？\n* 如何在 React Native 中响应 iOS 的事件？\n\n> 这三个问题可以在[官方文档](https://facebook.github.io/react-native/docs/native-components-ios.html)找到答案。\n    \n## 如何把 iOS 上的 UI 暴露给 React Native 端\n\n首先你需要创建一个继承自 `RCTViewManager` 的子类：\n\n```iOS\n// RNTMapManager.m\n#import <MapKit/MapKit.h>\n#import <React/RCTViewManager.h>\n\n// 继承 RCTViewManager\n@interface RNTMapManager : RCTViewManager\n@end\n\n\n@implementation RNTMapManager\n\n// 调用 RCT_EXPORT_MODULE 暴露该类的名字给 React Native 使用。如果你想自定义\n// 暴露给 React Native 的名字时，你需要 RCT_EXPORT_MODULE(YOUR_CUSTOM_NAME)。\nRCT_EXPORT_MODULE()\n\n// 由于 RCTViewManager 是 NSObject，所以这里必须需要实现该方法来告诉\n// React Native 去使用哪个 UIView\n- (UIView *)view\n{\n  return [MKMapView new];\n}\n\n@end\n```\n\n这样我们就可以在 React Native 使用 MapView 了：\n\n```ReactNative\n// MapView.js\n\nimport { requireNativeComponent } from 'react-native';\n\n// requireNativeComponent 会自动把 iOS 上的 RNTMapManager 解析成 RNTMap。\n// 如果去掉 iOS 上的 Manager 后缀会有什么影响？嗯，没有任何影响。\nmodule.exports = requireNativeComponent('RNTMap', null);\n\n\n// MyApp.js\nimport MapView from './MapView.js';\n\n...\n\nrender() {\n  return <MapView />;\n}\n```\n\n## 如何在 React Native 给 iOS 的 UI 传值\n\n如果需要传值给 iOS 上的 UI，那么需要使用另外一个宏：\n\n```iOS\nRCT_EXPORT_VIEW_PROPERTY(zoomEnabled, BOOL)\n```\n\n这时候就可以在 React Native 上使用了：\n\n```ReactNative\n<MapView zoomEnable={true} />\n```\n\n这里需要注意的是，`RCT_EXPORT_VIEW_PROPERTY` 所暴露的属性必须是之前我们说的 UIView（即继承于 `RCTViewManager` 并通过 `- (UIView *)view;` 返回的 View）已经存在的属性。\n\n除了上面的宏 `RCT_EXPORT_VIEW_PROPERTY` 可以暴露属性给 React Native 使用之外还有下面 5 种（这里先挖个坑，回头研究一下再说说下面五种的作用和区别）：\n\n* RCT_REMAP_VIEW_PROPERTY\n* RCT_CUSTOM_VIEW_PROPERTY\n* RCT_EXPORT_SHADOW_PROPERTY\n* RCT_REMAP_SHADOW_PROPERTY\n* RCT_CUSTOM_SHADOW_PROPERTY\n\n## 如何在 React Native 中响应 iOS 的事件\n\n要想在 React Native 中响应 iOS 的事件，只需要暴露用 `RCTBubblingEventBlock` 或 `RCTDirectEventBlock` 定义的属性即可，代码如下：\n\n```iOS\n// RNTMapView.h\n#import <MapKit/MapKit.h>\n#import <React/RCTComponent.h>\n\n// 由于 MKMapView 没有任何 `RCTBubblingEventBlock` 或 `RCTDirectEventBlock` 所定义的\n// 属性，所以这里需要定义 MKMapView 的子类 RNTMapView\n@interface RNTMapView: MKMapView\n\n// 需要暴露给 React Native 的事件属性\n@property (nonatomic, copy) RCTBubblingEventBlock onRegionChange;\n\n@end\n\n\n// RNTMapView.m\n#import \"RNTMapView.h\"\n\n@implementation RNTMapView\n\n@end\n```\n\n然后我们需要在 `RCTViewManager` 中暴露 `onRegionChange` 给 React Native 使用：\n\n```iOS\n// RNTMapManager.m\n#import <MapKit/MapKit.h>\n#import <React/RCTViewManager.h>\n\n#import \"RNTMapView.h\"\n\n@interface RNTMapManager : RCTViewManager <MKMapViewDelegate>\n@end\n\n@implementation RNTMapManager\n\nRCT_EXPORT_MODULE()\n// 暴露 RNTMapView 中的 `onRegionChange` 属性\nRCT_EXPORT_VIEW_PROPERTY(onRegionChange, RCTBubblingEventBlock)\n\n- (UIView *)view {\n    // 这里需要返回 RNTMapView 而不是 MKMapView\n    return [RNTMapView new];\n}\n\n@end\n```\n\n> 重要的事说三遍：\n> 使用 `RCTBubblingEventBlock` 或 `RCTDirectEventBlock` 所定义的事件都必须加上前缀 `on`，否则 React Native 无法接收到事件\n> 使用 `RCTBubblingEventBlock` 或 `RCTDirectEventBlock` 所定义的事件都必须加上前缀 `on`，否则 React Native 无法接收到事件\n> 使用 `RCTBubblingEventBlock` 或 `RCTDirectEventBlock` 所定义的事件都必须加上前缀 `on`，否则 React Native 无法接收到事件\n\n\n","source":"_posts/如何在-iOS-上自定义-React-Native-Component.md","raw":"---\ntitle: 如何在 iOS 上自定义 React Native Component\nauthor: 帕帕\ndate: 2018-03-19 17:22:09\ncategories: 技术\ntags: [iOS, RN]\nthumbnail: https://images.unsplash.com/photo-1508921234172-b68ed335b3e6?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=92e40b3819e4c173debf1500f27c9b60&auto=format&fit=crop&w=160&q=60\n---\n\n当我们要在 iOS 端实现一个 React Native 可用的 Component，比如：\n\n```ReactNative\n<MapView onRegionChange={(event) => {}} zoomLevel={2} />\n```\n\n那么我们基本上就是要解决下面这三个问题：\n\n* 如何把 iOS 上的 UI 暴露给 React Native 端？\n* 如何在 React Native 给 iOS 的 UI 传值？\n* 如何在 React Native 中响应 iOS 的事件？\n\n> 这三个问题可以在[官方文档](https://facebook.github.io/react-native/docs/native-components-ios.html)找到答案。\n    \n## 如何把 iOS 上的 UI 暴露给 React Native 端\n\n首先你需要创建一个继承自 `RCTViewManager` 的子类：\n\n```iOS\n// RNTMapManager.m\n#import <MapKit/MapKit.h>\n#import <React/RCTViewManager.h>\n\n// 继承 RCTViewManager\n@interface RNTMapManager : RCTViewManager\n@end\n\n\n@implementation RNTMapManager\n\n// 调用 RCT_EXPORT_MODULE 暴露该类的名字给 React Native 使用。如果你想自定义\n// 暴露给 React Native 的名字时，你需要 RCT_EXPORT_MODULE(YOUR_CUSTOM_NAME)。\nRCT_EXPORT_MODULE()\n\n// 由于 RCTViewManager 是 NSObject，所以这里必须需要实现该方法来告诉\n// React Native 去使用哪个 UIView\n- (UIView *)view\n{\n  return [MKMapView new];\n}\n\n@end\n```\n\n这样我们就可以在 React Native 使用 MapView 了：\n\n```ReactNative\n// MapView.js\n\nimport { requireNativeComponent } from 'react-native';\n\n// requireNativeComponent 会自动把 iOS 上的 RNTMapManager 解析成 RNTMap。\n// 如果去掉 iOS 上的 Manager 后缀会有什么影响？嗯，没有任何影响。\nmodule.exports = requireNativeComponent('RNTMap', null);\n\n\n// MyApp.js\nimport MapView from './MapView.js';\n\n...\n\nrender() {\n  return <MapView />;\n}\n```\n\n## 如何在 React Native 给 iOS 的 UI 传值\n\n如果需要传值给 iOS 上的 UI，那么需要使用另外一个宏：\n\n```iOS\nRCT_EXPORT_VIEW_PROPERTY(zoomEnabled, BOOL)\n```\n\n这时候就可以在 React Native 上使用了：\n\n```ReactNative\n<MapView zoomEnable={true} />\n```\n\n这里需要注意的是，`RCT_EXPORT_VIEW_PROPERTY` 所暴露的属性必须是之前我们说的 UIView（即继承于 `RCTViewManager` 并通过 `- (UIView *)view;` 返回的 View）已经存在的属性。\n\n除了上面的宏 `RCT_EXPORT_VIEW_PROPERTY` 可以暴露属性给 React Native 使用之外还有下面 5 种（这里先挖个坑，回头研究一下再说说下面五种的作用和区别）：\n\n* RCT_REMAP_VIEW_PROPERTY\n* RCT_CUSTOM_VIEW_PROPERTY\n* RCT_EXPORT_SHADOW_PROPERTY\n* RCT_REMAP_SHADOW_PROPERTY\n* RCT_CUSTOM_SHADOW_PROPERTY\n\n## 如何在 React Native 中响应 iOS 的事件\n\n要想在 React Native 中响应 iOS 的事件，只需要暴露用 `RCTBubblingEventBlock` 或 `RCTDirectEventBlock` 定义的属性即可，代码如下：\n\n```iOS\n// RNTMapView.h\n#import <MapKit/MapKit.h>\n#import <React/RCTComponent.h>\n\n// 由于 MKMapView 没有任何 `RCTBubblingEventBlock` 或 `RCTDirectEventBlock` 所定义的\n// 属性，所以这里需要定义 MKMapView 的子类 RNTMapView\n@interface RNTMapView: MKMapView\n\n// 需要暴露给 React Native 的事件属性\n@property (nonatomic, copy) RCTBubblingEventBlock onRegionChange;\n\n@end\n\n\n// RNTMapView.m\n#import \"RNTMapView.h\"\n\n@implementation RNTMapView\n\n@end\n```\n\n然后我们需要在 `RCTViewManager` 中暴露 `onRegionChange` 给 React Native 使用：\n\n```iOS\n// RNTMapManager.m\n#import <MapKit/MapKit.h>\n#import <React/RCTViewManager.h>\n\n#import \"RNTMapView.h\"\n\n@interface RNTMapManager : RCTViewManager <MKMapViewDelegate>\n@end\n\n@implementation RNTMapManager\n\nRCT_EXPORT_MODULE()\n// 暴露 RNTMapView 中的 `onRegionChange` 属性\nRCT_EXPORT_VIEW_PROPERTY(onRegionChange, RCTBubblingEventBlock)\n\n- (UIView *)view {\n    // 这里需要返回 RNTMapView 而不是 MKMapView\n    return [RNTMapView new];\n}\n\n@end\n```\n\n> 重要的事说三遍：\n> 使用 `RCTBubblingEventBlock` 或 `RCTDirectEventBlock` 所定义的事件都必须加上前缀 `on`，否则 React Native 无法接收到事件\n> 使用 `RCTBubblingEventBlock` 或 `RCTDirectEventBlock` 所定义的事件都必须加上前缀 `on`，否则 React Native 无法接收到事件\n> 使用 `RCTBubblingEventBlock` 或 `RCTDirectEventBlock` 所定义的事件都必须加上前缀 `on`，否则 React Native 无法接收到事件\n\n\n","slug":"如何在-iOS-上自定义-React-Native-Component","published":1,"updated":"2018-03-23T08:36:38.931Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo44p6vv001aarvbt9w9n2xf","content":"<p>当我们要在 iOS 端实现一个 React Native 可用的 Component，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;MapView onRegionChange=&#123;(event) =&gt; &#123;&#125;&#125; zoomLevel=&#123;2&#125; /&gt;</span><br></pre></td></tr></table></figure>\n<p>那么我们基本上就是要解决下面这三个问题：</p>\n<ul>\n<li>如何把 iOS 上的 UI 暴露给 React Native 端？</li>\n<li>如何在 React Native 给 iOS 的 UI 传值？</li>\n<li>如何在 React Native 中响应 iOS 的事件？</li>\n</ul>\n<blockquote>\n<p>这三个问题可以在<a href=\"https://facebook.github.io/react-native/docs/native-components-ios.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>找到答案。</p>\n</blockquote>\n<h2 id=\"如何把-iOS-上的-UI-暴露给-React-Native-端\"><a href=\"#如何把-iOS-上的-UI-暴露给-React-Native-端\" class=\"headerlink\" title=\"如何把 iOS 上的 UI 暴露给 React Native 端\"></a>如何把 iOS 上的 UI 暴露给 React Native 端</h2><p>首先你需要创建一个继承自 <code>RCTViewManager</code> 的子类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// RNTMapManager.m</span><br><span class=\"line\">#import &lt;MapKit/MapKit.h&gt;</span><br><span class=\"line\">#import &lt;React/RCTViewManager.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 继承 RCTViewManager</span><br><span class=\"line\">@interface RNTMapManager : RCTViewManager</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@implementation RNTMapManager</span><br><span class=\"line\"></span><br><span class=\"line\">// 调用 RCT_EXPORT_MODULE 暴露该类的名字给 React Native 使用。如果你想自定义</span><br><span class=\"line\">// 暴露给 React Native 的名字时，你需要 RCT_EXPORT_MODULE(YOUR_CUSTOM_NAME)。</span><br><span class=\"line\">RCT_EXPORT_MODULE()</span><br><span class=\"line\"></span><br><span class=\"line\">// 由于 RCTViewManager 是 NSObject，所以这里必须需要实现该方法来告诉</span><br><span class=\"line\">// React Native 去使用哪个 UIView</span><br><span class=\"line\">- (UIView *)view</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  return [MKMapView new];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p>这样我们就可以在 React Native 使用 MapView 了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// MapView.js</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; requireNativeComponent &#125; from &apos;react-native&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// requireNativeComponent 会自动把 iOS 上的 RNTMapManager 解析成 RNTMap。</span><br><span class=\"line\">// 如果去掉 iOS 上的 Manager 后缀会有什么影响？嗯，没有任何影响。</span><br><span class=\"line\">module.exports = requireNativeComponent(&apos;RNTMap&apos;, null);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// MyApp.js</span><br><span class=\"line\">import MapView from &apos;./MapView.js&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">  return &lt;MapView /&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何在-React-Native-给-iOS-的-UI-传值\"><a href=\"#如何在-React-Native-给-iOS-的-UI-传值\" class=\"headerlink\" title=\"如何在 React Native 给 iOS 的 UI 传值\"></a>如何在 React Native 给 iOS 的 UI 传值</h2><p>如果需要传值给 iOS 上的 UI，那么需要使用另外一个宏：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RCT_EXPORT_VIEW_PROPERTY(zoomEnabled, BOOL)</span><br></pre></td></tr></table></figure>\n<p>这时候就可以在 React Native 上使用了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;MapView zoomEnable=&#123;true&#125; /&gt;</span><br></pre></td></tr></table></figure>\n<p>这里需要注意的是，<code>RCT_EXPORT_VIEW_PROPERTY</code> 所暴露的属性必须是之前我们说的 UIView（即继承于 <code>RCTViewManager</code> 并通过 <code>- (UIView *)view;</code> 返回的 View）已经存在的属性。</p>\n<p>除了上面的宏 <code>RCT_EXPORT_VIEW_PROPERTY</code> 可以暴露属性给 React Native 使用之外还有下面 5 种（这里先挖个坑，回头研究一下再说说下面五种的作用和区别）：</p>\n<ul>\n<li>RCT_REMAP_VIEW_PROPERTY</li>\n<li>RCT_CUSTOM_VIEW_PROPERTY</li>\n<li>RCT_EXPORT_SHADOW_PROPERTY</li>\n<li>RCT_REMAP_SHADOW_PROPERTY</li>\n<li>RCT_CUSTOM_SHADOW_PROPERTY</li>\n</ul>\n<h2 id=\"如何在-React-Native-中响应-iOS-的事件\"><a href=\"#如何在-React-Native-中响应-iOS-的事件\" class=\"headerlink\" title=\"如何在 React Native 中响应 iOS 的事件\"></a>如何在 React Native 中响应 iOS 的事件</h2><p>要想在 React Native 中响应 iOS 的事件，只需要暴露用 <code>RCTBubblingEventBlock</code> 或 <code>RCTDirectEventBlock</code> 定义的属性即可，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// RNTMapView.h</span><br><span class=\"line\">#import &lt;MapKit/MapKit.h&gt;</span><br><span class=\"line\">#import &lt;React/RCTComponent.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 由于 MKMapView 没有任何 `RCTBubblingEventBlock` 或 `RCTDirectEventBlock` 所定义的</span><br><span class=\"line\">// 属性，所以这里需要定义 MKMapView 的子类 RNTMapView</span><br><span class=\"line\">@interface RNTMapView: MKMapView</span><br><span class=\"line\"></span><br><span class=\"line\">// 需要暴露给 React Native 的事件属性</span><br><span class=\"line\">@property (nonatomic, copy) RCTBubblingEventBlock onRegionChange;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// RNTMapView.m</span><br><span class=\"line\">#import &quot;RNTMapView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation RNTMapView</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p>然后我们需要在 <code>RCTViewManager</code> 中暴露 <code>onRegionChange</code> 给 React Native 使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// RNTMapManager.m</span><br><span class=\"line\">#import &lt;MapKit/MapKit.h&gt;</span><br><span class=\"line\">#import &lt;React/RCTViewManager.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;RNTMapView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface RNTMapManager : RCTViewManager &lt;MKMapViewDelegate&gt;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation RNTMapManager</span><br><span class=\"line\"></span><br><span class=\"line\">RCT_EXPORT_MODULE()</span><br><span class=\"line\">// 暴露 RNTMapView 中的 `onRegionChange` 属性</span><br><span class=\"line\">RCT_EXPORT_VIEW_PROPERTY(onRegionChange, RCTBubblingEventBlock)</span><br><span class=\"line\"></span><br><span class=\"line\">- (UIView *)view &#123;</span><br><span class=\"line\">    // 这里需要返回 RNTMapView 而不是 MKMapView</span><br><span class=\"line\">    return [RNTMapView new];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>重要的事说三遍：<br>使用 <code>RCTBubblingEventBlock</code> 或 <code>RCTDirectEventBlock</code> 所定义的事件都必须加上前缀 <code>on</code>，否则 React Native 无法接收到事件<br>使用 <code>RCTBubblingEventBlock</code> 或 <code>RCTDirectEventBlock</code> 所定义的事件都必须加上前缀 <code>on</code>，否则 React Native 无法接收到事件<br>使用 <code>RCTBubblingEventBlock</code> 或 <code>RCTDirectEventBlock</code> 所定义的事件都必须加上前缀 <code>on</code>，否则 React Native 无法接收到事件</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>当我们要在 iOS 端实现一个 React Native 可用的 Component，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;MapView onRegionChange=&#123;(event) =&gt; &#123;&#125;&#125; zoomLevel=&#123;2&#125; /&gt;</span><br></pre></td></tr></table></figure>\n<p>那么我们基本上就是要解决下面这三个问题：</p>\n<ul>\n<li>如何把 iOS 上的 UI 暴露给 React Native 端？</li>\n<li>如何在 React Native 给 iOS 的 UI 传值？</li>\n<li>如何在 React Native 中响应 iOS 的事件？</li>\n</ul>\n<blockquote>\n<p>这三个问题可以在<a href=\"https://facebook.github.io/react-native/docs/native-components-ios.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>找到答案。</p>\n</blockquote>\n<h2 id=\"如何把-iOS-上的-UI-暴露给-React-Native-端\"><a href=\"#如何把-iOS-上的-UI-暴露给-React-Native-端\" class=\"headerlink\" title=\"如何把 iOS 上的 UI 暴露给 React Native 端\"></a>如何把 iOS 上的 UI 暴露给 React Native 端</h2><p>首先你需要创建一个继承自 <code>RCTViewManager</code> 的子类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// RNTMapManager.m</span><br><span class=\"line\">#import &lt;MapKit/MapKit.h&gt;</span><br><span class=\"line\">#import &lt;React/RCTViewManager.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 继承 RCTViewManager</span><br><span class=\"line\">@interface RNTMapManager : RCTViewManager</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@implementation RNTMapManager</span><br><span class=\"line\"></span><br><span class=\"line\">// 调用 RCT_EXPORT_MODULE 暴露该类的名字给 React Native 使用。如果你想自定义</span><br><span class=\"line\">// 暴露给 React Native 的名字时，你需要 RCT_EXPORT_MODULE(YOUR_CUSTOM_NAME)。</span><br><span class=\"line\">RCT_EXPORT_MODULE()</span><br><span class=\"line\"></span><br><span class=\"line\">// 由于 RCTViewManager 是 NSObject，所以这里必须需要实现该方法来告诉</span><br><span class=\"line\">// React Native 去使用哪个 UIView</span><br><span class=\"line\">- (UIView *)view</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  return [MKMapView new];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p>这样我们就可以在 React Native 使用 MapView 了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// MapView.js</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; requireNativeComponent &#125; from &apos;react-native&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// requireNativeComponent 会自动把 iOS 上的 RNTMapManager 解析成 RNTMap。</span><br><span class=\"line\">// 如果去掉 iOS 上的 Manager 后缀会有什么影响？嗯，没有任何影响。</span><br><span class=\"line\">module.exports = requireNativeComponent(&apos;RNTMap&apos;, null);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// MyApp.js</span><br><span class=\"line\">import MapView from &apos;./MapView.js&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">  return &lt;MapView /&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何在-React-Native-给-iOS-的-UI-传值\"><a href=\"#如何在-React-Native-给-iOS-的-UI-传值\" class=\"headerlink\" title=\"如何在 React Native 给 iOS 的 UI 传值\"></a>如何在 React Native 给 iOS 的 UI 传值</h2><p>如果需要传值给 iOS 上的 UI，那么需要使用另外一个宏：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RCT_EXPORT_VIEW_PROPERTY(zoomEnabled, BOOL)</span><br></pre></td></tr></table></figure>\n<p>这时候就可以在 React Native 上使用了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;MapView zoomEnable=&#123;true&#125; /&gt;</span><br></pre></td></tr></table></figure>\n<p>这里需要注意的是，<code>RCT_EXPORT_VIEW_PROPERTY</code> 所暴露的属性必须是之前我们说的 UIView（即继承于 <code>RCTViewManager</code> 并通过 <code>- (UIView *)view;</code> 返回的 View）已经存在的属性。</p>\n<p>除了上面的宏 <code>RCT_EXPORT_VIEW_PROPERTY</code> 可以暴露属性给 React Native 使用之外还有下面 5 种（这里先挖个坑，回头研究一下再说说下面五种的作用和区别）：</p>\n<ul>\n<li>RCT_REMAP_VIEW_PROPERTY</li>\n<li>RCT_CUSTOM_VIEW_PROPERTY</li>\n<li>RCT_EXPORT_SHADOW_PROPERTY</li>\n<li>RCT_REMAP_SHADOW_PROPERTY</li>\n<li>RCT_CUSTOM_SHADOW_PROPERTY</li>\n</ul>\n<h2 id=\"如何在-React-Native-中响应-iOS-的事件\"><a href=\"#如何在-React-Native-中响应-iOS-的事件\" class=\"headerlink\" title=\"如何在 React Native 中响应 iOS 的事件\"></a>如何在 React Native 中响应 iOS 的事件</h2><p>要想在 React Native 中响应 iOS 的事件，只需要暴露用 <code>RCTBubblingEventBlock</code> 或 <code>RCTDirectEventBlock</code> 定义的属性即可，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// RNTMapView.h</span><br><span class=\"line\">#import &lt;MapKit/MapKit.h&gt;</span><br><span class=\"line\">#import &lt;React/RCTComponent.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 由于 MKMapView 没有任何 `RCTBubblingEventBlock` 或 `RCTDirectEventBlock` 所定义的</span><br><span class=\"line\">// 属性，所以这里需要定义 MKMapView 的子类 RNTMapView</span><br><span class=\"line\">@interface RNTMapView: MKMapView</span><br><span class=\"line\"></span><br><span class=\"line\">// 需要暴露给 React Native 的事件属性</span><br><span class=\"line\">@property (nonatomic, copy) RCTBubblingEventBlock onRegionChange;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// RNTMapView.m</span><br><span class=\"line\">#import &quot;RNTMapView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation RNTMapView</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<p>然后我们需要在 <code>RCTViewManager</code> 中暴露 <code>onRegionChange</code> 给 React Native 使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// RNTMapManager.m</span><br><span class=\"line\">#import &lt;MapKit/MapKit.h&gt;</span><br><span class=\"line\">#import &lt;React/RCTViewManager.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#import &quot;RNTMapView.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">@interface RNTMapManager : RCTViewManager &lt;MKMapViewDelegate&gt;</span><br><span class=\"line\">@end</span><br><span class=\"line\"></span><br><span class=\"line\">@implementation RNTMapManager</span><br><span class=\"line\"></span><br><span class=\"line\">RCT_EXPORT_MODULE()</span><br><span class=\"line\">// 暴露 RNTMapView 中的 `onRegionChange` 属性</span><br><span class=\"line\">RCT_EXPORT_VIEW_PROPERTY(onRegionChange, RCTBubblingEventBlock)</span><br><span class=\"line\"></span><br><span class=\"line\">- (UIView *)view &#123;</span><br><span class=\"line\">    // 这里需要返回 RNTMapView 而不是 MKMapView</span><br><span class=\"line\">    return [RNTMapView new];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@end</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>重要的事说三遍：<br>使用 <code>RCTBubblingEventBlock</code> 或 <code>RCTDirectEventBlock</code> 所定义的事件都必须加上前缀 <code>on</code>，否则 React Native 无法接收到事件<br>使用 <code>RCTBubblingEventBlock</code> 或 <code>RCTDirectEventBlock</code> 所定义的事件都必须加上前缀 <code>on</code>，否则 React Native 无法接收到事件<br>使用 <code>RCTBubblingEventBlock</code> 或 <code>RCTDirectEventBlock</code> 所定义的事件都必须加上前缀 <code>on</code>，否则 React Native 无法接收到事件</p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjo44p6uq0000arvbax3fr8tr","category_id":"cjo44p6uz0004arvbcctlq09b","_id":"cjo44p6vb000farvbsoo08zl2"},{"post_id":"cjo44p6v7000darvbdjv406hi","category_id":"cjo44p6v6000aarvb60p7pth6","_id":"cjo44p6vh000larvb71n718gm"},{"post_id":"cjo44p6uw0002arvbcmlngzmg","category_id":"cjo44p6v6000aarvb60p7pth6","_id":"cjo44p6vk000parvb24hrssfg"},{"post_id":"cjo44p6v9000earvb5exys7qs","category_id":"cjo44p6v6000aarvb60p7pth6","_id":"cjo44p6vl000rarvb33foqfq1"},{"post_id":"cjo44p6vd000iarvbtcsntbqi","category_id":"cjo44p6v6000aarvb60p7pth6","_id":"cjo44p6vn000varvballv6ao0"},{"post_id":"cjo44p6v10006arvbq2oudifn","category_id":"cjo44p6v6000aarvb60p7pth6","_id":"cjo44p6vp000yarvbuj16enfo"},{"post_id":"cjo44p6vg000karvbcv45ll5q","category_id":"cjo44p6v6000aarvb60p7pth6","_id":"cjo44p6vr0012arvbva4hrdr9"},{"post_id":"cjo44p6vj000oarvbfaa761le","category_id":"cjo44p6v6000aarvb60p7pth6","_id":"cjo44p6vt0015arvboyrcwdob"},{"post_id":"cjo44p6v30008arvb396b85ob","category_id":"cjo44p6v6000aarvb60p7pth6","_id":"cjo44p6vu0017arvb7pxj5lrc"},{"post_id":"cjo44p6vk000qarvbha07iv4y","category_id":"cjo44p6v6000aarvb60p7pth6","_id":"cjo44p6vw001barvbmfdtxo9t"},{"post_id":"cjo44p6vm000uarvb42s57rkc","category_id":"cjo44p6v6000aarvb60p7pth6","_id":"cjo44p6vx001darvb6qmr9f9j"},{"post_id":"cjo44p6v50009arvbafwe58ho","category_id":"cjo44p6v6000aarvb60p7pth6","_id":"cjo44p6vy001garvbbpe1p4mf"},{"post_id":"cjo44p6vo000xarvb819pqrl7","category_id":"cjo44p6v6000aarvb60p7pth6","_id":"cjo44p6vy001harvbm1xifli3"},{"post_id":"cjo44p6vq0011arvb1gy9gm84","category_id":"cjo44p6v6000aarvb60p7pth6","_id":"cjo44p6vz001jarvbw4q7lc4r"},{"post_id":"cjo44p6vs0014arvbhqy3hfam","category_id":"cjo44p6v6000aarvb60p7pth6","_id":"cjo44p6vz001larvbi6wuvuim"},{"post_id":"cjo44p6vt0016arvbb2wdh1iy","category_id":"cjo44p6v6000aarvb60p7pth6","_id":"cjo44p6w0001narvb67dz313h"},{"post_id":"cjo44p6vv001aarvbt9w9n2xf","category_id":"cjo44p6v6000aarvb60p7pth6","_id":"cjo44p6w0001oarvbeggzkxow"}],"PostTag":[{"post_id":"cjo44p6uq0000arvbax3fr8tr","tag_id":"cjo44p6v00005arvb2cl9v0ha","_id":"cjo44p6v7000carvbux43ceid"},{"post_id":"cjo44p6uw0002arvbcmlngzmg","tag_id":"cjo44p6v6000barvbfqv4df66","_id":"cjo44p6vf000jarvb4dyhbghj"},{"post_id":"cjo44p6v10006arvbq2oudifn","tag_id":"cjo44p6vb000harvbaiu5spo0","_id":"cjo44p6vo000warvbu0ypl48q"},{"post_id":"cjo44p6v10006arvbq2oudifn","tag_id":"cjo44p6vi000narvb36jhesl1","_id":"cjo44p6vp000zarvbh8lco4qb"},{"post_id":"cjo44p6vk000qarvbha07iv4y","tag_id":"cjo44p6vb000harvbaiu5spo0","_id":"cjo44p6vr0013arvb1voph7cs"},{"post_id":"cjo44p6v30008arvb396b85ob","tag_id":"cjo44p6vb000harvbaiu5spo0","_id":"cjo44p6vv0019arvbtcnba9n6"},{"post_id":"cjo44p6v30008arvb396b85ob","tag_id":"cjo44p6vq0010arvby5jcnoye","_id":"cjo44p6vx001carvbjjurnyxy"},{"post_id":"cjo44p6v50009arvbafwe58ho","tag_id":"cjo44p6vb000harvbaiu5spo0","_id":"cjo44p6vy001farvbf23l342m"},{"post_id":"cjo44p6v7000darvbdjv406hi","tag_id":"cjo44p6vx001earvbn9btdex1","_id":"cjo44p6vz001karvbm7mhi2f1"},{"post_id":"cjo44p6v9000earvb5exys7qs","tag_id":"cjo44p6vb000harvbaiu5spo0","_id":"cjo44p6w0001qarvbdj9psxnp"},{"post_id":"cjo44p6v9000earvb5exys7qs","tag_id":"cjo44p6vi000narvb36jhesl1","_id":"cjo44p6w1001rarvbffvam8uo"},{"post_id":"cjo44p6vd000iarvbtcsntbqi","tag_id":"cjo44p6vb000harvbaiu5spo0","_id":"cjo44p6w1001tarvbpa8o8vve"},{"post_id":"cjo44p6vd000iarvbtcsntbqi","tag_id":"cjo44p6vi000narvb36jhesl1","_id":"cjo44p6w2001uarvbmj4zvurf"},{"post_id":"cjo44p6vg000karvbcv45ll5q","tag_id":"cjo44p6vb000harvbaiu5spo0","_id":"cjo44p6w2001warvbv3hv2zc8"},{"post_id":"cjo44p6vg000karvbcv45ll5q","tag_id":"cjo44p6vi000narvb36jhesl1","_id":"cjo44p6w3001xarvbs7zqgqdi"},{"post_id":"cjo44p6vj000oarvbfaa761le","tag_id":"cjo44p6vx001earvbn9btdex1","_id":"cjo44p6w3001zarvb09kef0qm"},{"post_id":"cjo44p6vm000uarvb42s57rkc","tag_id":"cjo44p6w3001yarvbd0ok6xsv","_id":"cjo44p6w40022arvbw52ak5yc"},{"post_id":"cjo44p6vm000uarvb42s57rkc","tag_id":"cjo44p6w30020arvbmmmkpfs7","_id":"cjo44p6w40023arvbp7eil38c"},{"post_id":"cjo44p6vo000xarvb819pqrl7","tag_id":"cjo44p6vb000harvbaiu5spo0","_id":"cjo44p6w50026arvbuxx6xir5"},{"post_id":"cjo44p6vo000xarvb819pqrl7","tag_id":"cjo44p6w30021arvbv3zk9iba","_id":"cjo44p6w50027arvbs91evxnq"},{"post_id":"cjo44p6vo000xarvb819pqrl7","tag_id":"cjo44p6w40024arvbrpqe78lc","_id":"cjo44p6w50029arvbnz0lzwo7"},{"post_id":"cjo44p6vq0011arvb1gy9gm84","tag_id":"cjo44p6vb000harvbaiu5spo0","_id":"cjo44p6w6002aarvboic4vs9e"},{"post_id":"cjo44p6vq0011arvb1gy9gm84","tag_id":"cjo44p6w40025arvbwz4ew5vr","_id":"cjo44p6w6002carvbckq30owe"},{"post_id":"cjo44p6vs0014arvbhqy3hfam","tag_id":"cjo44p6vb000harvbaiu5spo0","_id":"cjo44p6w7002earvbl4k2esy4"},{"post_id":"cjo44p6vs0014arvbhqy3hfam","tag_id":"cjo44p6w30021arvbv3zk9iba","_id":"cjo44p6w7002farvb2je7mtl7"},{"post_id":"cjo44p6vs0014arvbhqy3hfam","tag_id":"cjo44p6w40025arvbwz4ew5vr","_id":"cjo44p6w8002harvbj2wwszff"},{"post_id":"cjo44p6vt0016arvbb2wdh1iy","tag_id":"cjo44p6vb000harvbaiu5spo0","_id":"cjo44p6w8002iarvbcf53qu79"},{"post_id":"cjo44p6vt0016arvbb2wdh1iy","tag_id":"cjo44p6w30021arvbv3zk9iba","_id":"cjo44p6w8002jarvbf2w2d0cf"},{"post_id":"cjo44p6vv001aarvbt9w9n2xf","tag_id":"cjo44p6vb000harvbaiu5spo0","_id":"cjo44p6w8002karvb1ky2wvl8"},{"post_id":"cjo44p6vv001aarvbt9w9n2xf","tag_id":"cjo44p6w3001yarvbd0ok6xsv","_id":"cjo44p6w8002larvbnr3b2c4w"}],"Tag":[{"name":"Raspberry PI","_id":"cjo44p6v00005arvb2cl9v0ha"},{"name":"其他","_id":"cjo44p6v6000barvbfqv4df66"},{"name":"iOS","_id":"cjo44p6vb000harvbaiu5spo0"},{"name":"Swift","_id":"cjo44p6vi000narvb36jhesl1"},{"name":"RAC","_id":"cjo44p6vq0010arvby5jcnoye"},{"name":"tip","_id":"cjo44p6vx001earvbn9btdex1"},{"name":"RN","_id":"cjo44p6w3001yarvbd0ok6xsv"},{"name":"redux","_id":"cjo44p6w30020arvbmmmkpfs7"},{"name":"Objective-C","_id":"cjo44p6w30021arvbv3zk9iba"},{"name":"Block","_id":"cjo44p6w40024arvbrpqe78lc"},{"name":"GCD","_id":"cjo44p6w40025arvbwz4ew5vr"}]}}